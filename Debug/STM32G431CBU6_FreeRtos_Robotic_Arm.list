
STM32G431CBU6_FreeRtos_Robotic_Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecfc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800eedc  0800eedc  0000fedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f49c  0800f49c  000111e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f49c  0800f49c  0001049c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4a4  0800f4a4  000111e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4a4  0800f4a4  000104a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f4a8  0800f4a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800f4ac  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002aac  200001e4  0800f690  000111e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c90  0800f690  00011c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020cf0  00000000  00000000  00011214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051b2  00000000  00000000  00031f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c80  00000000  00000000  000370b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015ae  00000000  00000000  00038d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002367b  00000000  00000000  0003a2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020ea3  00000000  00000000  0005d961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1146  00000000  00000000  0007e804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f94a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081bc  00000000  00000000  0014f990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00157b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800eec4 	.word	0x0800eec4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800eec4 	.word	0x0800eec4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002d4:	f3bf 8f4f 	dsb	sy
}
 80002d8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80002da:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <__NVIC_SystemReset+0x24>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80002e2:	4904      	ldr	r1, [pc, #16]	@ (80002f4 <__NVIC_SystemReset+0x24>)
 80002e4:	4b04      	ldr	r3, [pc, #16]	@ (80002f8 <__NVIC_SystemReset+0x28>)
 80002e6:	4313      	orrs	r3, r2
 80002e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80002ea:	f3bf 8f4f 	dsb	sy
}
 80002ee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <__NVIC_SystemReset+0x20>
 80002f4:	e000ed00 	.word	0xe000ed00
 80002f8:	05fa0004 	.word	0x05fa0004

080002fc <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b090      	sub	sp, #64	@ 0x40
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
   char msg[50];
   snprintf(msg, 50, "Stack Over Flowed in task: %s\n", pcTaskName);
 8000306:	f107 000c 	add.w	r0, r7, #12
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	4a08      	ldr	r2, [pc, #32]	@ (8000330 <vApplicationStackOverflowHook+0x34>)
 800030e:	2132      	movs	r1, #50	@ 0x32
 8000310:	f00d fcb4 	bl	800dc7c <sniprintf>
   CDC_Transmit_FS(msg, strlen(msg));
 8000314:	f107 030c 	add.w	r3, r7, #12
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff81 	bl	8000220 <strlen>
 800031e:	4602      	mov	r2, r0
 8000320:	f107 030c 	add.w	r3, r7, #12
 8000324:	4611      	mov	r1, r2
 8000326:	4618      	mov	r0, r3
 8000328:	f00c feac 	bl	800d084 <CDC_Transmit_FS>
   NVIC_SystemReset();// Restarts the system using NVIC System Reset
 800032c:	f7ff ffd0 	bl	80002d0 <__NVIC_SystemReset>
 8000330:	0800eedc 	.word	0x0800eedc

08000334 <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
   CDC_Transmit_FS("Memory Allocation Error\n", strlen("Memory Allocation Error\n"));
 8000338:	2118      	movs	r1, #24
 800033a:	4802      	ldr	r0, [pc, #8]	@ (8000344 <vApplicationMallocFailedHook+0x10>)
 800033c:	f00c fea2 	bl	800d084 <CDC_Transmit_FS>
}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	0800eefc 	.word	0x0800eefc

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034c:	f000 fee3 	bl	8001116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000350:	f000 f896 	bl	8000480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000354:	f000 f978 	bl	8000648 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000358:	f000 f8de 	bl	8000518 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800035c:	f009 f998 	bl	8009690 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Load_Mutex */
  Load_MutexHandle = osMutexNew(&Load_Mutex_attributes);
 8000360:	482c      	ldr	r0, [pc, #176]	@ (8000414 <main+0xcc>)
 8000362:	f009 fa8c 	bl	800987e <osMutexNew>
 8000366:	4603      	mov	r3, r0
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <main+0xd0>)
 800036a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Moving_Lock */
  Moving_LockHandle = osSemaphoreNew(4, 4, &Moving_Lock_attributes);
 800036c:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <main+0xd4>)
 800036e:	2104      	movs	r1, #4
 8000370:	2004      	movs	r0, #4
 8000372:	f009 fb0a 	bl	800998a <osSemaphoreNew>
 8000376:	4603      	mov	r3, r0
 8000378:	4a29      	ldr	r2, [pc, #164]	@ (8000420 <main+0xd8>)
 800037a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Base_Servo_Angele */
  Base_Servo_AngeleHandle = osMessageQueueNew (1, sizeof(uint8_t), &Base_Servo_Angele_attributes);
 800037c:	4a29      	ldr	r2, [pc, #164]	@ (8000424 <main+0xdc>)
 800037e:	2101      	movs	r1, #1
 8000380:	2001      	movs	r0, #1
 8000382:	f009 fb8b 	bl	8009a9c <osMessageQueueNew>
 8000386:	4603      	mov	r3, r0
 8000388:	4a27      	ldr	r2, [pc, #156]	@ (8000428 <main+0xe0>)
 800038a:	6013      	str	r3, [r2, #0]

  /* creation of Joint1_Servo_Angle */
  Joint1_Servo_AngleHandle = osMessageQueueNew (1, sizeof(uint8_t), &Joint1_Servo_Angle_attributes);
 800038c:	4a27      	ldr	r2, [pc, #156]	@ (800042c <main+0xe4>)
 800038e:	2101      	movs	r1, #1
 8000390:	2001      	movs	r0, #1
 8000392:	f009 fb83 	bl	8009a9c <osMessageQueueNew>
 8000396:	4603      	mov	r3, r0
 8000398:	4a25      	ldr	r2, [pc, #148]	@ (8000430 <main+0xe8>)
 800039a:	6013      	str	r3, [r2, #0]

  /* creation of Joint2_Servo_Angle */
  Joint2_Servo_AngleHandle = osMessageQueueNew (1, sizeof(uint8_t), &Joint2_Servo_Angle_attributes);
 800039c:	4a25      	ldr	r2, [pc, #148]	@ (8000434 <main+0xec>)
 800039e:	2101      	movs	r1, #1
 80003a0:	2001      	movs	r0, #1
 80003a2:	f009 fb7b 	bl	8009a9c <osMessageQueueNew>
 80003a6:	4603      	mov	r3, r0
 80003a8:	4a23      	ldr	r2, [pc, #140]	@ (8000438 <main+0xf0>)
 80003aa:	6013      	str	r3, [r2, #0]

  /* creation of Gripper_Servo_Angle */
  Gripper_Servo_AngleHandle = osMessageQueueNew (1, sizeof(uint8_t), &Gripper_Servo_Angle_attributes);
 80003ac:	4a23      	ldr	r2, [pc, #140]	@ (800043c <main+0xf4>)
 80003ae:	2101      	movs	r1, #1
 80003b0:	2001      	movs	r0, #1
 80003b2:	f009 fb73 	bl	8009a9c <osMessageQueueNew>
 80003b6:	4603      	mov	r3, r0
 80003b8:	4a21      	ldr	r2, [pc, #132]	@ (8000440 <main+0xf8>)
 80003ba:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Angle_Cal */
  Angle_CalHandle = osThreadNew(Angle_Cal_Task, NULL, &Angle_Cal_attributes);
 80003bc:	4a21      	ldr	r2, [pc, #132]	@ (8000444 <main+0xfc>)
 80003be:	2100      	movs	r1, #0
 80003c0:	4821      	ldr	r0, [pc, #132]	@ (8000448 <main+0x100>)
 80003c2:	f009 f9af 	bl	8009724 <osThreadNew>
 80003c6:	4603      	mov	r3, r0
 80003c8:	4a20      	ldr	r2, [pc, #128]	@ (800044c <main+0x104>)
 80003ca:	6013      	str	r3, [r2, #0]

  /* creation of Servo_Base */
  Servo_BaseHandle = osThreadNew(Servo_Base_Task, NULL, &Servo_Base_attributes);
 80003cc:	4a20      	ldr	r2, [pc, #128]	@ (8000450 <main+0x108>)
 80003ce:	2100      	movs	r1, #0
 80003d0:	4820      	ldr	r0, [pc, #128]	@ (8000454 <main+0x10c>)
 80003d2:	f009 f9a7 	bl	8009724 <osThreadNew>
 80003d6:	4603      	mov	r3, r0
 80003d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000458 <main+0x110>)
 80003da:	6013      	str	r3, [r2, #0]

  /* creation of Servo_Joint_1 */
  Servo_Joint_1Handle = osThreadNew(Servo_Joint_1_Task, NULL, &Servo_Joint_1_attributes);
 80003dc:	4a1f      	ldr	r2, [pc, #124]	@ (800045c <main+0x114>)
 80003de:	2100      	movs	r1, #0
 80003e0:	481f      	ldr	r0, [pc, #124]	@ (8000460 <main+0x118>)
 80003e2:	f009 f99f 	bl	8009724 <osThreadNew>
 80003e6:	4603      	mov	r3, r0
 80003e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000464 <main+0x11c>)
 80003ea:	6013      	str	r3, [r2, #0]

  /* creation of Servo_Gripper */
  Servo_GripperHandle = osThreadNew(Servo_Gripper_Task, NULL, &Servo_Gripper_attributes);
 80003ec:	4a1e      	ldr	r2, [pc, #120]	@ (8000468 <main+0x120>)
 80003ee:	2100      	movs	r1, #0
 80003f0:	481e      	ldr	r0, [pc, #120]	@ (800046c <main+0x124>)
 80003f2:	f009 f997 	bl	8009724 <osThreadNew>
 80003f6:	4603      	mov	r3, r0
 80003f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000470 <main+0x128>)
 80003fa:	6013      	str	r3, [r2, #0]

  /* creation of Servo_Joint_2 */
  Servo_Joint_2Handle = osThreadNew(Servo_Joint_2_Task, NULL, &Servo_Joint_2_attributes);
 80003fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000474 <main+0x12c>)
 80003fe:	2100      	movs	r1, #0
 8000400:	481d      	ldr	r0, [pc, #116]	@ (8000478 <main+0x130>)
 8000402:	f009 f98f 	bl	8009724 <osThreadNew>
 8000406:	4603      	mov	r3, r0
 8000408:	4a1c      	ldr	r2, [pc, #112]	@ (800047c <main+0x134>)
 800040a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800040c:	f009 f964 	bl	80096d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <main+0xc8>
 8000414:	0800f280 	.word	0x0800f280
 8000418:	20000270 	.word	0x20000270
 800041c:	0800f290 	.word	0x0800f290
 8000420:	20000274 	.word	0x20000274
 8000424:	0800f220 	.word	0x0800f220
 8000428:	20000260 	.word	0x20000260
 800042c:	0800f238 	.word	0x0800f238
 8000430:	20000264 	.word	0x20000264
 8000434:	0800f250 	.word	0x0800f250
 8000438:	20000268 	.word	0x20000268
 800043c:	0800f268 	.word	0x0800f268
 8000440:	2000026c 	.word	0x2000026c
 8000444:	0800f16c 	.word	0x0800f16c
 8000448:	080007f1 	.word	0x080007f1
 800044c:	2000024c 	.word	0x2000024c
 8000450:	0800f190 	.word	0x0800f190
 8000454:	08000a59 	.word	0x08000a59
 8000458:	20000250 	.word	0x20000250
 800045c:	0800f1b4 	.word	0x0800f1b4
 8000460:	08000ae5 	.word	0x08000ae5
 8000464:	20000254 	.word	0x20000254
 8000468:	0800f1d8 	.word	0x0800f1d8
 800046c:	08000b79 	.word	0x08000b79
 8000470:	20000258 	.word	0x20000258
 8000474:	0800f1fc 	.word	0x0800f1fc
 8000478:	08000c0d 	.word	0x08000c0d
 800047c:	2000025c 	.word	0x2000025c

08000480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b094      	sub	sp, #80	@ 0x50
 8000484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000486:	f107 0318 	add.w	r3, r7, #24
 800048a:	2238      	movs	r2, #56	@ 0x38
 800048c:	2100      	movs	r1, #0
 800048e:	4618      	mov	r0, r3
 8000490:	f00d fd00 	bl	800de94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
 80004a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004a6:	f002 fe3d 	bl	8003124 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80004aa:	2321      	movs	r3, #33	@ 0x21
 80004ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004b4:	2301      	movs	r3, #1
 80004b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b8:	2302      	movs	r3, #2
 80004ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004bc:	2303      	movs	r3, #3
 80004be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80004c0:	2302      	movs	r3, #2
 80004c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80004c4:	234b      	movs	r3, #75	@ 0x4b
 80004c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004c8:	2302      	movs	r3, #2
 80004ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004cc:	2302      	movs	r3, #2
 80004ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004d0:	2302      	movs	r3, #2
 80004d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	4618      	mov	r0, r3
 80004da:	f002 fed7 	bl	800328c <HAL_RCC_OscConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80004e4:	f000 fbee 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e8:	230f      	movs	r3, #15
 80004ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ec:	2303      	movs	r3, #3
 80004ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2104      	movs	r1, #4
 8000500:	4618      	mov	r0, r3
 8000502:	f003 f9d5 	bl	80038b0 <HAL_RCC_ClockConfig>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800050c:	f000 fbda 	bl	8000cc4 <Error_Handler>
  }
}
 8000510:	bf00      	nop
 8000512:	3750      	adds	r7, #80	@ 0x50
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08e      	sub	sp, #56	@ 0x38
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052c:	f107 031c 	add.w	r3, r7, #28
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000538:	463b      	mov	r3, r7
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]
 8000546:	615a      	str	r2, [r3, #20]
 8000548:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800054a:	4b3e      	ldr	r3, [pc, #248]	@ (8000644 <MX_TIM2_Init+0x12c>)
 800054c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000550:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 150-1;
 8000552:	4b3c      	ldr	r3, [pc, #240]	@ (8000644 <MX_TIM2_Init+0x12c>)
 8000554:	2295      	movs	r2, #149	@ 0x95
 8000556:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000558:	4b3a      	ldr	r3, [pc, #232]	@ (8000644 <MX_TIM2_Init+0x12c>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800055e:	4b39      	ldr	r3, [pc, #228]	@ (8000644 <MX_TIM2_Init+0x12c>)
 8000560:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000564:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000566:	4b37      	ldr	r3, [pc, #220]	@ (8000644 <MX_TIM2_Init+0x12c>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800056c:	4b35      	ldr	r3, [pc, #212]	@ (8000644 <MX_TIM2_Init+0x12c>)
 800056e:	2280      	movs	r2, #128	@ 0x80
 8000570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000572:	4834      	ldr	r0, [pc, #208]	@ (8000644 <MX_TIM2_Init+0x12c>)
 8000574:	f003 fdc4 	bl	8004100 <HAL_TIM_Base_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800057e:	f000 fba1 	bl	8000cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000586:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000588:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800058c:	4619      	mov	r1, r3
 800058e:	482d      	ldr	r0, [pc, #180]	@ (8000644 <MX_TIM2_Init+0x12c>)
 8000590:	f004 fa3e 	bl	8004a10 <HAL_TIM_ConfigClockSource>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800059a:	f000 fb93 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800059e:	4829      	ldr	r0, [pc, #164]	@ (8000644 <MX_TIM2_Init+0x12c>)
 80005a0:	f003 fe70 	bl	8004284 <HAL_TIM_PWM_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80005aa:	f000 fb8b 	bl	8000cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	4619      	mov	r1, r3
 80005bc:	4821      	ldr	r0, [pc, #132]	@ (8000644 <MX_TIM2_Init+0x12c>)
 80005be:	f004 ff9d 	bl	80054fc <HAL_TIMEx_MasterConfigSynchronization>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80005c8:	f000 fb7c 	bl	8000cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005cc:	2360      	movs	r3, #96	@ 0x60
 80005ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	4619      	mov	r1, r3
 80005e2:	4818      	ldr	r0, [pc, #96]	@ (8000644 <MX_TIM2_Init+0x12c>)
 80005e4:	f004 f900 	bl	80047e8 <HAL_TIM_PWM_ConfigChannel>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80005ee:	f000 fb69 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	2204      	movs	r2, #4
 80005f6:	4619      	mov	r1, r3
 80005f8:	4812      	ldr	r0, [pc, #72]	@ (8000644 <MX_TIM2_Init+0x12c>)
 80005fa:	f004 f8f5 	bl	80047e8 <HAL_TIM_PWM_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000604:	f000 fb5e 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	2208      	movs	r2, #8
 800060c:	4619      	mov	r1, r3
 800060e:	480d      	ldr	r0, [pc, #52]	@ (8000644 <MX_TIM2_Init+0x12c>)
 8000610:	f004 f8ea 	bl	80047e8 <HAL_TIM_PWM_ConfigChannel>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800061a:	f000 fb53 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	220c      	movs	r2, #12
 8000622:	4619      	mov	r1, r3
 8000624:	4807      	ldr	r0, [pc, #28]	@ (8000644 <MX_TIM2_Init+0x12c>)
 8000626:	f004 f8df 	bl	80047e8 <HAL_TIM_PWM_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000630:	f000 fb48 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000634:	4803      	ldr	r0, [pc, #12]	@ (8000644 <MX_TIM2_Init+0x12c>)
 8000636:	f000 fb93 	bl	8000d60 <HAL_TIM_MspPostInit>

}
 800063a:	bf00      	nop
 800063c:	3738      	adds	r7, #56	@ 0x38
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000200 	.word	0x20000200

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065e:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <MX_GPIO_Init+0x8c>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	4a1c      	ldr	r2, [pc, #112]	@ (80006d4 <MX_GPIO_Init+0x8c>)
 8000664:	f043 0320 	orr.w	r3, r3, #32
 8000668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066a:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <MX_GPIO_Init+0x8c>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	f003 0320 	and.w	r3, r3, #32
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <MX_GPIO_Init+0x8c>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	4a16      	ldr	r2, [pc, #88]	@ (80006d4 <MX_GPIO_Init+0x8c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000682:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_GPIO_Init+0x8c>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_GPIO_Init+0x8c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a10      	ldr	r2, [pc, #64]	@ (80006d4 <MX_GPIO_Init+0x8c>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_GPIO_Init+0x8c>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2140      	movs	r1, #64	@ 0x40
 80006aa:	480b      	ldr	r0, [pc, #44]	@ (80006d8 <MX_GPIO_Init+0x90>)
 80006ac:	f000 ffee 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006b0:	2340      	movs	r3, #64	@ 0x40
 80006b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_GPIO_Init+0x90>)
 80006c8:	f000 fe5e 	bl	8001388 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000
 80006d8:	48000800 	.word	0x48000800

080006dc <Pwm_WriteServo>:

/* USER CODE BEGIN 4 */
void Pwm_WriteServo(uint8_t Servo_NO,uint8_t Angle){
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	    // Ensure position is between 0 and 180
	    if (Angle > 180) Angle = 180;
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	2bb4      	cmp	r3, #180	@ 0xb4
 80006f0:	d901      	bls.n	80006f6 <Pwm_WriteServo+0x1a>
 80006f2:	23b4      	movs	r3, #180	@ 0xb4
 80006f4:	71bb      	strb	r3, [r7, #6]

	    // Map position (0-180) to CCR value
	    uint32_t pulse_length = (499 + (Angle * 2000) / 180); // Pulse width in microseconds (500 to 2500 us)
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80006fc:	fb02 f303 	mul.w	r3, r2, r3
 8000700:	4a19      	ldr	r2, [pc, #100]	@ (8000768 <Pwm_WriteServo+0x8c>)
 8000702:	fb82 1203 	smull	r1, r2, r2, r3
 8000706:	441a      	add	r2, r3
 8000708:	11d2      	asrs	r2, r2, #7
 800070a:	17db      	asrs	r3, r3, #31
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8000712:	60fb      	str	r3, [r7, #12]
        switch (Servo_NO) {
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	3b01      	subs	r3, #1
 8000718:	2b03      	cmp	r3, #3
 800071a:	d81f      	bhi.n	800075c <Pwm_WriteServo+0x80>
 800071c:	a201      	add	r2, pc, #4	@ (adr r2, 8000724 <Pwm_WriteServo+0x48>)
 800071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000722:	bf00      	nop
 8000724:	08000735 	.word	0x08000735
 8000728:	0800073f 	.word	0x0800073f
 800072c:	08000749 	.word	0x08000749
 8000730:	08000753 	.word	0x08000753
            case 1:
            	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_length);
 8000734:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <Pwm_WriteServo+0x90>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	68fa      	ldr	r2, [r7, #12]
 800073a:	635a      	str	r2, [r3, #52]	@ 0x34
                break;
 800073c:	e00e      	b.n	800075c <Pwm_WriteServo+0x80>
            case 2:
            	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse_length);
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <Pwm_WriteServo+0x90>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 8000746:	e009      	b.n	800075c <Pwm_WriteServo+0x80>
            case 3:
            	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pulse_length);
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <Pwm_WriteServo+0x90>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	68fa      	ldr	r2, [r7, #12]
 800074e:	63da      	str	r2, [r3, #60]	@ 0x3c
                break;
 8000750:	e004      	b.n	800075c <Pwm_WriteServo+0x80>
            case 4:
            	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pulse_length);
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <Pwm_WriteServo+0x90>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	641a      	str	r2, [r3, #64]	@ 0x40
                break;
 800075a:	bf00      	nop
        }
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	b60b60b7 	.word	0xb60b60b7
 800076c:	20000200 	.word	0x20000200

08000770 <Servo_Ramp>:
void Servo_Ramp(uint8_t start_angle, uint8_t end_angle, uint16_t step_delay,uint8_t Servo_NO) {
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	4604      	mov	r4, r0
 8000778:	4608      	mov	r0, r1
 800077a:	4611      	mov	r1, r2
 800077c:	461a      	mov	r2, r3
 800077e:	4623      	mov	r3, r4
 8000780:	71fb      	strb	r3, [r7, #7]
 8000782:	4603      	mov	r3, r0
 8000784:	71bb      	strb	r3, [r7, #6]
 8000786:	460b      	mov	r3, r1
 8000788:	80bb      	strh	r3, [r7, #4]
 800078a:	4613      	mov	r3, r2
 800078c:	70fb      	strb	r3, [r7, #3]
    if (start_angle < end_angle) {
 800078e:	79fa      	ldrb	r2, [r7, #7]
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	429a      	cmp	r2, r3
 8000794:	d214      	bcs.n	80007c0 <Servo_Ramp+0x50>
        for (uint8_t pos = start_angle; pos <= end_angle; pos++) {
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	73fb      	strb	r3, [r7, #15]
 800079a:	e00c      	b.n	80007b6 <Servo_Ramp+0x46>
        	Pwm_WriteServo(Servo_NO,pos);
 800079c:	7bfa      	ldrb	r2, [r7, #15]
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff9a 	bl	80006dc <Pwm_WriteServo>
            HAL_Delay(step_delay);
 80007a8:	88bb      	ldrh	r3, [r7, #4]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fcea 	bl	8001184 <HAL_Delay>
        for (uint8_t pos = start_angle; pos <= end_angle; pos++) {
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	3301      	adds	r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	7bfa      	ldrb	r2, [r7, #15]
 80007b8:	79bb      	ldrb	r3, [r7, #6]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d9ee      	bls.n	800079c <Servo_Ramp+0x2c>
        for (uint8_t pos = start_angle; pos >= end_angle; pos--) {
        	Pwm_WriteServo(Servo_NO,pos);
            HAL_Delay(step_delay);
        }
    }
}
 80007be:	e013      	b.n	80007e8 <Servo_Ramp+0x78>
        for (uint8_t pos = start_angle; pos >= end_angle; pos--) {
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	73bb      	strb	r3, [r7, #14]
 80007c4:	e00c      	b.n	80007e0 <Servo_Ramp+0x70>
        	Pwm_WriteServo(Servo_NO,pos);
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff85 	bl	80006dc <Pwm_WriteServo>
            HAL_Delay(step_delay);
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fcd5 	bl	8001184 <HAL_Delay>
        for (uint8_t pos = start_angle; pos >= end_angle; pos--) {
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	3b01      	subs	r3, #1
 80007de:	73bb      	strb	r3, [r7, #14]
 80007e0:	7bba      	ldrb	r2, [r7, #14]
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d2ee      	bcs.n	80007c6 <Servo_Ramp+0x56>
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}

080007f0 <Angle_Cal_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Angle_Cal_Task */
void Angle_Cal_Task(void *argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 80007f8:	f00c fb6c 	bl	800ced4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  CDC_Transmit_FS("VCP Started\n", strlen("VCP Started\n"));
 80007fc:	210c      	movs	r1, #12
 80007fe:	4878      	ldr	r0, [pc, #480]	@ (80009e0 <Angle_Cal_Task+0x1f0>)
 8000800:	f00c fc40 	bl	800d084 <CDC_Transmit_FS>
  /* Infinite loop */
  for(;;)
  {
	  if(Vcp_Data_Available == 1){
 8000804:	4b77      	ldr	r3, [pc, #476]	@ (80009e4 <Angle_Cal_Task+0x1f4>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	f040 80e4 	bne.w	80009d6 <Angle_Cal_Task+0x1e6>
		  Vcp_Data_Available =0;
 800080e:	4b75      	ldr	r3, [pc, #468]	@ (80009e4 <Angle_Cal_Task+0x1f4>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
		  //Data Format Vcp_Data_Available = 1&1&90&90&90
		  	  	  	  	  	  	  	  	  //mode&Base&Joint1&Joint2&Gripper
		  if(Raw_VCP_Data[0]==49)		  //Joint Angle Control Mode
 8000814:	4b74      	ldr	r3, [pc, #464]	@ (80009e8 <Angle_Cal_Task+0x1f8>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b31      	cmp	r3, #49	@ 0x31
 800081a:	f040 80cf 	bne.w	80009bc <Angle_Cal_Task+0x1cc>
		  {
			  CDC_Transmit_FS("Joint Angle Control Mode\n", strlen("Joint Angle Control Mode\n"));
 800081e:	2119      	movs	r1, #25
 8000820:	4872      	ldr	r0, [pc, #456]	@ (80009ec <Angle_Cal_Task+0x1fc>)
 8000822:	f00c fc2f 	bl	800d084 <CDC_Transmit_FS>
			  char *token = strtok(Raw_VCP_Data, "&");
 8000826:	4972      	ldr	r1, [pc, #456]	@ (80009f0 <Angle_Cal_Task+0x200>)
 8000828:	486f      	ldr	r0, [pc, #444]	@ (80009e8 <Angle_Cal_Task+0x1f8>)
 800082a:	f00d fb3b 	bl	800dea4 <strtok>
 800082e:	6178      	str	r0, [r7, #20]
			  int i = 0 ;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
			  while (token != NULL)
 8000834:	e018      	b.n	8000868 <Angle_Cal_Task+0x78>
			      {
			          printf("%s\n", token);
 8000836:	6978      	ldr	r0, [r7, #20]
 8000838:	f00d fa18 	bl	800dc6c <puts>
			          token = strtok(NULL, "&");
 800083c:	496c      	ldr	r1, [pc, #432]	@ (80009f0 <Angle_Cal_Task+0x200>)
 800083e:	2000      	movs	r0, #0
 8000840:	f00d fb30 	bl	800dea4 <strtok>
 8000844:	6178      	str	r0, [r7, #20]
			          osDelay(100);
 8000846:	2064      	movs	r0, #100	@ 0x64
 8000848:	f008 fffe 	bl	8009848 <osDelay>
			          //CDC_Transmit_FS(token, strlen(token));
			          int Angle = atoi(token);
 800084c:	6978      	ldr	r0, [r7, #20]
 800084e:	f00d f86d 	bl	800d92c <atoi>
 8000852:	60b8      	str	r0, [r7, #8]
			          Servo_Angeles[i]=Angle;
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	b2d9      	uxtb	r1, r3
 8000858:	4a66      	ldr	r2, [pc, #408]	@ (80009f4 <Angle_Cal_Task+0x204>)
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	4413      	add	r3, r2
 800085e:	460a      	mov	r2, r1
 8000860:	701a      	strb	r2, [r3, #0]
			          i++;
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	3301      	adds	r3, #1
 8000866:	613b      	str	r3, [r7, #16]
			  while (token != NULL)
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1e3      	bne.n	8000836 <Angle_Cal_Task+0x46>
			      }
			  if (xSemaphoreTake(Moving_LockHandle, portMAX_DELAY) == pdTRUE) {
 800086e:	4b62      	ldr	r3, [pc, #392]	@ (80009f8 <Angle_Cal_Task+0x208>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f04f 31ff 	mov.w	r1, #4294967295
 8000876:	4618      	mov	r0, r3
 8000878:	f009 ffcc 	bl	800a814 <xQueueSemaphoreTake>
 800087c:	4603      	mov	r3, r0
 800087e:	2b01      	cmp	r3, #1
 8000880:	f040 80a9 	bne.w	80009d6 <Angle_Cal_Task+0x1e6>
				  if (xSemaphoreTake(Load_MutexHandle, portMAX_DELAY) == pdTRUE) {
 8000884:	4b5d      	ldr	r3, [pc, #372]	@ (80009fc <Angle_Cal_Task+0x20c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f04f 31ff 	mov.w	r1, #4294967295
 800088c:	4618      	mov	r0, r3
 800088e:	f009 ffc1 	bl	800a814 <xQueueSemaphoreTake>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	f040 8085 	bne.w	80009a4 <Angle_Cal_Task+0x1b4>
					  //Queue Load
					  uint8_t count = osMessageQueueGetCount(Base_Servo_AngeleHandle);
 800089a:	4b59      	ldr	r3, [pc, #356]	@ (8000a00 <Angle_Cal_Task+0x210>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f009 fa2e 	bl	8009d00 <osMessageQueueGetCount>
 80008a4:	4603      	mov	r3, r0
 80008a6:	73fb      	strb	r3, [r7, #15]
					  if(count==0){
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d112      	bne.n	80008d4 <Angle_Cal_Task+0xe4>
					  status_base = osMessageQueuePut(Base_Servo_AngeleHandle, &Servo_Angeles[0],8, 100);
 80008ae:	4b54      	ldr	r3, [pc, #336]	@ (8000a00 <Angle_Cal_Task+0x210>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	2364      	movs	r3, #100	@ 0x64
 80008b4:	2208      	movs	r2, #8
 80008b6:	494f      	ldr	r1, [pc, #316]	@ (80009f4 <Angle_Cal_Task+0x204>)
 80008b8:	f009 f964 	bl	8009b84 <osMessageQueuePut>
 80008bc:	4603      	mov	r3, r0
 80008be:	4a51      	ldr	r2, [pc, #324]	@ (8000a04 <Angle_Cal_Task+0x214>)
 80008c0:	6013      	str	r3, [r2, #0]
					  if (status_base != osOK) {
 80008c2:	4b50      	ldr	r3, [pc, #320]	@ (8000a04 <Angle_Cal_Task+0x214>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d008      	beq.n	80008dc <Angle_Cal_Task+0xec>
						  CDC_Transmit_FS("Sender Base Queue Error\n", strlen("Sender Base Queue Error\n"));
 80008ca:	2118      	movs	r1, #24
 80008cc:	484e      	ldr	r0, [pc, #312]	@ (8000a08 <Angle_Cal_Task+0x218>)
 80008ce:	f00c fbd9 	bl	800d084 <CDC_Transmit_FS>
 80008d2:	e003      	b.n	80008dc <Angle_Cal_Task+0xec>
						 }
					  }
					  else{
						  CDC_Transmit_FS("Sender Base Queue Full\n", strlen("Sender Base Queue Full\n"));
 80008d4:	2117      	movs	r1, #23
 80008d6:	484d      	ldr	r0, [pc, #308]	@ (8000a0c <Angle_Cal_Task+0x21c>)
 80008d8:	f00c fbd4 	bl	800d084 <CDC_Transmit_FS>
					  }
					  count = osMessageQueueGetCount(Joint1_Servo_AngleHandle);
 80008dc:	4b4c      	ldr	r3, [pc, #304]	@ (8000a10 <Angle_Cal_Task+0x220>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f009 fa0d 	bl	8009d00 <osMessageQueueGetCount>
 80008e6:	4603      	mov	r3, r0
 80008e8:	73fb      	strb	r3, [r7, #15]
					  if(count==0){
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d112      	bne.n	8000916 <Angle_Cal_Task+0x126>
						status_1 = osMessageQueuePut(Joint1_Servo_AngleHandle, &Servo_Angeles[1],8, 100);
 80008f0:	4b47      	ldr	r3, [pc, #284]	@ (8000a10 <Angle_Cal_Task+0x220>)
 80008f2:	6818      	ldr	r0, [r3, #0]
 80008f4:	2364      	movs	r3, #100	@ 0x64
 80008f6:	2208      	movs	r2, #8
 80008f8:	4946      	ldr	r1, [pc, #280]	@ (8000a14 <Angle_Cal_Task+0x224>)
 80008fa:	f009 f943 	bl	8009b84 <osMessageQueuePut>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a45      	ldr	r2, [pc, #276]	@ (8000a18 <Angle_Cal_Task+0x228>)
 8000902:	6013      	str	r3, [r2, #0]
					  if (status_1 != osOK) {
 8000904:	4b44      	ldr	r3, [pc, #272]	@ (8000a18 <Angle_Cal_Task+0x228>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d008      	beq.n	800091e <Angle_Cal_Task+0x12e>
						CDC_Transmit_FS("Sender Joint1 Queue Error\n", strlen("Sender Base Queue Error\n"));
 800090c:	2118      	movs	r1, #24
 800090e:	4843      	ldr	r0, [pc, #268]	@ (8000a1c <Angle_Cal_Task+0x22c>)
 8000910:	f00c fbb8 	bl	800d084 <CDC_Transmit_FS>
 8000914:	e003      	b.n	800091e <Angle_Cal_Task+0x12e>
							}
						}
					  else{
						  CDC_Transmit_FS("Sender Joint1 Queue Full\n", strlen("Sender Base Queue Full\n"));
 8000916:	2117      	movs	r1, #23
 8000918:	4841      	ldr	r0, [pc, #260]	@ (8000a20 <Angle_Cal_Task+0x230>)
 800091a:	f00c fbb3 	bl	800d084 <CDC_Transmit_FS>
					  }
					  count = osMessageQueueGetCount(Joint2_Servo_AngleHandle);
 800091e:	4b41      	ldr	r3, [pc, #260]	@ (8000a24 <Angle_Cal_Task+0x234>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f009 f9ec 	bl	8009d00 <osMessageQueueGetCount>
 8000928:	4603      	mov	r3, r0
 800092a:	73fb      	strb	r3, [r7, #15]
					  if(count==0){
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d112      	bne.n	8000958 <Angle_Cal_Task+0x168>
						status_2 = osMessageQueuePut(Joint2_Servo_AngleHandle, &Servo_Angeles[2],8, 100);
 8000932:	4b3c      	ldr	r3, [pc, #240]	@ (8000a24 <Angle_Cal_Task+0x234>)
 8000934:	6818      	ldr	r0, [r3, #0]
 8000936:	2364      	movs	r3, #100	@ 0x64
 8000938:	2208      	movs	r2, #8
 800093a:	493b      	ldr	r1, [pc, #236]	@ (8000a28 <Angle_Cal_Task+0x238>)
 800093c:	f009 f922 	bl	8009b84 <osMessageQueuePut>
 8000940:	4603      	mov	r3, r0
 8000942:	4a3a      	ldr	r2, [pc, #232]	@ (8000a2c <Angle_Cal_Task+0x23c>)
 8000944:	6013      	str	r3, [r2, #0]
					  if (status_2 != osOK) {
 8000946:	4b39      	ldr	r3, [pc, #228]	@ (8000a2c <Angle_Cal_Task+0x23c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d008      	beq.n	8000960 <Angle_Cal_Task+0x170>
						CDC_Transmit_FS("Sender Joint2 Queue Error\n", strlen("Sender Base Queue Error\n"));
 800094e:	2118      	movs	r1, #24
 8000950:	4837      	ldr	r0, [pc, #220]	@ (8000a30 <Angle_Cal_Task+0x240>)
 8000952:	f00c fb97 	bl	800d084 <CDC_Transmit_FS>
 8000956:	e003      	b.n	8000960 <Angle_Cal_Task+0x170>
							}
						}
					  else{
						  CDC_Transmit_FS("Sender Joint2 Queue Full\n", strlen("Sender Base Queue Full\n"));
 8000958:	2117      	movs	r1, #23
 800095a:	4836      	ldr	r0, [pc, #216]	@ (8000a34 <Angle_Cal_Task+0x244>)
 800095c:	f00c fb92 	bl	800d084 <CDC_Transmit_FS>
					  }
					  count = osMessageQueueGetCount(Gripper_Servo_AngleHandle);
 8000960:	4b35      	ldr	r3, [pc, #212]	@ (8000a38 <Angle_Cal_Task+0x248>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f009 f9cb 	bl	8009d00 <osMessageQueueGetCount>
 800096a:	4603      	mov	r3, r0
 800096c:	73fb      	strb	r3, [r7, #15]
					  if(count==0){
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d112      	bne.n	800099a <Angle_Cal_Task+0x1aa>
						status_Gripper = osMessageQueuePut(Gripper_Servo_AngleHandle, &Servo_Angeles[3],8, 100);
 8000974:	4b30      	ldr	r3, [pc, #192]	@ (8000a38 <Angle_Cal_Task+0x248>)
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	2364      	movs	r3, #100	@ 0x64
 800097a:	2208      	movs	r2, #8
 800097c:	492f      	ldr	r1, [pc, #188]	@ (8000a3c <Angle_Cal_Task+0x24c>)
 800097e:	f009 f901 	bl	8009b84 <osMessageQueuePut>
 8000982:	4603      	mov	r3, r0
 8000984:	4a2e      	ldr	r2, [pc, #184]	@ (8000a40 <Angle_Cal_Task+0x250>)
 8000986:	6013      	str	r3, [r2, #0]
					  if (status_Gripper != osOK) {
 8000988:	4b2d      	ldr	r3, [pc, #180]	@ (8000a40 <Angle_Cal_Task+0x250>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00d      	beq.n	80009ac <Angle_Cal_Task+0x1bc>
						CDC_Transmit_FS("Sender Gripper Queue Error\n", strlen("Sender Base Queue Error\n"));
 8000990:	2118      	movs	r1, #24
 8000992:	482c      	ldr	r0, [pc, #176]	@ (8000a44 <Angle_Cal_Task+0x254>)
 8000994:	f00c fb76 	bl	800d084 <CDC_Transmit_FS>
 8000998:	e008      	b.n	80009ac <Angle_Cal_Task+0x1bc>
							}
						  }
					  else{
					  CDC_Transmit_FS("Sender Gripper Queue Full\n", strlen("Sender Base Queue Full\n"));
 800099a:	2117      	movs	r1, #23
 800099c:	482a      	ldr	r0, [pc, #168]	@ (8000a48 <Angle_Cal_Task+0x258>)
 800099e:	f00c fb71 	bl	800d084 <CDC_Transmit_FS>
 80009a2:	e003      	b.n	80009ac <Angle_Cal_Task+0x1bc>
					  }
					}
				  else {
					  CDC_Transmit_FS("Failed to take the mutex\n", strlen("Failed to take the mutex\n"));
 80009a4:	2119      	movs	r1, #25
 80009a6:	4829      	ldr	r0, [pc, #164]	@ (8000a4c <Angle_Cal_Task+0x25c>)
 80009a8:	f00c fb6c 	bl	800d084 <CDC_Transmit_FS>
				  }
				  xSemaphoreGive(Load_MutexHandle);
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <Angle_Cal_Task+0x20c>)
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	2300      	movs	r3, #0
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	f009 fcab 	bl	800a310 <xQueueGenericSend>
 80009ba:	e00c      	b.n	80009d6 <Angle_Cal_Task+0x1e6>
			  }
		  	}
		  else if(Raw_VCP_Data[0]==50)			//Coordinate mode
 80009bc:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <Angle_Cal_Task+0x1f8>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b32      	cmp	r3, #50	@ 0x32
 80009c2:	d104      	bne.n	80009ce <Angle_Cal_Task+0x1de>
		  {
			  CDC_Transmit_FS("Coordinate mode\n", strlen("Coordinate mode\n"));
 80009c4:	2110      	movs	r1, #16
 80009c6:	4822      	ldr	r0, [pc, #136]	@ (8000a50 <Angle_Cal_Task+0x260>)
 80009c8:	f00c fb5c 	bl	800d084 <CDC_Transmit_FS>
 80009cc:	e003      	b.n	80009d6 <Angle_Cal_Task+0x1e6>
			  // This modul will be created with inverse kinematic function
		  }
		  else									//ERROR
	  	  {
			  CDC_Transmit_FS("Invalid Selection\n", strlen("Invalid Selection\n"));
 80009ce:	2112      	movs	r1, #18
 80009d0:	4820      	ldr	r0, [pc, #128]	@ (8000a54 <Angle_Cal_Task+0x264>)
 80009d2:	f00c fb57 	bl	800d084 <CDC_Transmit_FS>
	  	  }

	 }
	 osDelay(10);
 80009d6:	200a      	movs	r0, #10
 80009d8:	f008 ff36 	bl	8009848 <osDelay>
	  if(Vcp_Data_Available == 1){
 80009dc:	e712      	b.n	8000804 <Angle_Cal_Task+0x14>
 80009de:	bf00      	nop
 80009e0:	0800efc8 	.word	0x0800efc8
 80009e4:	200002b8 	.word	0x200002b8
 80009e8:	20000278 	.word	0x20000278
 80009ec:	0800efd8 	.word	0x0800efd8
 80009f0:	0800eff4 	.word	0x0800eff4
 80009f4:	200002bc 	.word	0x200002bc
 80009f8:	20000274 	.word	0x20000274
 80009fc:	20000270 	.word	0x20000270
 8000a00:	20000260 	.word	0x20000260
 8000a04:	200002c0 	.word	0x200002c0
 8000a08:	0800eff8 	.word	0x0800eff8
 8000a0c:	0800f014 	.word	0x0800f014
 8000a10:	20000264 	.word	0x20000264
 8000a14:	200002bd 	.word	0x200002bd
 8000a18:	200002c4 	.word	0x200002c4
 8000a1c:	0800f02c 	.word	0x0800f02c
 8000a20:	0800f048 	.word	0x0800f048
 8000a24:	20000268 	.word	0x20000268
 8000a28:	200002be 	.word	0x200002be
 8000a2c:	200002c8 	.word	0x200002c8
 8000a30:	0800f064 	.word	0x0800f064
 8000a34:	0800f080 	.word	0x0800f080
 8000a38:	2000026c 	.word	0x2000026c
 8000a3c:	200002bf 	.word	0x200002bf
 8000a40:	200002cc 	.word	0x200002cc
 8000a44:	0800f09c 	.word	0x0800f09c
 8000a48:	0800f0b8 	.word	0x0800f0b8
 8000a4c:	0800f0d4 	.word	0x0800f0d4
 8000a50:	0800f0f0 	.word	0x0800f0f0
 8000a54:	0800f104 	.word	0x0800f104

08000a58 <Servo_Base_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Servo_Base_Task */
void Servo_Base_Task(void *argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Servo_Base_Task */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a60:	2100      	movs	r1, #0
 8000a62:	481c      	ldr	r0, [pc, #112]	@ (8000ad4 <Servo_Base_Task+0x7c>)
 8000a64:	f003 fc70 	bl	8004348 <HAL_TIM_PWM_Start>
    uint8_t startPos_Base = 60; // Starting Position
 8000a68:	233c      	movs	r3, #60	@ 0x3c
 8000a6a:	75fb      	strb	r3, [r7, #23]
    int const step_delay_Base = 30; // Steps Delay
 8000a6c:	231e      	movs	r3, #30
 8000a6e:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	  uint8_t received_Angle_Base;// Target Postion
	  uint8_t count_Base = osMessageQueueGetCount(Base_Servo_AngeleHandle);
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <Servo_Base_Task+0x80>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f009 f943 	bl	8009d00 <osMessageQueueGetCount>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	73fb      	strb	r3, [r7, #15]
	  if(count_Base>0){
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d023      	beq.n	8000acc <Servo_Base_Task+0x74>
		  status_base = osMessageQueueGet(Base_Servo_AngeleHandle, &received_Angle_Base, 8, 100);
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <Servo_Base_Task+0x80>)
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	f107 010e 	add.w	r1, r7, #14
 8000a8c:	2364      	movs	r3, #100	@ 0x64
 8000a8e:	2208      	movs	r2, #8
 8000a90:	f009 f8d8 	bl	8009c44 <osMessageQueueGet>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4a11      	ldr	r2, [pc, #68]	@ (8000adc <Servo_Base_Task+0x84>)
 8000a98:	6013      	str	r3, [r2, #0]
		  if (status_base == osOK) {
 8000a9a:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <Servo_Base_Task+0x84>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1e6      	bne.n	8000a70 <Servo_Base_Task+0x18>
			  if(startPos_Base !=received_Angle_Base){
 8000aa2:	7bbb      	ldrb	r3, [r7, #14]
 8000aa4:	7dfa      	ldrb	r2, [r7, #23]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d006      	beq.n	8000ab8 <Servo_Base_Task+0x60>
				  Servo_Ramp(startPos_Base,received_Angle_Base,step_delay_Base,Servo_no_Base);
 8000aaa:	7bb9      	ldrb	r1, [r7, #14]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	7df8      	ldrb	r0, [r7, #23]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	f7ff fe5c 	bl	8000770 <Servo_Ramp>
			      }
		  startPos_Base =received_Angle_Base;
 8000ab8:	7bbb      	ldrb	r3, [r7, #14]
 8000aba:	75fb      	strb	r3, [r7, #23]
		  xSemaphoreGive(Moving_LockHandle);
 8000abc:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <Servo_Base_Task+0x88>)
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f009 fc23 	bl	800a310 <xQueueGenericSend>
 8000aca:	e7d1      	b.n	8000a70 <Servo_Base_Task+0x18>
		  	  }
		  }
	  else {
		  osDelay(100);
 8000acc:	2064      	movs	r0, #100	@ 0x64
 8000ace:	f008 febb 	bl	8009848 <osDelay>
  {
 8000ad2:	e7cd      	b.n	8000a70 <Servo_Base_Task+0x18>
 8000ad4:	20000200 	.word	0x20000200
 8000ad8:	20000260 	.word	0x20000260
 8000adc:	200002c0 	.word	0x200002c0
 8000ae0:	20000274 	.word	0x20000274

08000ae4 <Servo_Joint_1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Servo_Joint_1_Task */
void Servo_Joint_1_Task(void *argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Servo_Joint_1_Task */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000aec:	2104      	movs	r1, #4
 8000aee:	481e      	ldr	r0, [pc, #120]	@ (8000b68 <Servo_Joint_1_Task+0x84>)
 8000af0:	f003 fc2a 	bl	8004348 <HAL_TIM_PWM_Start>
    uint8_t startPos_1 = 60; // Starting Position
 8000af4:	233c      	movs	r3, #60	@ 0x3c
 8000af6:	73fb      	strb	r3, [r7, #15]
    uint8_t const step_delay_1 = 30; // Steps Delay
 8000af8:	231e      	movs	r3, #30
 8000afa:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  uint8_t received_Angle_1;// Target Postion
	  uint8_t count_1 = osMessageQueueGetCount(Joint1_Servo_AngleHandle);
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <Servo_Joint_1_Task+0x88>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f009 f8fd 	bl	8009d00 <osMessageQueueGetCount>
 8000b06:	4603      	mov	r3, r0
 8000b08:	737b      	strb	r3, [r7, #13]
	  if(count_1>0){
 8000b0a:	7b7b      	ldrb	r3, [r7, #13]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d023      	beq.n	8000b58 <Servo_Joint_1_Task+0x74>
		  status_1 = osMessageQueueGet(Joint1_Servo_AngleHandle, &received_Angle_1, 8, 100);
 8000b10:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <Servo_Joint_1_Task+0x88>)
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	f107 010c 	add.w	r1, r7, #12
 8000b18:	2364      	movs	r3, #100	@ 0x64
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	f009 f892 	bl	8009c44 <osMessageQueueGet>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a13      	ldr	r2, [pc, #76]	@ (8000b70 <Servo_Joint_1_Task+0x8c>)
 8000b24:	6013      	str	r3, [r2, #0]
		  if (status_1 == osOK) {
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <Servo_Joint_1_Task+0x8c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d117      	bne.n	8000b5e <Servo_Joint_1_Task+0x7a>
			  if(startPos_1 !=received_Angle_1){
 8000b2e:	7b3b      	ldrb	r3, [r7, #12]
 8000b30:	7bfa      	ldrb	r2, [r7, #15]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d006      	beq.n	8000b44 <Servo_Joint_1_Task+0x60>
				  Servo_Ramp(startPos_1,received_Angle_1,step_delay_1,Servo_no_1);
 8000b36:	7b39      	ldrb	r1, [r7, #12]
 8000b38:	7bbb      	ldrb	r3, [r7, #14]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	7bf8      	ldrb	r0, [r7, #15]
 8000b3e:	2302      	movs	r3, #2
 8000b40:	f7ff fe16 	bl	8000770 <Servo_Ramp>
		      }
		startPos_1 =received_Angle_1;
 8000b44:	7b3b      	ldrb	r3, [r7, #12]
 8000b46:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(Moving_LockHandle);
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <Servo_Joint_1_Task+0x90>)
 8000b4a:	6818      	ldr	r0, [r3, #0]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	f009 fbdd 	bl	800a310 <xQueueGenericSend>
 8000b56:	e002      	b.n	8000b5e <Servo_Joint_1_Task+0x7a>
		  	  	  }
	  	  }
	  else {
		  osDelay(100);
 8000b58:	2064      	movs	r0, #100	@ 0x64
 8000b5a:	f008 fe75 	bl	8009848 <osDelay>
	  	  }

	  osDelay(100);
 8000b5e:	2064      	movs	r0, #100	@ 0x64
 8000b60:	f008 fe72 	bl	8009848 <osDelay>
  {
 8000b64:	e7ca      	b.n	8000afc <Servo_Joint_1_Task+0x18>
 8000b66:	bf00      	nop
 8000b68:	20000200 	.word	0x20000200
 8000b6c:	20000264 	.word	0x20000264
 8000b70:	200002c4 	.word	0x200002c4
 8000b74:	20000274 	.word	0x20000274

08000b78 <Servo_Gripper_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Servo_Gripper_Task */
void Servo_Gripper_Task(void *argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Servo_Gripper_Task */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000b80:	2108      	movs	r1, #8
 8000b82:	481e      	ldr	r0, [pc, #120]	@ (8000bfc <Servo_Gripper_Task+0x84>)
 8000b84:	f003 fbe0 	bl	8004348 <HAL_TIM_PWM_Start>
    uint8_t startPos_Gripper = 60; // Starting Position
 8000b88:	233c      	movs	r3, #60	@ 0x3c
 8000b8a:	73fb      	strb	r3, [r7, #15]
    uint8_t const step_delay_Gripper = 30; // Steps Delay
 8000b8c:	231e      	movs	r3, #30
 8000b8e:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  uint8_t received_Angle_Gripper;// Target Postion
	  uint8_t count_Gripper = osMessageQueueGetCount(Gripper_Servo_AngleHandle);
 8000b90:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <Servo_Gripper_Task+0x88>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f009 f8b3 	bl	8009d00 <osMessageQueueGetCount>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	737b      	strb	r3, [r7, #13]
	  if(count_Gripper>0){
 8000b9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d023      	beq.n	8000bec <Servo_Gripper_Task+0x74>
		  status_Gripper = osMessageQueueGet(Gripper_Servo_AngleHandle, &received_Angle_Gripper, 8, 100);
 8000ba4:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <Servo_Gripper_Task+0x88>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	f107 010c 	add.w	r1, r7, #12
 8000bac:	2364      	movs	r3, #100	@ 0x64
 8000bae:	2208      	movs	r2, #8
 8000bb0:	f009 f848 	bl	8009c44 <osMessageQueueGet>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4a13      	ldr	r2, [pc, #76]	@ (8000c04 <Servo_Gripper_Task+0x8c>)
 8000bb8:	6013      	str	r3, [r2, #0]
		  if (status_Gripper == osOK) {
 8000bba:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <Servo_Gripper_Task+0x8c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d117      	bne.n	8000bf2 <Servo_Gripper_Task+0x7a>
			  if(startPos_Gripper != received_Angle_Gripper){
 8000bc2:	7b3b      	ldrb	r3, [r7, #12]
 8000bc4:	7bfa      	ldrb	r2, [r7, #15]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d006      	beq.n	8000bd8 <Servo_Gripper_Task+0x60>
				  Servo_Ramp(startPos_Gripper, received_Angle_Gripper,step_delay_Gripper,Servo_no_Gripper);
 8000bca:	7b39      	ldrb	r1, [r7, #12]
 8000bcc:	7bbb      	ldrb	r3, [r7, #14]
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	7bf8      	ldrb	r0, [r7, #15]
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	f7ff fdcc 	bl	8000770 <Servo_Ramp>
		      }
		startPos_Gripper = received_Angle_Gripper;
 8000bd8:	7b3b      	ldrb	r3, [r7, #12]
 8000bda:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(Moving_LockHandle);
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <Servo_Gripper_Task+0x90>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	2300      	movs	r3, #0
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	f009 fb93 	bl	800a310 <xQueueGenericSend>
 8000bea:	e002      	b.n	8000bf2 <Servo_Gripper_Task+0x7a>
		  	  	  }
	  	  }
	  else {
		  osDelay(100);
 8000bec:	2064      	movs	r0, #100	@ 0x64
 8000bee:	f008 fe2b 	bl	8009848 <osDelay>
	  	  }

	  osDelay(100);
 8000bf2:	2064      	movs	r0, #100	@ 0x64
 8000bf4:	f008 fe28 	bl	8009848 <osDelay>
  {
 8000bf8:	e7ca      	b.n	8000b90 <Servo_Gripper_Task+0x18>
 8000bfa:	bf00      	nop
 8000bfc:	20000200 	.word	0x20000200
 8000c00:	2000026c 	.word	0x2000026c
 8000c04:	200002cc 	.word	0x200002cc
 8000c08:	20000274 	.word	0x20000274

08000c0c <Servo_Joint_2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Servo_Joint_2_Task */
void Servo_Joint_2_Task(void *argument)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Servo_Joint_2_Task */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000c14:	210c      	movs	r1, #12
 8000c16:	481e      	ldr	r0, [pc, #120]	@ (8000c90 <Servo_Joint_2_Task+0x84>)
 8000c18:	f003 fb96 	bl	8004348 <HAL_TIM_PWM_Start>
    uint8_t startPos_2 = 60; // Starting Position
 8000c1c:	233c      	movs	r3, #60	@ 0x3c
 8000c1e:	73fb      	strb	r3, [r7, #15]
    uint8_t const step_delay_2 = 30; // Steps Delay
 8000c20:	231e      	movs	r3, #30
 8000c22:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  uint8_t received_Angle_2;// Target Postion
	  uint8_t count_2 = osMessageQueueGetCount(Joint2_Servo_AngleHandle);
 8000c24:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <Servo_Joint_2_Task+0x88>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f009 f869 	bl	8009d00 <osMessageQueueGetCount>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	737b      	strb	r3, [r7, #13]
	  if(count_2>0){
 8000c32:	7b7b      	ldrb	r3, [r7, #13]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d023      	beq.n	8000c80 <Servo_Joint_2_Task+0x74>
		  status_2 = osMessageQueueGet(Joint2_Servo_AngleHandle, &received_Angle_2, 8, 100);
 8000c38:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <Servo_Joint_2_Task+0x88>)
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	f107 010c 	add.w	r1, r7, #12
 8000c40:	2364      	movs	r3, #100	@ 0x64
 8000c42:	2208      	movs	r2, #8
 8000c44:	f008 fffe 	bl	8009c44 <osMessageQueueGet>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4a13      	ldr	r2, [pc, #76]	@ (8000c98 <Servo_Joint_2_Task+0x8c>)
 8000c4c:	6013      	str	r3, [r2, #0]
		  if (status_2 == osOK) {
 8000c4e:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <Servo_Joint_2_Task+0x8c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d117      	bne.n	8000c86 <Servo_Joint_2_Task+0x7a>
			  if(startPos_2 !=received_Angle_2){
 8000c56:	7b3b      	ldrb	r3, [r7, #12]
 8000c58:	7bfa      	ldrb	r2, [r7, #15]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d006      	beq.n	8000c6c <Servo_Joint_2_Task+0x60>
				  Servo_Ramp(startPos_2,received_Angle_2,step_delay_2,Servo_no_2);
 8000c5e:	7b39      	ldrb	r1, [r7, #12]
 8000c60:	7bbb      	ldrb	r3, [r7, #14]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	7bf8      	ldrb	r0, [r7, #15]
 8000c66:	2303      	movs	r3, #3
 8000c68:	f7ff fd82 	bl	8000770 <Servo_Ramp>
		      }
		startPos_2=received_Angle_2;
 8000c6c:	7b3b      	ldrb	r3, [r7, #12]
 8000c6e:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(Moving_LockHandle);
 8000c70:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <Servo_Joint_2_Task+0x90>)
 8000c72:	6818      	ldr	r0, [r3, #0]
 8000c74:	2300      	movs	r3, #0
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	f009 fb49 	bl	800a310 <xQueueGenericSend>
 8000c7e:	e002      	b.n	8000c86 <Servo_Joint_2_Task+0x7a>
		  	  	  }
	  	  }
	  else {
		  osDelay(100);
 8000c80:	2064      	movs	r0, #100	@ 0x64
 8000c82:	f008 fde1 	bl	8009848 <osDelay>
	  	  }
	  osDelay(100);
 8000c86:	2064      	movs	r0, #100	@ 0x64
 8000c88:	f008 fdde 	bl	8009848 <osDelay>
  {
 8000c8c:	e7ca      	b.n	8000c24 <Servo_Joint_2_Task+0x18>
 8000c8e:	bf00      	nop
 8000c90:	20000200 	.word	0x20000200
 8000c94:	20000268 	.word	0x20000268
 8000c98:	200002c8 	.word	0x200002c8
 8000c9c:	20000274 	.word	0x20000274

08000ca0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a04      	ldr	r2, [pc, #16]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d101      	bne.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cb2:	f000 fa49 	bl	8001148 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40001400 	.word	0x40001400

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <Error_Handler+0x8>

08000cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_MspInit+0x50>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cda:	4a11      	ldr	r2, [pc, #68]	@ (8000d20 <HAL_MspInit+0x50>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <HAL_MspInit+0x50>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <HAL_MspInit+0x50>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d20 <HAL_MspInit+0x50>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <HAL_MspInit+0x50>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	210f      	movs	r1, #15
 8000d0a:	f06f 0001 	mvn.w	r0, #1
 8000d0e:	f000 fb13 	bl	8001338 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d12:	f002 faab 	bl	800326c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d34:	d10b      	bne.n	8000d4e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <HAL_TIM_Base_MspInit+0x38>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3a:	4a08      	ldr	r2, [pc, #32]	@ (8000d5c <HAL_TIM_Base_MspInit+0x38>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_TIM_Base_MspInit+0x38>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d80:	d11c      	bne.n	8000dbc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <HAL_TIM_MspPostInit+0x64>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc4 <HAL_TIM_MspPostInit+0x64>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <HAL_TIM_MspPostInit+0x64>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Servo_1_Pin|Servo_2_Pin|Servo_3_Pin|Servo_3A3_Pin;
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000daa:	2301      	movs	r3, #1
 8000dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db8:	f000 fae6 	bl	8001388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3720      	adds	r7, #32
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08c      	sub	sp, #48	@ 0x30
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <HAL_InitTick+0xc4>)
 8000dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8000e8c <HAL_InitTick+0xc4>)
 8000dde:	f043 0320 	orr.w	r3, r3, #32
 8000de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000de4:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <HAL_InitTick+0xc4>)
 8000de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de8:	f003 0320 	and.w	r3, r3, #32
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000df0:	f107 020c 	add.w	r2, r7, #12
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 ff18 	bl	8003c30 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e00:	f002 ff00 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8000e04:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e08:	4a21      	ldr	r2, [pc, #132]	@ (8000e90 <HAL_InitTick+0xc8>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	0c9b      	lsrs	r3, r3, #18
 8000e10:	3b01      	subs	r3, #1
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <HAL_InitTick+0xcc>)
 8000e16:	4a20      	ldr	r2, [pc, #128]	@ (8000e98 <HAL_InitTick+0xd0>)
 8000e18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <HAL_InitTick+0xcc>)
 8000e1c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e20:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000e22:	4a1c      	ldr	r2, [pc, #112]	@ (8000e94 <HAL_InitTick+0xcc>)
 8000e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e26:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <HAL_InitTick+0xcc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <HAL_InitTick+0xcc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8000e34:	4817      	ldr	r0, [pc, #92]	@ (8000e94 <HAL_InitTick+0xcc>)
 8000e36:	f003 f963 	bl	8004100 <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d11b      	bne.n	8000e80 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000e48:	4812      	ldr	r0, [pc, #72]	@ (8000e94 <HAL_InitTick+0xcc>)
 8000e4a:	f003 f9b1 	bl	80041b0 <HAL_TIM_Base_Start_IT>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d111      	bne.n	8000e80 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e5c:	2037      	movs	r0, #55	@ 0x37
 8000e5e:	f000 fa85 	bl	800136c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d808      	bhi.n	8000e7a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	2037      	movs	r0, #55	@ 0x37
 8000e6e:	f000 fa63 	bl	8001338 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <HAL_InitTick+0xd4>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	e002      	b.n	8000e80 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3730      	adds	r7, #48	@ 0x30
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	431bde83 	.word	0x431bde83
 8000e94:	200002d0 	.word	0x200002d0
 8000e98:	40001400 	.word	0x40001400
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <USB_HP_IRQHandler+0x10>)
 8000ede:	f000 fcdd 	bl	800189c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20002648 	.word	0x20002648

08000eec <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <USB_LP_IRQHandler+0x10>)
 8000ef2:	f000 fcd3 	bl	800189c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */
  /* USER CODE END USB_LP_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20002648 	.word	0x20002648

08000f00 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <TIM7_IRQHandler+0x10>)
 8000f06:	f003 fb1f 	bl	8004548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200002d0 	.word	0x200002d0

08000f14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return 1;
 8000f18:	2301      	movs	r3, #1
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_kill>:

int _kill(int pid, int sig)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f2e:	f00d f85b 	bl	800dfe8 <__errno>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2216      	movs	r2, #22
 8000f36:	601a      	str	r2, [r3, #0]
  return -1;
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_exit>:

void _exit (int status)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ffe7 	bl	8000f24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f56:	bf00      	nop
 8000f58:	e7fd      	b.n	8000f56 <_exit+0x12>

08000f5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	e00a      	b.n	8000f82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f6c:	f3af 8000 	nop.w
 8000f70:	4601      	mov	r1, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	60ba      	str	r2, [r7, #8]
 8000f78:	b2ca      	uxtb	r2, r1
 8000f7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	dbf0      	blt.n	8000f6c <_read+0x12>
  }

  return len;
 8000f8a:	687b      	ldr	r3, [r7, #4]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	e009      	b.n	8000fba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	60ba      	str	r2, [r7, #8]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	dbf1      	blt.n	8000fa6 <_write+0x12>
  }
  return len;
 8000fc2:	687b      	ldr	r3, [r7, #4]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_close>:

int _close(int file)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ff4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_isatty>:

int _isatty(int file)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800100c:	2301      	movs	r3, #1
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800101a:	b480      	push	{r7}
 800101c:	b085      	sub	sp, #20
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001064:	f00c ffc0 	bl	800dfe8 <__errno>
 8001068:	4603      	mov	r3, r0
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	e009      	b.n	8001088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <_sbrk+0x64>)
 8001084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20008000 	.word	0x20008000
 8001094:	00000400 	.word	0x00000400
 8001098:	2000031c 	.word	0x2000031c
 800109c:	20002c90 	.word	0x20002c90

080010a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c4:	480d      	ldr	r0, [pc, #52]	@ (80010fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c8:	f7ff ffea 	bl	80010a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010cc:	480c      	ldr	r0, [pc, #48]	@ (8001100 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ce:	490d      	ldr	r1, [pc, #52]	@ (8001104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001108 <LoopForever+0xe>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001110 <LoopForever+0x16>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f00c ff7f 	bl	800dff4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f6:	f7ff f927 	bl	8000348 <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   r0, =_estack
 80010fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001108:	0800f4ac 	.word	0x0800f4ac
  ldr r2, =_sbss
 800110c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001110:	20002c90 	.word	0x20002c90

08001114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_2_IRQHandler>

08001116 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f8fe 	bl	8001322 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001126:	200f      	movs	r0, #15
 8001128:	f7ff fe4e 	bl	8000dc8 <HAL_InitTick>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	e001      	b.n	800113c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001138:	f7ff fdca 	bl	8000cd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800113c:	79fb      	ldrb	r3, [r7, #7]

}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_IncTick+0x1c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_IncTick+0x20>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4413      	add	r3, r2
 8001156:	4a03      	ldr	r2, [pc, #12]	@ (8001164 <HAL_IncTick+0x1c>)
 8001158:	6013      	str	r3, [r2, #0]
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	20000320 	.word	0x20000320
 8001168:	20000008 	.word	0x20000008

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000320 	.word	0x20000320

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d004      	beq.n	80011a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <HAL_Delay+0x40>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	4413      	add	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a8:	bf00      	nop
 80011aa:	f7ff ffdf 	bl	800116c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d8f7      	bhi.n	80011aa <HAL_Delay+0x26>
  {
  }
}
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000008 	.word	0x20000008

080011c8 <__NVIC_SetPriorityGrouping>:
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	@ (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_GetPriorityGrouping>:
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_EnableIRQ>:
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db0b      	blt.n	8001256 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	4907      	ldr	r1, [pc, #28]	@ (8001264 <__NVIC_EnableIRQ+0x38>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	@ (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	@ 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	@ 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ff4c 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001346:	f7ff ff63 	bl	8001210 <__NVIC_GetPriorityGrouping>
 800134a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	68b9      	ldr	r1, [r7, #8]
 8001350:	6978      	ldr	r0, [r7, #20]
 8001352:	f7ff ffb3 	bl	80012bc <NVIC_EncodePriority>
 8001356:	4602      	mov	r2, r0
 8001358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff82 	bl	8001268 <__NVIC_SetPriority>
}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff56 	bl	800122c <__NVIC_EnableIRQ>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001396:	e15a      	b.n	800164e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	4013      	ands	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 814c 	beq.w	8001648 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d005      	beq.n	80013c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d130      	bne.n	800142a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fe:	2201      	movs	r2, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f003 0201 	and.w	r2, r3, #1
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b03      	cmp	r3, #3
 8001434:	d017      	beq.n	8001466 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d123      	bne.n	80014ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	08da      	lsrs	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3208      	adds	r2, #8
 800147a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	691a      	ldr	r2, [r3, #16]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	08da      	lsrs	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3208      	adds	r2, #8
 80014b4:	6939      	ldr	r1, [r7, #16]
 80014b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0203 	and.w	r2, r3, #3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80a6 	beq.w	8001648 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fc:	4b5b      	ldr	r3, [pc, #364]	@ (800166c <HAL_GPIO_Init+0x2e4>)
 80014fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001500:	4a5a      	ldr	r2, [pc, #360]	@ (800166c <HAL_GPIO_Init+0x2e4>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6613      	str	r3, [r2, #96]	@ 0x60
 8001508:	4b58      	ldr	r3, [pc, #352]	@ (800166c <HAL_GPIO_Init+0x2e4>)
 800150a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001514:	4a56      	ldr	r2, [pc, #344]	@ (8001670 <HAL_GPIO_Init+0x2e8>)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800153e:	d01f      	beq.n	8001580 <HAL_GPIO_Init+0x1f8>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a4c      	ldr	r2, [pc, #304]	@ (8001674 <HAL_GPIO_Init+0x2ec>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d019      	beq.n	800157c <HAL_GPIO_Init+0x1f4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a4b      	ldr	r2, [pc, #300]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d013      	beq.n	8001578 <HAL_GPIO_Init+0x1f0>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4a      	ldr	r2, [pc, #296]	@ (800167c <HAL_GPIO_Init+0x2f4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d00d      	beq.n	8001574 <HAL_GPIO_Init+0x1ec>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a49      	ldr	r2, [pc, #292]	@ (8001680 <HAL_GPIO_Init+0x2f8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d007      	beq.n	8001570 <HAL_GPIO_Init+0x1e8>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a48      	ldr	r2, [pc, #288]	@ (8001684 <HAL_GPIO_Init+0x2fc>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d101      	bne.n	800156c <HAL_GPIO_Init+0x1e4>
 8001568:	2305      	movs	r3, #5
 800156a:	e00a      	b.n	8001582 <HAL_GPIO_Init+0x1fa>
 800156c:	2306      	movs	r3, #6
 800156e:	e008      	b.n	8001582 <HAL_GPIO_Init+0x1fa>
 8001570:	2304      	movs	r3, #4
 8001572:	e006      	b.n	8001582 <HAL_GPIO_Init+0x1fa>
 8001574:	2303      	movs	r3, #3
 8001576:	e004      	b.n	8001582 <HAL_GPIO_Init+0x1fa>
 8001578:	2302      	movs	r3, #2
 800157a:	e002      	b.n	8001582 <HAL_GPIO_Init+0x1fa>
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <HAL_GPIO_Init+0x1fa>
 8001580:	2300      	movs	r3, #0
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	f002 0203 	and.w	r2, r2, #3
 8001588:	0092      	lsls	r2, r2, #2
 800158a:	4093      	lsls	r3, r2
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001592:	4937      	ldr	r1, [pc, #220]	@ (8001670 <HAL_GPIO_Init+0x2e8>)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	089b      	lsrs	r3, r3, #2
 8001598:	3302      	adds	r3, #2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a0:	4b39      	ldr	r3, [pc, #228]	@ (8001688 <HAL_GPIO_Init+0x300>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015c4:	4a30      	ldr	r2, [pc, #192]	@ (8001688 <HAL_GPIO_Init+0x300>)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <HAL_GPIO_Init+0x300>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ee:	4a26      	ldr	r2, [pc, #152]	@ (8001688 <HAL_GPIO_Init+0x300>)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015f4:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <HAL_GPIO_Init+0x300>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001618:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <HAL_GPIO_Init+0x300>)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800161e:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <HAL_GPIO_Init+0x300>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001642:	4a11      	ldr	r2, [pc, #68]	@ (8001688 <HAL_GPIO_Init+0x300>)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	fa22 f303 	lsr.w	r3, r2, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	f47f ae9d 	bne.w	8001398 <HAL_GPIO_Init+0x10>
  }
}
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000
 8001674:	48000400 	.word	0x48000400
 8001678:	48000800 	.word	0x48000800
 800167c:	48000c00 	.word	0x48000c00
 8001680:	48001000 	.word	0x48001000
 8001684:	48001400 	.word	0x48001400
 8001688:	40010400 	.word	0x40010400

0800168c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
 8001698:	4613      	mov	r3, r2
 800169a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800169c:	787b      	ldrb	r3, [r7, #1]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0c0      	b.n	8001850 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d106      	bne.n	80016e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f00b fe16 	bl	800d314 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2203      	movs	r2, #3
 80016ec:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 ffe0 	bl	80056ba <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	e03e      	b.n	800177e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	3311      	adds	r3, #17
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	440b      	add	r3, r1
 8001722:	3310      	adds	r3, #16
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	3313      	adds	r3, #19
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	3320      	adds	r3, #32
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	3324      	adds	r3, #36	@ 0x24
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	3301      	adds	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	791b      	ldrb	r3, [r3, #4]
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	429a      	cmp	r2, r3
 8001786:	d3bb      	bcc.n	8001700 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	e044      	b.n	8001818 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	440b      	add	r3, r1
 800179c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017a4:	7bfa      	ldrb	r2, [r7, #15]
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	440b      	add	r3, r1
 80017b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	440b      	add	r3, r1
 80017f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	3301      	adds	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	791b      	ldrb	r3, [r3, #4]
 800181c:	7bfa      	ldrb	r2, [r7, #15]
 800181e:	429a      	cmp	r2, r3
 8001820:	d3b5      	bcc.n	800178e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3304      	adds	r3, #4
 800182a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800182e:	f003 ff5f 	bl	80056f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7a9b      	ldrb	r3, [r3, #10]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d102      	bne.n	800184e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f001 fc40 	bl	80030ce <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_PCD_Start+0x16>
 800186a:	2302      	movs	r3, #2
 800186c:	e012      	b.n	8001894 <HAL_PCD_Start+0x3c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f003 ff06 	bl	800568c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f006 f9c6 	bl	8007c16 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f006 f9cb 	bl	8007c44 <USB_ReadInterrupts>
 80018ae:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 fb04 	bl	8001ec8 <PCD_EP_ISR_Handler>

    return;
 80018c0:	e110      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018de:	b292      	uxth	r2, r2
 80018e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f00b fdae 	bl	800d446 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80018ea:	2100      	movs	r1, #0
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f8fc 	bl	8001aea <HAL_PCD_SetAddress>

    return;
 80018f2:	e0f7      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00c      	beq.n	8001918 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001910:	b292      	uxth	r2, r2
 8001912:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001916:	e0e5      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00c      	beq.n	800193c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800192a:	b29a      	uxth	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001934:	b292      	uxth	r2, r2
 8001936:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800193a:	e0d3      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d034      	beq.n	80019b0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800194e:	b29a      	uxth	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0204 	bic.w	r2, r2, #4
 8001958:	b292      	uxth	r2, r2
 800195a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001966:	b29a      	uxth	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0208 	bic.w	r2, r2, #8
 8001970:	b292      	uxth	r2, r2
 8001972:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800197c:	2b01      	cmp	r3, #1
 800197e:	d107      	bne.n	8001990 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001988:	2100      	movs	r1, #0
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f00b ff4e 	bl	800d82c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f00b fd91 	bl	800d4b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800199e:	b29a      	uxth	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80019a8:	b292      	uxth	r2, r2
 80019aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019ae:	e099      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d027      	beq.n	8001a0a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0208 	orr.w	r2, r2, #8
 80019cc:	b292      	uxth	r2, r2
 80019ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019da:	b29a      	uxth	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019e4:	b292      	uxth	r2, r2
 80019e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0204 	orr.w	r2, r2, #4
 80019fc:	b292      	uxth	r2, r2
 80019fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f00b fd3e 	bl	800d484 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a08:	e06c      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d040      	beq.n	8001a96 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a26:	b292      	uxth	r2, r2
 8001a28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d12b      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0204 	orr.w	r2, r2, #4
 8001a48:	b292      	uxth	r2, r2
 8001a4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0208 	orr.w	r2, r2, #8
 8001a60:	b292      	uxth	r2, r2
 8001a62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a84:	2101      	movs	r1, #1
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f00b fed0 	bl	800d82c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001a8c:	e02a      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f00b fcf8 	bl	800d484 <HAL_PCD_SuspendCallback>
    return;
 8001a94:	e026      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00f      	beq.n	8001ac0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ab2:	b292      	uxth	r2, r2
 8001ab4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f00b fcb6 	bl	800d42a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001abe:	e011      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00c      	beq.n	8001ae4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001adc:	b292      	uxth	r2, r2
 8001ade:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001ae2:	bf00      	nop
  }
}
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_PCD_SetAddress+0x1a>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e012      	b.n	8001b2a <HAL_PCD_SetAddress+0x40>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	78fa      	ldrb	r2, [r7, #3]
 8001b10:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f006 f867 	bl	8007bee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	4608      	mov	r0, r1
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4603      	mov	r3, r0
 8001b42:	70fb      	strb	r3, [r7, #3]
 8001b44:	460b      	mov	r3, r1
 8001b46:	803b      	strh	r3, [r7, #0]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	da0e      	bge.n	8001b76 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	f003 0207 	and.w	r2, r3, #7
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	3310      	adds	r3, #16
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	705a      	strb	r2, [r3, #1]
 8001b74:	e00e      	b.n	8001b94 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	f003 0207 	and.w	r2, r3, #7
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ba0:	883a      	ldrh	r2, [r7, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	78ba      	ldrb	r2, [r7, #2]
 8001baa:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bac:	78bb      	ldrb	r3, [r7, #2]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d102      	bne.n	8001bb8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_PCD_EP_Open+0x94>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e00e      	b.n	8001be4 <HAL_PCD_EP_Open+0xb2>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68f9      	ldr	r1, [r7, #12]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 fda9 	bl	800572c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001be2:	7afb      	ldrb	r3, [r7, #11]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	da0e      	bge.n	8001c1e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	f003 0207 	and.w	r2, r3, #7
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	3310      	adds	r3, #16
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	705a      	strb	r2, [r3, #1]
 8001c1c:	e00e      	b.n	8001c3c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	f003 0207 	and.w	r2, r3, #7
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_PCD_EP_Close+0x6a>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e00e      	b.n	8001c74 <HAL_PCD_EP_Close+0x88>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68f9      	ldr	r1, [r7, #12]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f004 f925 	bl	8005eb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c8c:	7afb      	ldrb	r3, [r7, #11]
 8001c8e:	f003 0207 	and.w	r2, r3, #7
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cbc:	7afb      	ldrb	r3, [r7, #11]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6979      	ldr	r1, [r7, #20]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f004 fadd 	bl	800628e <USB_EPStartXfer>

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 0207 	and.w	r2, r3, #7
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001d00:	681b      	ldr	r3, [r3, #0]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
 8001d20:	f003 0207 	and.w	r2, r3, #7
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	3310      	adds	r3, #16
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4413      	add	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2200      	movs	r2, #0
 8001d52:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2201      	movs	r2, #1
 8001d58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d5a:	7afb      	ldrb	r3, [r7, #11]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6979      	ldr	r1, [r7, #20]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f004 fa8e 	bl	800628e <USB_EPStartXfer>

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	7912      	ldrb	r2, [r2, #4]
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e03e      	b.n	8001e18 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da0e      	bge.n	8001dc0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	f003 0207 	and.w	r2, r3, #7
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	3310      	adds	r3, #16
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	705a      	strb	r2, [r3, #1]
 8001dbe:	e00c      	b.n	8001dda <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_PCD_EP_SetStall+0x7e>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e00e      	b.n	8001e18 <HAL_PCD_EP_SetStall+0x9c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68f9      	ldr	r1, [r7, #12]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f005 fdf1 	bl	80079f0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	7912      	ldrb	r2, [r2, #4]
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e040      	b.n	8001ec0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	da0e      	bge.n	8001e64 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	f003 0207 	and.w	r2, r3, #7
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	3310      	adds	r3, #16
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	705a      	strb	r2, [r3, #1]
 8001e62:	e00e      	b.n	8001e82 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	f003 0207 	and.w	r2, r3, #7
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_PCD_EP_ClrStall+0x82>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e00e      	b.n	8001ec0 <HAL_PCD_EP_ClrStall+0xa0>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68f9      	ldr	r1, [r7, #12]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f005 fdee 	bl	8007a92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b096      	sub	sp, #88	@ 0x58
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ed0:	e3ad      	b.n	800262e <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001eda:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ede:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001eec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 816f 	bne.w	80021d4 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ef6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d14c      	bne.n	8001f9c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f12:	81fb      	strh	r3, [r7, #14]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	89fb      	ldrh	r3, [r7, #14]
 8001f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3310      	adds	r3, #16
 8001f2a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f52:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	441a      	add	r2, r3
 8001f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f60:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f62:	2100      	movs	r1, #0
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f00b fa46 	bl	800d3f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7b1b      	ldrb	r3, [r3, #12]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 835c 	beq.w	800262e <PCD_EP_ISR_Handler+0x766>
 8001f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f040 8357 	bne.w	800262e <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7b1b      	ldrb	r3, [r3, #12]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	731a      	strb	r2, [r3, #12]
 8001f9a:	e348      	b.n	800262e <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001fa2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001fae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d032      	beq.n	8002020 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fee:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	f005 fe77 	bl	8007ce8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	b29a      	uxth	r2, r3
 8002002:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002006:	4013      	ands	r3, r2
 8002008:	823b      	strh	r3, [r7, #16]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	8a3a      	ldrh	r2, [r7, #16]
 8002010:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002014:	b292      	uxth	r2, r2
 8002016:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f00b f9bf 	bl	800d39c <HAL_PCD_SetupStageCallback>
 800201e:	e306      	b.n	800262e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002020:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002024:	2b00      	cmp	r3, #0
 8002026:	f280 8302 	bge.w	800262e <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	b29a      	uxth	r2, r3
 8002032:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002036:	4013      	ands	r3, r2
 8002038:	83fb      	strh	r3, [r7, #30]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	8bfa      	ldrh	r2, [r7, #30]
 8002040:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002044:	b292      	uxth	r2, r2
 8002046:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002050:	b29b      	uxth	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	4413      	add	r3, r2
 8002062:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800206c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800206e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d019      	beq.n	80020ac <PCD_EP_ISR_Handler+0x1e4>
 8002078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d015      	beq.n	80020ac <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002086:	6959      	ldr	r1, [r3, #20]
 8002088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800208a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800208c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800208e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002090:	b29b      	uxth	r3, r3
 8002092:	f005 fe29 	bl	8007ce8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	441a      	add	r2, r3
 80020a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020a4:	2100      	movs	r1, #0
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f00b f98a 	bl	800d3c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80020b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 82b5 	bne.w	800262e <PCD_EP_ISR_Handler+0x766>
 80020c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020c8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80020cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80020d0:	f000 82ad 	beq.w	800262e <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	4413      	add	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020fe:	b29a      	uxth	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	801a      	strh	r2, [r3, #0]
 8002104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2b3e      	cmp	r3, #62	@ 0x3e
 800210a:	d91d      	bls.n	8002148 <PCD_EP_ISR_Handler+0x280>
 800210c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	647b      	str	r3, [r7, #68]	@ 0x44
 8002114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <PCD_EP_ISR_Handler+0x25e>
 8002120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002122:	3b01      	subs	r3, #1
 8002124:	647b      	str	r3, [r7, #68]	@ 0x44
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	b29a      	uxth	r2, r3
 800212c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800212e:	b29b      	uxth	r3, r3
 8002130:	029b      	lsls	r3, r3, #10
 8002132:	b29b      	uxth	r3, r3
 8002134:	4313      	orrs	r3, r2
 8002136:	b29b      	uxth	r3, r3
 8002138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800213c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002140:	b29a      	uxth	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	801a      	strh	r2, [r3, #0]
 8002146:	e026      	b.n	8002196 <PCD_EP_ISR_Handler+0x2ce>
 8002148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <PCD_EP_ISR_Handler+0x29e>
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800215a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800215e:	b29a      	uxth	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	801a      	strh	r2, [r3, #0]
 8002164:	e017      	b.n	8002196 <PCD_EP_ISR_Handler+0x2ce>
 8002166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	647b      	str	r3, [r7, #68]	@ 0x44
 800216e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <PCD_EP_ISR_Handler+0x2b8>
 800217a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800217c:	3301      	adds	r3, #1
 800217e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b29a      	uxth	r2, r3
 8002186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002188:	b29b      	uxth	r3, r3
 800218a:	029b      	lsls	r3, r3, #10
 800218c:	b29b      	uxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b29a      	uxth	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021a6:	827b      	strh	r3, [r7, #18]
 80021a8:	8a7b      	ldrh	r3, [r7, #18]
 80021aa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80021ae:	827b      	strh	r3, [r7, #18]
 80021b0:	8a7b      	ldrh	r3, [r7, #18]
 80021b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80021b6:	827b      	strh	r3, [r7, #18]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	8a7b      	ldrh	r3, [r7, #18]
 80021be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	8013      	strh	r3, [r2, #0]
 80021d2:	e22c      	b.n	800262e <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021e8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f280 80f6 	bge.w	80023de <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	b29a      	uxth	r2, r3
 8002204:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002208:	4013      	ands	r3, r2
 800220a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002220:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002224:	b292      	uxth	r2, r2
 8002226:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002228:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800223e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002240:	7b1b      	ldrb	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d123      	bne.n	800228e <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	4413      	add	r3, r2
 8002260:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800226a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800226e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 808e 	beq.w	8002394 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800227e:	6959      	ldr	r1, [r3, #20]
 8002280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002282:	88da      	ldrh	r2, [r3, #6]
 8002284:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002288:	f005 fd2e 	bl	8007ce8 <USB_ReadPMA>
 800228c:	e082      	b.n	8002394 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800228e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002290:	78db      	ldrb	r3, [r3, #3]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d10a      	bne.n	80022ac <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002296:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800229a:	461a      	mov	r2, r3
 800229c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f9d3 	bl	800264a <HAL_PCD_EP_DB_Receive>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80022aa:	e073      	b.n	8002394 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022c6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	441a      	add	r2, r3
 80022d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80022dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d022      	beq.n	8002350 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	4413      	add	r3, r2
 8002324:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800232e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002332:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002336:	2b00      	cmp	r3, #0
 8002338:	d02c      	beq.n	8002394 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002340:	6959      	ldr	r1, [r3, #20]
 8002342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002344:	891a      	ldrh	r2, [r3, #8]
 8002346:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800234a:	f005 fccd 	bl	8007ce8 <USB_ReadPMA>
 800234e:	e021      	b.n	8002394 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	4413      	add	r3, r2
 800236a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002374:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002378:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800237c:	2b00      	cmp	r3, #0
 800237e:	d009      	beq.n	8002394 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002386:	6959      	ldr	r1, [r3, #20]
 8002388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800238a:	895a      	ldrh	r2, [r3, #10]
 800238c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002390:	f005 fcaa 	bl	8007ce8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800239c:	441a      	add	r2, r3
 800239e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80023a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a4:	695a      	ldr	r2, [r3, #20]
 80023a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80023aa:	441a      	add	r2, r3
 80023ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80023b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <PCD_EP_ISR_Handler+0x4fc>
 80023b8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80023bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d206      	bcs.n	80023d2 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4619      	mov	r1, r3
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f00a fff8 	bl	800d3c0 <HAL_PCD_DataOutStageCallback>
 80023d0:	e005      	b.n	80023de <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 ff58 	bl	800628e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8121 	beq.w	800262e <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80023ec:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	3310      	adds	r3, #16
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800241a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	441a      	add	r2, r3
 800242c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002438:	b29b      	uxth	r3, r3
 800243a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800243c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800243e:	78db      	ldrb	r3, [r3, #3]
 8002440:	2b01      	cmp	r3, #1
 8002442:	f040 80a2 	bne.w	800258a <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8002446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800244c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800244e:	7b1b      	ldrb	r3, [r3, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8093 	beq.w	800257c <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002456:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800245a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d046      	beq.n	80024f0 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002464:	785b      	ldrb	r3, [r3, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d126      	bne.n	80024b8 <PCD_EP_ISR_Handler+0x5f0>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002478:	b29b      	uxth	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	4413      	add	r3, r2
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
 8002482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	00da      	lsls	r2, r3, #3
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	4413      	add	r3, r2
 800248c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002490:	623b      	str	r3, [r7, #32]
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	b29b      	uxth	r3, r3
 8002498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249c:	b29a      	uxth	r2, r3
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	801a      	strh	r2, [r3, #0]
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	801a      	strh	r2, [r3, #0]
 80024b6:	e061      	b.n	800257c <PCD_EP_ISR_Handler+0x6b4>
 80024b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ba:	785b      	ldrb	r3, [r3, #1]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d15d      	bne.n	800257c <PCD_EP_ISR_Handler+0x6b4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d4:	4413      	add	r3, r2
 80024d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	00da      	lsls	r2, r3, #3
 80024de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e0:	4413      	add	r3, r2
 80024e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80024e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ea:	2200      	movs	r2, #0
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	e045      	b.n	800257c <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024f8:	785b      	ldrb	r3, [r3, #1]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d126      	bne.n	800254c <PCD_EP_ISR_Handler+0x684>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	637b      	str	r3, [r7, #52]	@ 0x34
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800250c:	b29b      	uxth	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002512:	4413      	add	r3, r2
 8002514:	637b      	str	r3, [r7, #52]	@ 0x34
 8002516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	00da      	lsls	r2, r3, #3
 800251c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800251e:	4413      	add	r3, r2
 8002520:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002524:	633b      	str	r3, [r7, #48]	@ 0x30
 8002526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002530:	b29a      	uxth	r2, r3
 8002532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002534:	801a      	strh	r2, [r3, #0]
 8002536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002544:	b29a      	uxth	r2, r3
 8002546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	e017      	b.n	800257c <PCD_EP_ISR_Handler+0x6b4>
 800254c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800254e:	785b      	ldrb	r3, [r3, #1]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d113      	bne.n	800257c <PCD_EP_ISR_Handler+0x6b4>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800255c:	b29b      	uxth	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002562:	4413      	add	r3, r2
 8002564:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	00da      	lsls	r2, r3, #3
 800256c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800256e:	4413      	add	r3, r2
 8002570:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002574:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002578:	2200      	movs	r2, #0
 800257a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800257c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f00a ff37 	bl	800d3f6 <HAL_PCD_DataInStageCallback>
 8002588:	e051      	b.n	800262e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800258a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800258e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d144      	bne.n	8002620 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800259e:	b29b      	uxth	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80025be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d907      	bls.n	80025da <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80025ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80025d2:	1ad2      	subs	r2, r2, r3
 80025d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d6:	619a      	str	r2, [r3, #24]
 80025d8:	e002      	b.n	80025e0 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80025da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80025e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d106      	bne.n	80025f6 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f00a ff01 	bl	800d3f6 <HAL_PCD_DataInStageCallback>
 80025f4:	e01b      	b.n	800262e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80025f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80025fe:	441a      	add	r2, r3
 8002600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002602:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800260c:	441a      	add	r2, r3
 800260e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002610:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fe38 	bl	800628e <USB_EPStartXfer>
 800261e:	e006      	b.n	800262e <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002620:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002624:	461a      	mov	r2, r3
 8002626:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f917 	bl	800285c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002636:	b29b      	uxth	r3, r3
 8002638:	b21b      	sxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	f6ff ac49 	blt.w	8001ed2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3758      	adds	r7, #88	@ 0x58
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b088      	sub	sp, #32
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	4613      	mov	r3, r2
 8002656:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d07c      	beq.n	800275c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800266a:	b29b      	uxth	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	4413      	add	r3, r2
 800267c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002686:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	699a      	ldr	r2, [r3, #24]
 800268c:	8b7b      	ldrh	r3, [r7, #26]
 800268e:	429a      	cmp	r2, r3
 8002690:	d306      	bcc.n	80026a0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	8b7b      	ldrh	r3, [r7, #26]
 8002698:	1ad2      	subs	r2, r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	619a      	str	r2, [r3, #24]
 800269e:	e002      	b.n	80026a6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2200      	movs	r2, #0
 80026a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d123      	bne.n	80026f6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026c8:	833b      	strh	r3, [r7, #24]
 80026ca:	8b3b      	ldrh	r3, [r7, #24]
 80026cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80026d0:	833b      	strh	r3, [r7, #24]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	441a      	add	r2, r3
 80026e0:	8b3b      	ldrh	r3, [r7, #24]
 80026e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01f      	beq.n	8002740 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800271a:	82fb      	strh	r3, [r7, #22]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	441a      	add	r2, r3
 800272a:	8afb      	ldrh	r3, [r7, #22]
 800272c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002730:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002738:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800273c:	b29b      	uxth	r3, r3
 800273e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002740:	8b7b      	ldrh	r3, [r7, #26]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8085 	beq.w	8002852 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	6959      	ldr	r1, [r3, #20]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	891a      	ldrh	r2, [r3, #8]
 8002754:	8b7b      	ldrh	r3, [r7, #26]
 8002756:	f005 fac7 	bl	8007ce8 <USB_ReadPMA>
 800275a:	e07a      	b.n	8002852 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002764:	b29b      	uxth	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	4413      	add	r3, r2
 8002776:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002780:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	8b7b      	ldrh	r3, [r7, #26]
 8002788:	429a      	cmp	r2, r3
 800278a:	d306      	bcc.n	800279a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	699a      	ldr	r2, [r3, #24]
 8002790:	8b7b      	ldrh	r3, [r7, #26]
 8002792:	1ad2      	subs	r2, r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	619a      	str	r2, [r3, #24]
 8002798:	e002      	b.n	80027a0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d123      	bne.n	80027f0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027c2:	83fb      	strh	r3, [r7, #30]
 80027c4:	8bfb      	ldrh	r3, [r7, #30]
 80027c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80027ca:	83fb      	strh	r3, [r7, #30]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	441a      	add	r2, r3
 80027da:	8bfb      	ldrh	r3, [r7, #30]
 80027dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11f      	bne.n	800283a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002814:	83bb      	strh	r3, [r7, #28]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	441a      	add	r2, r3
 8002824:	8bbb      	ldrh	r3, [r7, #28]
 8002826:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800282a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800282e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002832:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002836:	b29b      	uxth	r3, r3
 8002838:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800283a:	8b7b      	ldrh	r3, [r7, #26]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	6959      	ldr	r1, [r3, #20]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	895a      	ldrh	r2, [r3, #10]
 800284c:	8b7b      	ldrh	r3, [r7, #26]
 800284e:	f005 fa4b 	bl	8007ce8 <USB_ReadPMA>
    }
  }

  return count;
 8002852:	8b7b      	ldrh	r3, [r7, #26]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b0a4      	sub	sp, #144	@ 0x90
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	4613      	mov	r3, r2
 8002868:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 81db 	beq.w	8002c2c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800287e:	b29b      	uxth	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	4413      	add	r3, r2
 8002890:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800289a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d907      	bls.n	80028ba <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028b2:	1ad2      	subs	r2, r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	619a      	str	r2, [r3, #24]
 80028b8:	e002      	b.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f040 80b9 	bne.w	8002a3c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	785b      	ldrb	r3, [r3, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d126      	bne.n	8002920 <HAL_PCD_EP_DB_Transmit+0xc4>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e6:	4413      	add	r3, r2
 80028e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	00da      	lsls	r2, r3, #3
 80028f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f2:	4413      	add	r3, r2
 80028f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80028f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002904:	b29a      	uxth	r2, r3
 8002906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002908:	801a      	strh	r2, [r3, #0]
 800290a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002918:	b29a      	uxth	r2, r3
 800291a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291c:	801a      	strh	r2, [r3, #0]
 800291e:	e01a      	b.n	8002956 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	785b      	ldrb	r3, [r3, #1]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d116      	bne.n	8002956 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	637b      	str	r3, [r7, #52]	@ 0x34
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002936:	b29b      	uxth	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800293c:	4413      	add	r3, r2
 800293e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	00da      	lsls	r2, r3, #3
 8002946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002948:	4413      	add	r3, r2
 800294a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800294e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002952:	2200      	movs	r2, #0
 8002954:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	785b      	ldrb	r3, [r3, #1]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d126      	bne.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x156>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61fb      	str	r3, [r7, #28]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002972:	b29b      	uxth	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	00da      	lsls	r2, r3, #3
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800298a:	61bb      	str	r3, [r7, #24]
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002996:	b29a      	uxth	r2, r3
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	801a      	strh	r2, [r3, #0]
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	801a      	strh	r2, [r3, #0]
 80029b0:	e017      	b.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x186>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	785b      	ldrb	r3, [r3, #1]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d113      	bne.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x186>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	4413      	add	r3, r2
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	00da      	lsls	r2, r3, #3
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	4413      	add	r3, r2
 80029d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	2200      	movs	r2, #0
 80029e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	4619      	mov	r1, r3
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f00a fd04 	bl	800d3f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 82fa 	beq.w	8002fee <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a14:	82fb      	strh	r3, [r7, #22]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	441a      	add	r2, r3
 8002a24:	8afb      	ldrh	r3, [r7, #22]
 8002a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	8013      	strh	r3, [r2, #0]
 8002a3a:	e2d8      	b.n	8002fee <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d021      	beq.n	8002a8a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a60:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	441a      	add	r2, r3
 8002a72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002a76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	f040 82ac 	bne.w	8002fee <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a9e:	441a      	add	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	69da      	ldr	r2, [r3, #28]
 8002aa8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002aac:	441a      	add	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	6a1a      	ldr	r2, [r3, #32]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d30b      	bcc.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	6a1a      	ldr	r2, [r3, #32]
 8002aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ace:	1ad2      	subs	r2, r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	621a      	str	r2, [r3, #32]
 8002ad4:	e017      	b.n	8002b06 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d108      	bne.n	8002af0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002ade:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ae2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002aee:	e00a      	b.n	8002b06 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2200      	movs	r2, #0
 8002b04:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	785b      	ldrb	r3, [r3, #1]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d165      	bne.n	8002bda <HAL_PCD_EP_DB_Transmit+0x37e>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b22:	4413      	add	r3, r2
 8002b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	00da      	lsls	r2, r3, #3
 8002b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b2e:	4413      	add	r3, r2
 8002b30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002b34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b44:	801a      	strh	r2, [r3, #0]
 8002b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b4c:	d91d      	bls.n	8002b8a <HAL_PCD_EP_DB_Transmit+0x32e>
 8002b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d102      	bne.n	8002b68 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b64:	3b01      	subs	r3, #1
 8002b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	029b      	lsls	r3, r3, #10
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	4313      	orrs	r3, r2
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b86:	801a      	strh	r2, [r3, #0]
 8002b88:	e044      	b.n	8002c14 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <HAL_PCD_EP_DB_Transmit+0x34c>
 8002b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba4:	801a      	strh	r2, [r3, #0]
 8002ba6:	e035      	b.n	8002c14 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bac:	085b      	lsrs	r3, r3, #1
 8002bae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x366>
 8002bbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	029b      	lsls	r3, r3, #10
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd6:	801a      	strh	r2, [r3, #0]
 8002bd8:	e01c      	b.n	8002c14 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	785b      	ldrb	r3, [r3, #1]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d118      	bne.n	8002c14 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bf6:	4413      	add	r3, r2
 8002bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	00da      	lsls	r2, r3, #3
 8002c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c02:	4413      	add	r3, r2
 8002c04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002c08:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c12:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	6959      	ldr	r1, [r3, #20]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	891a      	ldrh	r2, [r3, #8]
 8002c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	f005 f81d 	bl	8007c64 <USB_WritePMA>
 8002c2a:	e1e0      	b.n	8002fee <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	4413      	add	r3, r2
 8002c46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c50:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d307      	bcc.n	8002c70 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	699a      	ldr	r2, [r3, #24]
 8002c64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c68:	1ad2      	subs	r2, r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	619a      	str	r2, [r3, #24]
 8002c6e:	e002      	b.n	8002c76 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2200      	movs	r2, #0
 8002c74:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f040 80c0 	bne.w	8002e00 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	785b      	ldrb	r3, [r3, #1]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d126      	bne.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c9c:	4413      	add	r3, r2
 8002c9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	00da      	lsls	r2, r3, #3
 8002ca6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ca8:	4413      	add	r3, r2
 8002caa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002cae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cbe:	801a      	strh	r2, [r3, #0]
 8002cc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	e01a      	b.n	8002d0c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	785b      	ldrb	r3, [r3, #1]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d116      	bne.n	8002d0c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cf2:	4413      	add	r3, r2
 8002cf4:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	00da      	lsls	r2, r3, #3
 8002cfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cfe:	4413      	add	r3, r2
 8002d00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002d04:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d08:	2200      	movs	r2, #0
 8002d0a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	785b      	ldrb	r3, [r3, #1]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d12b      	bne.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x516>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d2e:	4413      	add	r3, r2
 8002d30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	00da      	lsls	r2, r3, #3
 8002d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002d40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d56:	801a      	strh	r2, [r3, #0]
 8002d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d6e:	801a      	strh	r2, [r3, #0]
 8002d70:	e017      	b.n	8002da2 <HAL_PCD_EP_DB_Transmit+0x546>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	785b      	ldrb	r3, [r3, #1]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d113      	bne.n	8002da2 <HAL_PCD_EP_DB_Transmit+0x546>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d88:	4413      	add	r3, r2
 8002d8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	00da      	lsls	r2, r3, #3
 8002d92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d94:	4413      	add	r3, r2
 8002d96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002d9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d9e:	2200      	movs	r2, #0
 8002da0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	4619      	mov	r1, r3
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f00a fb24 	bl	800d3f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f040 811a 	bne.w	8002fee <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dd4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	441a      	add	r2, r3
 8002de6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002dea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002df2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	8013      	strh	r3, [r2, #0]
 8002dfe:	e0f6      	b.n	8002fee <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d121      	bne.n	8002e4e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e24:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	441a      	add	r2, r3
 8002e36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002e3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	f040 80ca 	bne.w	8002fee <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e62:	441a      	add	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e70:	441a      	add	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	6a1a      	ldr	r2, [r3, #32]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d30b      	bcc.n	8002e9a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6a1a      	ldr	r2, [r3, #32]
 8002e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e92:	1ad2      	subs	r2, r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	621a      	str	r2, [r3, #32]
 8002e98:	e017      	b.n	8002eca <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d108      	bne.n	8002eb4 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002ea2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ea6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002eb2:	e00a      	b.n	8002eca <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	785b      	ldrb	r3, [r3, #1]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d165      	bne.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x748>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eec:	4413      	add	r3, r2
 8002eee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	00da      	lsls	r2, r3, #3
 8002ef6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ef8:	4413      	add	r3, r2
 8002efa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002efe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f0e:	801a      	strh	r2, [r3, #0]
 8002f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f14:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f16:	d91d      	bls.n	8002f54 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002f2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	029b      	lsls	r3, r3, #10
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	4313      	orrs	r3, r2
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f50:	801a      	strh	r2, [r3, #0]
 8002f52:	e041      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x716>
 8002f5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f6e:	801a      	strh	r2, [r3, #0]
 8002f70:	e032      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f76:	085b      	lsrs	r3, r3, #1
 8002f78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x730>
 8002f86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f88:	3301      	adds	r3, #1
 8002f8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	029b      	lsls	r3, r3, #10
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fa0:	801a      	strh	r2, [r3, #0]
 8002fa2:	e019      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d115      	bne.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fba:	4413      	add	r3, r2
 8002fbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	00da      	lsls	r2, r3, #3
 8002fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002fcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fd6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6959      	ldr	r1, [r3, #20]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	895a      	ldrh	r2, [r3, #10]
 8002fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f004 fe3b 	bl	8007c64 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003008:	82bb      	strh	r3, [r7, #20]
 800300a:	8abb      	ldrh	r3, [r7, #20]
 800300c:	f083 0310 	eor.w	r3, r3, #16
 8003010:	82bb      	strh	r3, [r7, #20]
 8003012:	8abb      	ldrh	r3, [r7, #20]
 8003014:	f083 0320 	eor.w	r3, r3, #32
 8003018:	82bb      	strh	r3, [r7, #20]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	441a      	add	r2, r3
 8003028:	8abb      	ldrh	r3, [r7, #20]
 800302a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800302e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800303a:	b29b      	uxth	r3, r3
 800303c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3790      	adds	r7, #144	@ 0x90
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	817b      	strh	r3, [r7, #10]
 8003056:	4613      	mov	r3, r2
 8003058:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800305a:	897b      	ldrh	r3, [r7, #10]
 800305c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003066:	897b      	ldrh	r3, [r7, #10]
 8003068:	f003 0207 	and.w	r2, r3, #7
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	3310      	adds	r3, #16
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4413      	add	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	e009      	b.n	8003092 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800307e:	897a      	ldrh	r2, [r7, #10]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003092:	893b      	ldrh	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d107      	bne.n	80030a8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2200      	movs	r2, #0
 800309c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	80da      	strh	r2, [r3, #6]
 80030a6:	e00b      	b.n	80030c0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2201      	movs	r2, #1
 80030ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0c1b      	lsrs	r3, r3, #16
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003106:	b29b      	uxth	r3, r3
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d141      	bne.n	80031b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003132:	4b4b      	ldr	r3, [pc, #300]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800313a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800313e:	d131      	bne.n	80031a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003140:	4b47      	ldr	r3, [pc, #284]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003146:	4a46      	ldr	r2, [pc, #280]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800314c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003150:	4b43      	ldr	r3, [pc, #268]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003158:	4a41      	ldr	r2, [pc, #260]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800315e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003160:	4b40      	ldr	r3, [pc, #256]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2232      	movs	r2, #50	@ 0x32
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	4a3f      	ldr	r2, [pc, #252]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	0c9b      	lsrs	r3, r3, #18
 8003172:	3301      	adds	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003176:	e002      	b.n	800317e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3b01      	subs	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800317e:	4b38      	ldr	r3, [pc, #224]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800318a:	d102      	bne.n	8003192 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f2      	bne.n	8003178 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003192:	4b33      	ldr	r3, [pc, #204]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800319e:	d158      	bne.n	8003252 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e057      	b.n	8003254 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80031b4:	e04d      	b.n	8003252 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031bc:	d141      	bne.n	8003242 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031be:	4b28      	ldr	r3, [pc, #160]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ca:	d131      	bne.n	8003230 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031cc:	4b24      	ldr	r3, [pc, #144]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031d2:	4a23      	ldr	r2, [pc, #140]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031dc:	4b20      	ldr	r3, [pc, #128]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2232      	movs	r2, #50	@ 0x32
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	0c9b      	lsrs	r3, r3, #18
 80031fe:	3301      	adds	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003202:	e002      	b.n	800320a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	3b01      	subs	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320a:	4b15      	ldr	r3, [pc, #84]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003216:	d102      	bne.n	800321e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f2      	bne.n	8003204 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800321e:	4b10      	ldr	r3, [pc, #64]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800322a:	d112      	bne.n	8003252 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e011      	b.n	8003254 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003236:	4a0a      	ldr	r2, [pc, #40]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800323c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003240:	e007      	b.n	8003252 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003242:	4b07      	ldr	r3, [pc, #28]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800324a:	4a05      	ldr	r2, [pc, #20]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003250:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	40007000 	.word	0x40007000
 8003264:	20000000 	.word	0x20000000
 8003268:	431bde83 	.word	0x431bde83

0800326c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003270:	4b05      	ldr	r3, [pc, #20]	@ (8003288 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4a04      	ldr	r2, [pc, #16]	@ (8003288 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003276:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800327a:	6093      	str	r3, [r2, #8]
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40007000 	.word	0x40007000

0800328c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e2fe      	b.n	800389c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d075      	beq.n	8003396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032aa:	4b97      	ldr	r3, [pc, #604]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b4:	4b94      	ldr	r3, [pc, #592]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b0c      	cmp	r3, #12
 80032c2:	d102      	bne.n	80032ca <HAL_RCC_OscConfig+0x3e>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d002      	beq.n	80032d0 <HAL_RCC_OscConfig+0x44>
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d10b      	bne.n	80032e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	4b8d      	ldr	r3, [pc, #564]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d05b      	beq.n	8003394 <HAL_RCC_OscConfig+0x108>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d157      	bne.n	8003394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e2d9      	b.n	800389c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f0:	d106      	bne.n	8003300 <HAL_RCC_OscConfig+0x74>
 80032f2:	4b85      	ldr	r3, [pc, #532]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a84      	ldr	r2, [pc, #528]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e01d      	b.n	800333c <HAL_RCC_OscConfig+0xb0>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x98>
 800330a:	4b7f      	ldr	r3, [pc, #508]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a7e      	ldr	r2, [pc, #504]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 8003310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4b7c      	ldr	r3, [pc, #496]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a7b      	ldr	r2, [pc, #492]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 800331c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0xb0>
 8003324:	4b78      	ldr	r3, [pc, #480]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a77      	ldr	r2, [pc, #476]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 800332a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4b75      	ldr	r3, [pc, #468]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a74      	ldr	r2, [pc, #464]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 8003336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800333a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d013      	beq.n	800336c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fd ff12 	bl	800116c <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800334c:	f7fd ff0e 	bl	800116c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	@ 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e29e      	b.n	800389c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800335e:	4b6a      	ldr	r3, [pc, #424]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0xc0>
 800336a:	e014      	b.n	8003396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd fefe 	bl	800116c <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003374:	f7fd fefa 	bl	800116c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	@ 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e28a      	b.n	800389c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003386:	4b60      	ldr	r3, [pc, #384]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0xe8>
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d075      	beq.n	800348e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a2:	4b59      	ldr	r3, [pc, #356]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ac:	4b56      	ldr	r3, [pc, #344]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b0c      	cmp	r3, #12
 80033ba:	d102      	bne.n	80033c2 <HAL_RCC_OscConfig+0x136>
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d002      	beq.n	80033c8 <HAL_RCC_OscConfig+0x13c>
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d11f      	bne.n	8003408 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_OscConfig+0x154>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e25d      	b.n	800389c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e0:	4b49      	ldr	r3, [pc, #292]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	061b      	lsls	r3, r3, #24
 80033ee:	4946      	ldr	r1, [pc, #280]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033f4:	4b45      	ldr	r3, [pc, #276]	@ (800350c <HAL_RCC_OscConfig+0x280>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd fce5 	bl	8000dc8 <HAL_InitTick>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d043      	beq.n	800348c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e249      	b.n	800389c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d023      	beq.n	8003458 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003410:	4b3d      	ldr	r3, [pc, #244]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a3c      	ldr	r2, [pc, #240]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 8003416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800341a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fd fea6 	bl	800116c <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003424:	f7fd fea2 	bl	800116c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e232      	b.n	800389c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003436:	4b34      	ldr	r3, [pc, #208]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003442:	4b31      	ldr	r3, [pc, #196]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	061b      	lsls	r3, r3, #24
 8003450:	492d      	ldr	r1, [pc, #180]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
 8003456:	e01a      	b.n	800348e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003458:	4b2b      	ldr	r3, [pc, #172]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2a      	ldr	r2, [pc, #168]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 800345e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fd fe82 	bl	800116c <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346c:	f7fd fe7e 	bl	800116c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e20e      	b.n	800389c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800347e:	4b22      	ldr	r3, [pc, #136]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x1e0>
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800348c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d041      	beq.n	800351e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01c      	beq.n	80034dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a2:	4b19      	ldr	r3, [pc, #100]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80034a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a8:	4a17      	ldr	r2, [pc, #92]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b2:	f7fd fe5b 	bl	800116c <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ba:	f7fd fe57 	bl	800116c <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e1e7      	b.n	800389c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80034ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0ef      	beq.n	80034ba <HAL_RCC_OscConfig+0x22e>
 80034da:	e020      	b.n	800351e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80034de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e2:	4a09      	ldr	r2, [pc, #36]	@ (8003508 <HAL_RCC_OscConfig+0x27c>)
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ec:	f7fd fe3e 	bl	800116c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034f2:	e00d      	b.n	8003510 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f4:	f7fd fe3a 	bl	800116c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d906      	bls.n	8003510 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e1ca      	b.n	800389c <HAL_RCC_OscConfig+0x610>
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003510:	4b8c      	ldr	r3, [pc, #560]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 8003512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1ea      	bne.n	80034f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 80a6 	beq.w	8003678 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352c:	2300      	movs	r3, #0
 800352e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003530:	4b84      	ldr	r3, [pc, #528]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_RCC_OscConfig+0x2b4>
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x2b6>
 8003540:	2300      	movs	r3, #0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00d      	beq.n	8003562 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003546:	4b7f      	ldr	r3, [pc, #508]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354a:	4a7e      	ldr	r2, [pc, #504]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 800354c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003550:	6593      	str	r3, [r2, #88]	@ 0x58
 8003552:	4b7c      	ldr	r3, [pc, #496]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800355e:	2301      	movs	r3, #1
 8003560:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003562:	4b79      	ldr	r3, [pc, #484]	@ (8003748 <HAL_RCC_OscConfig+0x4bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d118      	bne.n	80035a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800356e:	4b76      	ldr	r3, [pc, #472]	@ (8003748 <HAL_RCC_OscConfig+0x4bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a75      	ldr	r2, [pc, #468]	@ (8003748 <HAL_RCC_OscConfig+0x4bc>)
 8003574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357a:	f7fd fdf7 	bl	800116c <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003582:	f7fd fdf3 	bl	800116c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e183      	b.n	800389c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003594:	4b6c      	ldr	r3, [pc, #432]	@ (8003748 <HAL_RCC_OscConfig+0x4bc>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d108      	bne.n	80035ba <HAL_RCC_OscConfig+0x32e>
 80035a8:	4b66      	ldr	r3, [pc, #408]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ae:	4a65      	ldr	r2, [pc, #404]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035b8:	e024      	b.n	8003604 <HAL_RCC_OscConfig+0x378>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b05      	cmp	r3, #5
 80035c0:	d110      	bne.n	80035e4 <HAL_RCC_OscConfig+0x358>
 80035c2:	4b60      	ldr	r3, [pc, #384]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 80035ca:	f043 0304 	orr.w	r3, r3, #4
 80035ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035e2:	e00f      	b.n	8003604 <HAL_RCC_OscConfig+0x378>
 80035e4:	4b57      	ldr	r3, [pc, #348]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ea:	4a56      	ldr	r2, [pc, #344]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035f4:	4b53      	ldr	r3, [pc, #332]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fa:	4a52      	ldr	r2, [pc, #328]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 80035fc:	f023 0304 	bic.w	r3, r3, #4
 8003600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d016      	beq.n	800363a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360c:	f7fd fdae 	bl	800116c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003612:	e00a      	b.n	800362a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003614:	f7fd fdaa 	bl	800116c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e138      	b.n	800389c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800362a:	4b46      	ldr	r3, [pc, #280]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0ed      	beq.n	8003614 <HAL_RCC_OscConfig+0x388>
 8003638:	e015      	b.n	8003666 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363a:	f7fd fd97 	bl	800116c <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003640:	e00a      	b.n	8003658 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003642:	f7fd fd93 	bl	800116c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003650:	4293      	cmp	r3, r2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e121      	b.n	800389c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003658:	4b3a      	ldr	r3, [pc, #232]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1ed      	bne.n	8003642 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003666:	7ffb      	ldrb	r3, [r7, #31]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366c:	4b35      	ldr	r3, [pc, #212]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003670:	4a34      	ldr	r2, [pc, #208]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 8003672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003676:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d03c      	beq.n	80036fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01c      	beq.n	80036c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800368c:	4b2d      	ldr	r3, [pc, #180]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 800368e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003692:	4a2c      	ldr	r2, [pc, #176]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fd fd66 	bl	800116c <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036a4:	f7fd fd62 	bl	800116c <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e0f2      	b.n	800389c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036b6:	4b23      	ldr	r3, [pc, #140]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 80036b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0ef      	beq.n	80036a4 <HAL_RCC_OscConfig+0x418>
 80036c4:	e01b      	b.n	80036fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 80036c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d6:	f7fd fd49 	bl	800116c <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036de:	f7fd fd45 	bl	800116c <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e0d5      	b.n	800389c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036f0:	4b14      	ldr	r3, [pc, #80]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 80036f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1ef      	bne.n	80036de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80c9 	beq.w	800389a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003708:	4b0e      	ldr	r3, [pc, #56]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	2b0c      	cmp	r3, #12
 8003712:	f000 8083 	beq.w	800381c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d15e      	bne.n	80037dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371e:	4b09      	ldr	r3, [pc, #36]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a08      	ldr	r2, [pc, #32]	@ (8003744 <HAL_RCC_OscConfig+0x4b8>)
 8003724:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fd fd1f 	bl	800116c <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003730:	e00c      	b.n	800374c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003732:	f7fd fd1b 	bl	800116c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d905      	bls.n	800374c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e0ab      	b.n	800389c <HAL_RCC_OscConfig+0x610>
 8003744:	40021000 	.word	0x40021000
 8003748:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800374c:	4b55      	ldr	r3, [pc, #340]	@ (80038a4 <HAL_RCC_OscConfig+0x618>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ec      	bne.n	8003732 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003758:	4b52      	ldr	r3, [pc, #328]	@ (80038a4 <HAL_RCC_OscConfig+0x618>)
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	4b52      	ldr	r3, [pc, #328]	@ (80038a8 <HAL_RCC_OscConfig+0x61c>)
 800375e:	4013      	ands	r3, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6a11      	ldr	r1, [r2, #32]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003768:	3a01      	subs	r2, #1
 800376a:	0112      	lsls	r2, r2, #4
 800376c:	4311      	orrs	r1, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003772:	0212      	lsls	r2, r2, #8
 8003774:	4311      	orrs	r1, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800377a:	0852      	lsrs	r2, r2, #1
 800377c:	3a01      	subs	r2, #1
 800377e:	0552      	lsls	r2, r2, #21
 8003780:	4311      	orrs	r1, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003786:	0852      	lsrs	r2, r2, #1
 8003788:	3a01      	subs	r2, #1
 800378a:	0652      	lsls	r2, r2, #25
 800378c:	4311      	orrs	r1, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003792:	06d2      	lsls	r2, r2, #27
 8003794:	430a      	orrs	r2, r1
 8003796:	4943      	ldr	r1, [pc, #268]	@ (80038a4 <HAL_RCC_OscConfig+0x618>)
 8003798:	4313      	orrs	r3, r2
 800379a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800379c:	4b41      	ldr	r3, [pc, #260]	@ (80038a4 <HAL_RCC_OscConfig+0x618>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a40      	ldr	r2, [pc, #256]	@ (80038a4 <HAL_RCC_OscConfig+0x618>)
 80037a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037a8:	4b3e      	ldr	r3, [pc, #248]	@ (80038a4 <HAL_RCC_OscConfig+0x618>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4a3d      	ldr	r2, [pc, #244]	@ (80038a4 <HAL_RCC_OscConfig+0x618>)
 80037ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fd fcda 	bl	800116c <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fd fcd6 	bl	800116c <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e066      	b.n	800389c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ce:	4b35      	ldr	r3, [pc, #212]	@ (80038a4 <HAL_RCC_OscConfig+0x618>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x530>
 80037da:	e05e      	b.n	800389a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037dc:	4b31      	ldr	r3, [pc, #196]	@ (80038a4 <HAL_RCC_OscConfig+0x618>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a30      	ldr	r2, [pc, #192]	@ (80038a4 <HAL_RCC_OscConfig+0x618>)
 80037e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e8:	f7fd fcc0 	bl	800116c <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fd fcbc 	bl	800116c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e04c      	b.n	800389c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003802:	4b28      	ldr	r3, [pc, #160]	@ (80038a4 <HAL_RCC_OscConfig+0x618>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800380e:	4b25      	ldr	r3, [pc, #148]	@ (80038a4 <HAL_RCC_OscConfig+0x618>)
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	4924      	ldr	r1, [pc, #144]	@ (80038a4 <HAL_RCC_OscConfig+0x618>)
 8003814:	4b25      	ldr	r3, [pc, #148]	@ (80038ac <HAL_RCC_OscConfig+0x620>)
 8003816:	4013      	ands	r3, r2
 8003818:	60cb      	str	r3, [r1, #12]
 800381a:	e03e      	b.n	800389a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e039      	b.n	800389c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003828:	4b1e      	ldr	r3, [pc, #120]	@ (80038a4 <HAL_RCC_OscConfig+0x618>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 0203 	and.w	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	429a      	cmp	r2, r3
 800383a:	d12c      	bne.n	8003896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	3b01      	subs	r3, #1
 8003848:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d123      	bne.n	8003896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003858:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d11b      	bne.n	8003896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d113      	bne.n	8003896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	3b01      	subs	r3, #1
 800387c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d109      	bne.n	8003896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	3b01      	subs	r3, #1
 8003890:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d001      	beq.n	800389a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3720      	adds	r7, #32
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40021000 	.word	0x40021000
 80038a8:	019f800c 	.word	0x019f800c
 80038ac:	feeefffc 	.word	0xfeeefffc

080038b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e11e      	b.n	8003b06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b91      	ldr	r3, [pc, #580]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d910      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b8e      	ldr	r3, [pc, #568]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 020f 	bic.w	r2, r3, #15
 80038de:	498c      	ldr	r1, [pc, #560]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b8a      	ldr	r3, [pc, #552]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e106      	b.n	8003b06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d073      	beq.n	80039ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d129      	bne.n	8003960 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390c:	4b81      	ldr	r3, [pc, #516]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0f4      	b.n	8003b06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800391c:	f000 f9ba 	bl	8003c94 <RCC_GetSysClockFreqFromPLLSource>
 8003920:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4a7c      	ldr	r2, [pc, #496]	@ (8003b18 <HAL_RCC_ClockConfig+0x268>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d93f      	bls.n	80039aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800392a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800393e:	2b00      	cmp	r3, #0
 8003940:	d033      	beq.n	80039aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003946:	2b00      	cmp	r3, #0
 8003948:	d12f      	bne.n	80039aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800394a:	4b72      	ldr	r3, [pc, #456]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003952:	4a70      	ldr	r2, [pc, #448]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003958:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800395a:	2380      	movs	r3, #128	@ 0x80
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e024      	b.n	80039aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d107      	bne.n	8003978 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003968:	4b6a      	ldr	r3, [pc, #424]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0c6      	b.n	8003b06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003978:	4b66      	ldr	r3, [pc, #408]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0be      	b.n	8003b06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003988:	f000 f8ce 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 800398c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4a61      	ldr	r2, [pc, #388]	@ (8003b18 <HAL_RCC_ClockConfig+0x268>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d909      	bls.n	80039aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003996:	4b5f      	ldr	r3, [pc, #380]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800399e:	4a5d      	ldr	r2, [pc, #372]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 80039a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039a6:	2380      	movs	r3, #128	@ 0x80
 80039a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f023 0203 	bic.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	4957      	ldr	r1, [pc, #348]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039bc:	f7fd fbd6 	bl	800116c <HAL_GetTick>
 80039c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	e00a      	b.n	80039da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c4:	f7fd fbd2 	bl	800116c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e095      	b.n	8003b06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	4b4e      	ldr	r3, [pc, #312]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 020c 	and.w	r2, r3, #12
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d1eb      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d023      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a04:	4b43      	ldr	r3, [pc, #268]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a42      	ldr	r2, [pc, #264]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a24:	4a3b      	ldr	r2, [pc, #236]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a2c:	4b39      	ldr	r3, [pc, #228]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4936      	ldr	r1, [pc, #216]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2b80      	cmp	r3, #128	@ 0x80
 8003a44:	d105      	bne.n	8003a52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a46:	4b33      	ldr	r3, [pc, #204]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	4a32      	ldr	r2, [pc, #200]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a52:	4b2f      	ldr	r3, [pc, #188]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d21d      	bcs.n	8003a9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a60:	4b2b      	ldr	r3, [pc, #172]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 020f 	bic.w	r2, r3, #15
 8003a68:	4929      	ldr	r1, [pc, #164]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a70:	f7fd fb7c 	bl	800116c <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a78:	f7fd fb78 	bl	800116c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e03b      	b.n	8003b06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b20      	ldr	r3, [pc, #128]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d1ed      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4917      	ldr	r1, [pc, #92]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ac6:	4b13      	ldr	r3, [pc, #76]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	490f      	ldr	r1, [pc, #60]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ada:	f000 f825 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	490c      	ldr	r1, [pc, #48]	@ (8003b1c <HAL_RCC_ClockConfig+0x26c>)
 8003aec:	5ccb      	ldrb	r3, [r1, r3]
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	fa22 f303 	lsr.w	r3, r2, r3
 8003af6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b20 <HAL_RCC_ClockConfig+0x270>)
 8003af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003afa:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <HAL_RCC_ClockConfig+0x274>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd f962 	bl	8000dc8 <HAL_InitTick>
 8003b04:	4603      	mov	r3, r0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40022000 	.word	0x40022000
 8003b14:	40021000 	.word	0x40021000
 8003b18:	04c4b400 	.word	0x04c4b400
 8003b1c:	0800f2a0 	.word	0x0800f2a0
 8003b20:	20000000 	.word	0x20000000
 8003b24:	20000004 	.word	0x20000004

08003b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d102      	bne.n	8003b40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	e047      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b40:	4b27      	ldr	r3, [pc, #156]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d102      	bne.n	8003b52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b4c:	4b26      	ldr	r3, [pc, #152]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	e03e      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b52:	4b23      	ldr	r3, [pc, #140]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b0c      	cmp	r3, #12
 8003b5c:	d136      	bne.n	8003bcc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b5e:	4b20      	ldr	r3, [pc, #128]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b68:	4b1d      	ldr	r3, [pc, #116]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	3301      	adds	r3, #1
 8003b74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d10c      	bne.n	8003b96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	4a16      	ldr	r2, [pc, #88]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b86:	68d2      	ldr	r2, [r2, #12]
 8003b88:	0a12      	lsrs	r2, r2, #8
 8003b8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b8e:	fb02 f303 	mul.w	r3, r2, r3
 8003b92:	617b      	str	r3, [r7, #20]
      break;
 8003b94:	e00c      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b96:	4a13      	ldr	r2, [pc, #76]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	4a10      	ldr	r2, [pc, #64]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba0:	68d2      	ldr	r2, [r2, #12]
 8003ba2:	0a12      	lsrs	r2, r2, #8
 8003ba4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ba8:	fb02 f303 	mul.w	r3, r2, r3
 8003bac:	617b      	str	r3, [r7, #20]
      break;
 8003bae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	0e5b      	lsrs	r3, r3, #25
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	e001      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bd0:	693b      	ldr	r3, [r7, #16]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	00f42400 	.word	0x00f42400
 8003be8:	007a1200 	.word	0x007a1200

08003bec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf0:	4b03      	ldr	r3, [pc, #12]	@ (8003c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000000 	.word	0x20000000

08003c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c08:	f7ff fff0 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b06      	ldr	r3, [pc, #24]	@ (8003c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4904      	ldr	r1, [pc, #16]	@ (8003c2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	0800f2b0 	.word	0x0800f2b0

08003c30 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	220f      	movs	r2, #15
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c40:	4b12      	ldr	r3, [pc, #72]	@ (8003c8c <HAL_RCC_GetClockConfig+0x5c>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0203 	and.w	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c8c <HAL_RCC_GetClockConfig+0x5c>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c58:	4b0c      	ldr	r3, [pc, #48]	@ (8003c8c <HAL_RCC_GetClockConfig+0x5c>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c64:	4b09      	ldr	r3, [pc, #36]	@ (8003c8c <HAL_RCC_GetClockConfig+0x5c>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	08db      	lsrs	r3, r3, #3
 8003c6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c72:	4b07      	ldr	r3, [pc, #28]	@ (8003c90 <HAL_RCC_GetClockConfig+0x60>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 020f 	and.w	r2, r3, #15
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	601a      	str	r2, [r3, #0]
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40022000 	.word	0x40022000

08003c94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d10c      	bne.n	8003cd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cb8:	4a17      	ldr	r2, [pc, #92]	@ (8003d18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	4a14      	ldr	r2, [pc, #80]	@ (8003d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cc2:	68d2      	ldr	r2, [r2, #12]
 8003cc4:	0a12      	lsrs	r2, r2, #8
 8003cc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	617b      	str	r3, [r7, #20]
    break;
 8003cd0:	e00c      	b.n	8003cec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cd2:	4a12      	ldr	r2, [pc, #72]	@ (8003d1c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	4a0e      	ldr	r2, [pc, #56]	@ (8003d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cdc:	68d2      	ldr	r2, [r2, #12]
 8003cde:	0a12      	lsrs	r2, r2, #8
 8003ce0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ce4:	fb02 f303 	mul.w	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]
    break;
 8003cea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cec:	4b09      	ldr	r3, [pc, #36]	@ (8003d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	0e5b      	lsrs	r3, r3, #25
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d06:	687b      	ldr	r3, [r7, #4]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40021000 	.word	0x40021000
 8003d18:	007a1200 	.word	0x007a1200
 8003d1c:	00f42400 	.word	0x00f42400

08003d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d28:	2300      	movs	r3, #0
 8003d2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8098 	beq.w	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d42:	4b43      	ldr	r3, [pc, #268]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10d      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d4e:	4b40      	ldr	r3, [pc, #256]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d52:	4a3f      	ldr	r2, [pc, #252]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d66:	2301      	movs	r3, #1
 8003d68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d6a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a39      	ldr	r2, [pc, #228]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d76:	f7fd f9f9 	bl	800116c <HAL_GetTick>
 8003d7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d7c:	e009      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7e:	f7fd f9f5 	bl	800116c <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d902      	bls.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	74fb      	strb	r3, [r7, #19]
        break;
 8003d90:	e005      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d92:	4b30      	ldr	r3, [pc, #192]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0ef      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d9e:	7cfb      	ldrb	r3, [r7, #19]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d159      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003da4:	4b2a      	ldr	r3, [pc, #168]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01e      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d019      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dc0:	4b23      	ldr	r3, [pc, #140]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dcc:	4b20      	ldr	r3, [pc, #128]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dec:	4a18      	ldr	r2, [pc, #96]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d016      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfe:	f7fd f9b5 	bl	800116c <HAL_GetTick>
 8003e02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e04:	e00b      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e06:	f7fd f9b1 	bl	800116c <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d902      	bls.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	74fb      	strb	r3, [r7, #19]
            break;
 8003e1c:	e006      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0ec      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e2c:	7cfb      	ldrb	r3, [r7, #19]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10b      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e32:	4b07      	ldr	r3, [pc, #28]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	4903      	ldr	r1, [pc, #12]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e48:	e008      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e4a:	7cfb      	ldrb	r3, [r7, #19]
 8003e4c:	74bb      	strb	r3, [r7, #18]
 8003e4e:	e005      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e5c:	7c7b      	ldrb	r3, [r7, #17]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d105      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e62:	4ba6      	ldr	r3, [pc, #664]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e66:	4aa5      	ldr	r2, [pc, #660]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e7a:	4ba0      	ldr	r3, [pc, #640]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e80:	f023 0203 	bic.w	r2, r3, #3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	499c      	ldr	r1, [pc, #624]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e9c:	4b97      	ldr	r3, [pc, #604]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea2:	f023 020c 	bic.w	r2, r3, #12
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	4994      	ldr	r1, [pc, #592]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ebe:	4b8f      	ldr	r3, [pc, #572]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	498b      	ldr	r1, [pc, #556]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ee0:	4b86      	ldr	r3, [pc, #536]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	4983      	ldr	r1, [pc, #524]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f02:	4b7e      	ldr	r3, [pc, #504]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f08:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	497a      	ldr	r1, [pc, #488]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f24:	4b75      	ldr	r3, [pc, #468]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	4972      	ldr	r1, [pc, #456]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f46:	4b6d      	ldr	r3, [pc, #436]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	4969      	ldr	r1, [pc, #420]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f68:	4b64      	ldr	r3, [pc, #400]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	4961      	ldr	r1, [pc, #388]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	4958      	ldr	r1, [pc, #352]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d015      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fac:	4b53      	ldr	r3, [pc, #332]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fba:	4950      	ldr	r1, [pc, #320]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4a4a      	ldr	r2, [pc, #296]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d015      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fe4:	4b45      	ldr	r3, [pc, #276]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff2:	4942      	ldr	r1, [pc, #264]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004002:	d105      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004004:	4b3d      	ldr	r3, [pc, #244]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4a3c      	ldr	r2, [pc, #240]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800400e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d015      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800401c:	4b37      	ldr	r3, [pc, #220]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004022:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	4934      	ldr	r1, [pc, #208]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800403a:	d105      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800403c:	4b2f      	ldr	r3, [pc, #188]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4a2e      	ldr	r2, [pc, #184]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004046:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d015      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004054:	4b29      	ldr	r3, [pc, #164]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004062:	4926      	ldr	r1, [pc, #152]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800406e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004072:	d105      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004074:	4b21      	ldr	r3, [pc, #132]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4a20      	ldr	r2, [pc, #128]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800407e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d015      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800408c:	4b1b      	ldr	r3, [pc, #108]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004092:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409a:	4918      	ldr	r1, [pc, #96]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040aa:	d105      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ac:	4b13      	ldr	r3, [pc, #76]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4a12      	ldr	r2, [pc, #72]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d015      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040c4:	4b0d      	ldr	r3, [pc, #52]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d2:	490a      	ldr	r1, [pc, #40]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040e2:	d105      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040e4:	4b05      	ldr	r3, [pc, #20]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a04      	ldr	r2, [pc, #16]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80040f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000

08004100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e049      	b.n	80041a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7fc fdfc 	bl	8000d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3304      	adds	r3, #4
 800413c:	4619      	mov	r1, r3
 800413e:	4610      	mov	r0, r2
 8004140:	f000 fd88 	bl	8004c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d001      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e04a      	b.n	800425e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a21      	ldr	r2, [pc, #132]	@ (800426c <HAL_TIM_Base_Start_IT+0xbc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d018      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x6c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f2:	d013      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x6c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004270 <HAL_TIM_Base_Start_IT+0xc0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00e      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x6c>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1c      	ldr	r2, [pc, #112]	@ (8004274 <HAL_TIM_Base_Start_IT+0xc4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x6c>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1a      	ldr	r2, [pc, #104]	@ (8004278 <HAL_TIM_Base_Start_IT+0xc8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x6c>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a19      	ldr	r2, [pc, #100]	@ (800427c <HAL_TIM_Base_Start_IT+0xcc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d115      	bne.n	8004248 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	4b17      	ldr	r3, [pc, #92]	@ (8004280 <HAL_TIM_Base_Start_IT+0xd0>)
 8004224:	4013      	ands	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b06      	cmp	r3, #6
 800422c:	d015      	beq.n	800425a <HAL_TIM_Base_Start_IT+0xaa>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004234:	d011      	beq.n	800425a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0201 	orr.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004246:	e008      	b.n	800425a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	e000      	b.n	800425c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40000400 	.word	0x40000400
 8004274:	40000800 	.word	0x40000800
 8004278:	40013400 	.word	0x40013400
 800427c:	40014000 	.word	0x40014000
 8004280:	00010007 	.word	0x00010007

08004284 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e049      	b.n	800432a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f841 	bl	8004332 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f000 fcc6 	bl	8004c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d109      	bne.n	800436c <HAL_TIM_PWM_Start+0x24>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e03c      	b.n	80043e6 <HAL_TIM_PWM_Start+0x9e>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b04      	cmp	r3, #4
 8004370:	d109      	bne.n	8004386 <HAL_TIM_PWM_Start+0x3e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	bf14      	ite	ne
 800437e:	2301      	movne	r3, #1
 8004380:	2300      	moveq	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	e02f      	b.n	80043e6 <HAL_TIM_PWM_Start+0x9e>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d109      	bne.n	80043a0 <HAL_TIM_PWM_Start+0x58>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	e022      	b.n	80043e6 <HAL_TIM_PWM_Start+0x9e>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b0c      	cmp	r3, #12
 80043a4:	d109      	bne.n	80043ba <HAL_TIM_PWM_Start+0x72>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	bf14      	ite	ne
 80043b2:	2301      	movne	r3, #1
 80043b4:	2300      	moveq	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	e015      	b.n	80043e6 <HAL_TIM_PWM_Start+0x9e>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d109      	bne.n	80043d4 <HAL_TIM_PWM_Start+0x8c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	bf14      	ite	ne
 80043cc:	2301      	movne	r3, #1
 80043ce:	2300      	moveq	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	e008      	b.n	80043e6 <HAL_TIM_PWM_Start+0x9e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	bf14      	ite	ne
 80043e0:	2301      	movne	r3, #1
 80043e2:	2300      	moveq	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e097      	b.n	800451e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d104      	bne.n	80043fe <HAL_TIM_PWM_Start+0xb6>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043fc:	e023      	b.n	8004446 <HAL_TIM_PWM_Start+0xfe>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b04      	cmp	r3, #4
 8004402:	d104      	bne.n	800440e <HAL_TIM_PWM_Start+0xc6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800440c:	e01b      	b.n	8004446 <HAL_TIM_PWM_Start+0xfe>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d104      	bne.n	800441e <HAL_TIM_PWM_Start+0xd6>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800441c:	e013      	b.n	8004446 <HAL_TIM_PWM_Start+0xfe>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b0c      	cmp	r3, #12
 8004422:	d104      	bne.n	800442e <HAL_TIM_PWM_Start+0xe6>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800442c:	e00b      	b.n	8004446 <HAL_TIM_PWM_Start+0xfe>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b10      	cmp	r3, #16
 8004432:	d104      	bne.n	800443e <HAL_TIM_PWM_Start+0xf6>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800443c:	e003      	b.n	8004446 <HAL_TIM_PWM_Start+0xfe>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2201      	movs	r2, #1
 800444c:	6839      	ldr	r1, [r7, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f001 f82e 	bl	80054b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a33      	ldr	r2, [pc, #204]	@ (8004528 <HAL_TIM_PWM_Start+0x1e0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <HAL_TIM_PWM_Start+0x13e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a32      	ldr	r2, [pc, #200]	@ (800452c <HAL_TIM_PWM_Start+0x1e4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00e      	beq.n	8004486 <HAL_TIM_PWM_Start+0x13e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a30      	ldr	r2, [pc, #192]	@ (8004530 <HAL_TIM_PWM_Start+0x1e8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d009      	beq.n	8004486 <HAL_TIM_PWM_Start+0x13e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2f      	ldr	r2, [pc, #188]	@ (8004534 <HAL_TIM_PWM_Start+0x1ec>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_TIM_PWM_Start+0x13e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2d      	ldr	r2, [pc, #180]	@ (8004538 <HAL_TIM_PWM_Start+0x1f0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d101      	bne.n	800448a <HAL_TIM_PWM_Start+0x142>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <HAL_TIM_PWM_Start+0x144>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800449e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a20      	ldr	r2, [pc, #128]	@ (8004528 <HAL_TIM_PWM_Start+0x1e0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d018      	beq.n	80044dc <HAL_TIM_PWM_Start+0x194>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b2:	d013      	beq.n	80044dc <HAL_TIM_PWM_Start+0x194>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a20      	ldr	r2, [pc, #128]	@ (800453c <HAL_TIM_PWM_Start+0x1f4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00e      	beq.n	80044dc <HAL_TIM_PWM_Start+0x194>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004540 <HAL_TIM_PWM_Start+0x1f8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_TIM_PWM_Start+0x194>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a17      	ldr	r2, [pc, #92]	@ (800452c <HAL_TIM_PWM_Start+0x1e4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_TIM_PWM_Start+0x194>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a16      	ldr	r2, [pc, #88]	@ (8004530 <HAL_TIM_PWM_Start+0x1e8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d115      	bne.n	8004508 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	4b18      	ldr	r3, [pc, #96]	@ (8004544 <HAL_TIM_PWM_Start+0x1fc>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d015      	beq.n	800451a <HAL_TIM_PWM_Start+0x1d2>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f4:	d011      	beq.n	800451a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0201 	orr.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004506:	e008      	b.n	800451a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	e000      	b.n	800451c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40013400 	.word	0x40013400
 8004530:	40014000 	.word	0x40014000
 8004534:	40014400 	.word	0x40014400
 8004538:	40014800 	.word	0x40014800
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800
 8004544:	00010007 	.word	0x00010007

08004548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d020      	beq.n	80045ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01b      	beq.n	80045ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0202 	mvn.w	r2, #2
 800457c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fb40 	bl	8004c18 <HAL_TIM_IC_CaptureCallback>
 8004598:	e005      	b.n	80045a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fb32 	bl	8004c04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fb43 	bl	8004c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d020      	beq.n	80045f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01b      	beq.n	80045f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0204 	mvn.w	r2, #4
 80045c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2202      	movs	r2, #2
 80045ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fb1a 	bl	8004c18 <HAL_TIM_IC_CaptureCallback>
 80045e4:	e005      	b.n	80045f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fb0c 	bl	8004c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fb1d 	bl	8004c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d020      	beq.n	8004644 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01b      	beq.n	8004644 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0208 	mvn.w	r2, #8
 8004614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2204      	movs	r2, #4
 800461a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 faf4 	bl	8004c18 <HAL_TIM_IC_CaptureCallback>
 8004630:	e005      	b.n	800463e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fae6 	bl	8004c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 faf7 	bl	8004c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	2b00      	cmp	r3, #0
 800464c:	d020      	beq.n	8004690 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01b      	beq.n	8004690 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0210 	mvn.w	r2, #16
 8004660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2208      	movs	r2, #8
 8004666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 face 	bl	8004c18 <HAL_TIM_IC_CaptureCallback>
 800467c:	e005      	b.n	800468a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fac0 	bl	8004c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fad1 	bl	8004c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00c      	beq.n	80046b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0201 	mvn.w	r2, #1
 80046ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fc faf6 	bl	8000ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d104      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00c      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 ff99 	bl	8005614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00c      	beq.n	8004706 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d007      	beq.n	8004706 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80046fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 ff91 	bl	8005628 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00c      	beq.n	800472a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fa8b 	bl	8004c40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00c      	beq.n	800474e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f06f 0220 	mvn.w	r2, #32
 8004746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 ff59 	bl	8005600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00c      	beq.n	8004772 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800476a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 ff65 	bl	800563c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00c      	beq.n	8004796 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d007      	beq.n	8004796 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800478e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 ff5d 	bl	8005650 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00c      	beq.n	80047ba <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80047b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 ff55 	bl	8005664 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00c      	beq.n	80047de <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80047d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 ff4d 	bl	8005678 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004802:	2302      	movs	r3, #2
 8004804:	e0ff      	b.n	8004a06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b14      	cmp	r3, #20
 8004812:	f200 80f0 	bhi.w	80049f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004816:	a201      	add	r2, pc, #4	@ (adr r2, 800481c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	08004871 	.word	0x08004871
 8004820:	080049f7 	.word	0x080049f7
 8004824:	080049f7 	.word	0x080049f7
 8004828:	080049f7 	.word	0x080049f7
 800482c:	080048b1 	.word	0x080048b1
 8004830:	080049f7 	.word	0x080049f7
 8004834:	080049f7 	.word	0x080049f7
 8004838:	080049f7 	.word	0x080049f7
 800483c:	080048f3 	.word	0x080048f3
 8004840:	080049f7 	.word	0x080049f7
 8004844:	080049f7 	.word	0x080049f7
 8004848:	080049f7 	.word	0x080049f7
 800484c:	08004933 	.word	0x08004933
 8004850:	080049f7 	.word	0x080049f7
 8004854:	080049f7 	.word	0x080049f7
 8004858:	080049f7 	.word	0x080049f7
 800485c:	08004975 	.word	0x08004975
 8004860:	080049f7 	.word	0x080049f7
 8004864:	080049f7 	.word	0x080049f7
 8004868:	080049f7 	.word	0x080049f7
 800486c:	080049b5 	.word	0x080049b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fa88 	bl	8004d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0208 	orr.w	r2, r2, #8
 800488a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0204 	bic.w	r2, r2, #4
 800489a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6999      	ldr	r1, [r3, #24]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	619a      	str	r2, [r3, #24]
      break;
 80048ae:	e0a5      	b.n	80049fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 faf8 	bl	8004eac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6999      	ldr	r1, [r3, #24]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	021a      	lsls	r2, r3, #8
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	619a      	str	r2, [r3, #24]
      break;
 80048f0:	e084      	b.n	80049fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fb61 	bl	8004fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0208 	orr.w	r2, r2, #8
 800490c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0204 	bic.w	r2, r2, #4
 800491c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69d9      	ldr	r1, [r3, #28]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	61da      	str	r2, [r3, #28]
      break;
 8004930:	e064      	b.n	80049fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fbc9 	bl	80050d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800494c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800495c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69d9      	ldr	r1, [r3, #28]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	021a      	lsls	r2, r3, #8
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	61da      	str	r2, [r3, #28]
      break;
 8004972:	e043      	b.n	80049fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fc32 	bl	80051e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0208 	orr.w	r2, r2, #8
 800498e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0204 	bic.w	r2, r2, #4
 800499e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80049b2:	e023      	b.n	80049fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68b9      	ldr	r1, [r7, #8]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fc76 	bl	80052ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	021a      	lsls	r2, r3, #8
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80049f4:	e002      	b.n	80049fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	75fb      	strb	r3, [r7, #23]
      break;
 80049fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop

08004a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_TIM_ConfigClockSource+0x1c>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e0de      	b.n	8004bea <HAL_TIM_ConfigClockSource+0x1da>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004a4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a63      	ldr	r2, [pc, #396]	@ (8004bf4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	f000 80a9 	beq.w	8004bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8004a6c:	4a61      	ldr	r2, [pc, #388]	@ (8004bf4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	f200 80ae 	bhi.w	8004bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a74:	4a60      	ldr	r2, [pc, #384]	@ (8004bf8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	f000 80a1 	beq.w	8004bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8004a7c:	4a5e      	ldr	r2, [pc, #376]	@ (8004bf8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	f200 80a6 	bhi.w	8004bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a84:	4a5d      	ldr	r2, [pc, #372]	@ (8004bfc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	f000 8099 	beq.w	8004bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8004a8c:	4a5b      	ldr	r2, [pc, #364]	@ (8004bfc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	f200 809e 	bhi.w	8004bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a94:	4a5a      	ldr	r2, [pc, #360]	@ (8004c00 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	f000 8091 	beq.w	8004bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8004a9c:	4a58      	ldr	r2, [pc, #352]	@ (8004c00 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	f200 8096 	bhi.w	8004bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004aa4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004aa8:	f000 8089 	beq.w	8004bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8004aac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ab0:	f200 808e 	bhi.w	8004bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ab4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ab8:	d03e      	beq.n	8004b38 <HAL_TIM_ConfigClockSource+0x128>
 8004aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004abe:	f200 8087 	bhi.w	8004bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ac6:	f000 8086 	beq.w	8004bd6 <HAL_TIM_ConfigClockSource+0x1c6>
 8004aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ace:	d87f      	bhi.n	8004bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ad0:	2b70      	cmp	r3, #112	@ 0x70
 8004ad2:	d01a      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0xfa>
 8004ad4:	2b70      	cmp	r3, #112	@ 0x70
 8004ad6:	d87b      	bhi.n	8004bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ad8:	2b60      	cmp	r3, #96	@ 0x60
 8004ada:	d050      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0x16e>
 8004adc:	2b60      	cmp	r3, #96	@ 0x60
 8004ade:	d877      	bhi.n	8004bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ae0:	2b50      	cmp	r3, #80	@ 0x50
 8004ae2:	d03c      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x14e>
 8004ae4:	2b50      	cmp	r3, #80	@ 0x50
 8004ae6:	d873      	bhi.n	8004bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ae8:	2b40      	cmp	r3, #64	@ 0x40
 8004aea:	d058      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0x18e>
 8004aec:	2b40      	cmp	r3, #64	@ 0x40
 8004aee:	d86f      	bhi.n	8004bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004af0:	2b30      	cmp	r3, #48	@ 0x30
 8004af2:	d064      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8004af4:	2b30      	cmp	r3, #48	@ 0x30
 8004af6:	d86b      	bhi.n	8004bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d060      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	d867      	bhi.n	8004bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d05c      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d05a      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8004b08:	e062      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b1a:	f000 fca9 	bl	8005470 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	609a      	str	r2, [r3, #8]
      break;
 8004b36:	e04f      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b48:	f000 fc92 	bl	8005470 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b5a:	609a      	str	r2, [r3, #8]
      break;
 8004b5c:	e03c      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f000 fc04 	bl	8005378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2150      	movs	r1, #80	@ 0x50
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fc5d 	bl	8005436 <TIM_ITRx_SetConfig>
      break;
 8004b7c:	e02c      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f000 fc23 	bl	80053d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2160      	movs	r1, #96	@ 0x60
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fc4d 	bl	8005436 <TIM_ITRx_SetConfig>
      break;
 8004b9c:	e01c      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004baa:	461a      	mov	r2, r3
 8004bac:	f000 fbe4 	bl	8005378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2140      	movs	r1, #64	@ 0x40
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fc3d 	bl	8005436 <TIM_ITRx_SetConfig>
      break;
 8004bbc:	e00c      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4610      	mov	r0, r2
 8004bca:	f000 fc34 	bl	8005436 <TIM_ITRx_SetConfig>
      break;
 8004bce:	e003      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd4:	e000      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	00100070 	.word	0x00100070
 8004bf8:	00100040 	.word	0x00100040
 8004bfc:	00100030 	.word	0x00100030
 8004c00:	00100020 	.word	0x00100020

08004c04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a42      	ldr	r2, [pc, #264]	@ (8004d70 <TIM_Base_SetConfig+0x11c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00f      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c72:	d00b      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a3f      	ldr	r2, [pc, #252]	@ (8004d74 <TIM_Base_SetConfig+0x120>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a3e      	ldr	r2, [pc, #248]	@ (8004d78 <TIM_Base_SetConfig+0x124>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a3d      	ldr	r2, [pc, #244]	@ (8004d7c <TIM_Base_SetConfig+0x128>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d108      	bne.n	8004c9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a33      	ldr	r2, [pc, #204]	@ (8004d70 <TIM_Base_SetConfig+0x11c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01b      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cac:	d017      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a30      	ldr	r2, [pc, #192]	@ (8004d74 <TIM_Base_SetConfig+0x120>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a2f      	ldr	r2, [pc, #188]	@ (8004d78 <TIM_Base_SetConfig+0x124>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00f      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8004d7c <TIM_Base_SetConfig+0x128>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00b      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8004d80 <TIM_Base_SetConfig+0x12c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8004d84 <TIM_Base_SetConfig+0x130>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d003      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8004d88 <TIM_Base_SetConfig+0x134>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d108      	bne.n	8004cf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a16      	ldr	r2, [pc, #88]	@ (8004d70 <TIM_Base_SetConfig+0x11c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00f      	beq.n	8004d3c <TIM_Base_SetConfig+0xe8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a17      	ldr	r2, [pc, #92]	@ (8004d7c <TIM_Base_SetConfig+0x128>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00b      	beq.n	8004d3c <TIM_Base_SetConfig+0xe8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a16      	ldr	r2, [pc, #88]	@ (8004d80 <TIM_Base_SetConfig+0x12c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d007      	beq.n	8004d3c <TIM_Base_SetConfig+0xe8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a15      	ldr	r2, [pc, #84]	@ (8004d84 <TIM_Base_SetConfig+0x130>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <TIM_Base_SetConfig+0xe8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a14      	ldr	r2, [pc, #80]	@ (8004d88 <TIM_Base_SetConfig+0x134>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d103      	bne.n	8004d44 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d105      	bne.n	8004d62 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f023 0201 	bic.w	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	611a      	str	r2, [r3, #16]
  }
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40013400 	.word	0x40013400
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40014400 	.word	0x40014400
 8004d88:	40014800 	.word	0x40014800

08004d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	f023 0201 	bic.w	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f023 0302 	bic.w	r3, r3, #2
 8004dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a2c      	ldr	r2, [pc, #176]	@ (8004e98 <TIM_OC1_SetConfig+0x10c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00f      	beq.n	8004e0c <TIM_OC1_SetConfig+0x80>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a2b      	ldr	r2, [pc, #172]	@ (8004e9c <TIM_OC1_SetConfig+0x110>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <TIM_OC1_SetConfig+0x80>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea0 <TIM_OC1_SetConfig+0x114>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <TIM_OC1_SetConfig+0x80>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a29      	ldr	r2, [pc, #164]	@ (8004ea4 <TIM_OC1_SetConfig+0x118>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_OC1_SetConfig+0x80>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a28      	ldr	r2, [pc, #160]	@ (8004ea8 <TIM_OC1_SetConfig+0x11c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d10c      	bne.n	8004e26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f023 0308 	bic.w	r3, r3, #8
 8004e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f023 0304 	bic.w	r3, r3, #4
 8004e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1b      	ldr	r2, [pc, #108]	@ (8004e98 <TIM_OC1_SetConfig+0x10c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00f      	beq.n	8004e4e <TIM_OC1_SetConfig+0xc2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a1a      	ldr	r2, [pc, #104]	@ (8004e9c <TIM_OC1_SetConfig+0x110>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00b      	beq.n	8004e4e <TIM_OC1_SetConfig+0xc2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a19      	ldr	r2, [pc, #100]	@ (8004ea0 <TIM_OC1_SetConfig+0x114>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <TIM_OC1_SetConfig+0xc2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a18      	ldr	r2, [pc, #96]	@ (8004ea4 <TIM_OC1_SetConfig+0x118>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d003      	beq.n	8004e4e <TIM_OC1_SetConfig+0xc2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a17      	ldr	r2, [pc, #92]	@ (8004ea8 <TIM_OC1_SetConfig+0x11c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d111      	bne.n	8004e72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	621a      	str	r2, [r3, #32]
}
 8004e8c:	bf00      	nop
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	40013400 	.word	0x40013400
 8004ea0:	40014000 	.word	0x40014000
 8004ea4:	40014400 	.word	0x40014400
 8004ea8:	40014800 	.word	0x40014800

08004eac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f023 0210 	bic.w	r2, r3, #16
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f023 0320 	bic.w	r3, r3, #32
 8004efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a28      	ldr	r2, [pc, #160]	@ (8004fac <TIM_OC2_SetConfig+0x100>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_OC2_SetConfig+0x6c>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a27      	ldr	r2, [pc, #156]	@ (8004fb0 <TIM_OC2_SetConfig+0x104>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d10d      	bne.n	8004f34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a1d      	ldr	r2, [pc, #116]	@ (8004fac <TIM_OC2_SetConfig+0x100>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00f      	beq.n	8004f5c <TIM_OC2_SetConfig+0xb0>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb0 <TIM_OC2_SetConfig+0x104>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00b      	beq.n	8004f5c <TIM_OC2_SetConfig+0xb0>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb4 <TIM_OC2_SetConfig+0x108>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d007      	beq.n	8004f5c <TIM_OC2_SetConfig+0xb0>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb8 <TIM_OC2_SetConfig+0x10c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_OC2_SetConfig+0xb0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a19      	ldr	r2, [pc, #100]	@ (8004fbc <TIM_OC2_SetConfig+0x110>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d113      	bne.n	8004f84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40012c00 	.word	0x40012c00
 8004fb0:	40013400 	.word	0x40013400
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	40014400 	.word	0x40014400
 8004fbc:	40014800 	.word	0x40014800

08004fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800500c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	021b      	lsls	r3, r3, #8
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a27      	ldr	r2, [pc, #156]	@ (80050bc <TIM_OC3_SetConfig+0xfc>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d003      	beq.n	800502a <TIM_OC3_SetConfig+0x6a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a26      	ldr	r2, [pc, #152]	@ (80050c0 <TIM_OC3_SetConfig+0x100>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d10d      	bne.n	8005046 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1c      	ldr	r2, [pc, #112]	@ (80050bc <TIM_OC3_SetConfig+0xfc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00f      	beq.n	800506e <TIM_OC3_SetConfig+0xae>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1b      	ldr	r2, [pc, #108]	@ (80050c0 <TIM_OC3_SetConfig+0x100>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00b      	beq.n	800506e <TIM_OC3_SetConfig+0xae>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1a      	ldr	r2, [pc, #104]	@ (80050c4 <TIM_OC3_SetConfig+0x104>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <TIM_OC3_SetConfig+0xae>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a19      	ldr	r2, [pc, #100]	@ (80050c8 <TIM_OC3_SetConfig+0x108>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_OC3_SetConfig+0xae>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a18      	ldr	r2, [pc, #96]	@ (80050cc <TIM_OC3_SetConfig+0x10c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d113      	bne.n	8005096 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800507c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	621a      	str	r2, [r3, #32]
}
 80050b0:	bf00      	nop
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40013400 	.word	0x40013400
 80050c4:	40014000 	.word	0x40014000
 80050c8:	40014400 	.word	0x40014400
 80050cc:	40014800 	.word	0x40014800

080050d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800510a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800511e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	031b      	lsls	r3, r3, #12
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a28      	ldr	r2, [pc, #160]	@ (80051d0 <TIM_OC4_SetConfig+0x100>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d003      	beq.n	800513c <TIM_OC4_SetConfig+0x6c>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a27      	ldr	r2, [pc, #156]	@ (80051d4 <TIM_OC4_SetConfig+0x104>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d10d      	bne.n	8005158 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	031b      	lsls	r3, r3, #12
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005156:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a1d      	ldr	r2, [pc, #116]	@ (80051d0 <TIM_OC4_SetConfig+0x100>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00f      	beq.n	8005180 <TIM_OC4_SetConfig+0xb0>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a1c      	ldr	r2, [pc, #112]	@ (80051d4 <TIM_OC4_SetConfig+0x104>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00b      	beq.n	8005180 <TIM_OC4_SetConfig+0xb0>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a1b      	ldr	r2, [pc, #108]	@ (80051d8 <TIM_OC4_SetConfig+0x108>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d007      	beq.n	8005180 <TIM_OC4_SetConfig+0xb0>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a1a      	ldr	r2, [pc, #104]	@ (80051dc <TIM_OC4_SetConfig+0x10c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_OC4_SetConfig+0xb0>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a19      	ldr	r2, [pc, #100]	@ (80051e0 <TIM_OC4_SetConfig+0x110>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d113      	bne.n	80051a8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005186:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800518e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	019b      	lsls	r3, r3, #6
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	019b      	lsls	r3, r3, #6
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40012c00 	.word	0x40012c00
 80051d4:	40013400 	.word	0x40013400
 80051d8:	40014000 	.word	0x40014000
 80051dc:	40014400 	.word	0x40014400
 80051e0:	40014800 	.word	0x40014800

080051e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005228:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a17      	ldr	r2, [pc, #92]	@ (8005298 <TIM_OC5_SetConfig+0xb4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00f      	beq.n	800525e <TIM_OC5_SetConfig+0x7a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a16      	ldr	r2, [pc, #88]	@ (800529c <TIM_OC5_SetConfig+0xb8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00b      	beq.n	800525e <TIM_OC5_SetConfig+0x7a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a15      	ldr	r2, [pc, #84]	@ (80052a0 <TIM_OC5_SetConfig+0xbc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <TIM_OC5_SetConfig+0x7a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a14      	ldr	r2, [pc, #80]	@ (80052a4 <TIM_OC5_SetConfig+0xc0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_OC5_SetConfig+0x7a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a13      	ldr	r2, [pc, #76]	@ (80052a8 <TIM_OC5_SetConfig+0xc4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d109      	bne.n	8005272 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005264:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	621a      	str	r2, [r3, #32]
}
 800528c:	bf00      	nop
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40013400 	.word	0x40013400
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40014400 	.word	0x40014400
 80052a8:	40014800 	.word	0x40014800

080052ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	051b      	lsls	r3, r3, #20
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a18      	ldr	r2, [pc, #96]	@ (8005364 <TIM_OC6_SetConfig+0xb8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00f      	beq.n	8005328 <TIM_OC6_SetConfig+0x7c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a17      	ldr	r2, [pc, #92]	@ (8005368 <TIM_OC6_SetConfig+0xbc>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00b      	beq.n	8005328 <TIM_OC6_SetConfig+0x7c>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a16      	ldr	r2, [pc, #88]	@ (800536c <TIM_OC6_SetConfig+0xc0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d007      	beq.n	8005328 <TIM_OC6_SetConfig+0x7c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a15      	ldr	r2, [pc, #84]	@ (8005370 <TIM_OC6_SetConfig+0xc4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_OC6_SetConfig+0x7c>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a14      	ldr	r2, [pc, #80]	@ (8005374 <TIM_OC6_SetConfig+0xc8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d109      	bne.n	800533c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800532e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	029b      	lsls	r3, r3, #10
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40012c00 	.word	0x40012c00
 8005368:	40013400 	.word	0x40013400
 800536c:	40014000 	.word	0x40014000
 8005370:	40014400 	.word	0x40014400
 8005374:	40014800 	.word	0x40014800

08005378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f023 0201 	bic.w	r2, r3, #1
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f023 030a 	bic.w	r3, r3, #10
 80053b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b087      	sub	sp, #28
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	f023 0210 	bic.w	r2, r3, #16
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005400:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	031b      	lsls	r3, r3, #12
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005412:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005436:	b480      	push	{r7}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800544c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	f043 0307 	orr.w	r3, r3, #7
 800545c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	609a      	str	r2, [r3, #8]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800548a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	021a      	lsls	r2, r3, #8
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	431a      	orrs	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4313      	orrs	r3, r2
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	609a      	str	r2, [r3, #8]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 031f 	and.w	r3, r3, #31
 80054c2:	2201      	movs	r2, #1
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1a      	ldr	r2, [r3, #32]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	43db      	mvns	r3, r3
 80054d2:	401a      	ands	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1a      	ldr	r2, [r3, #32]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	fa01 f303 	lsl.w	r3, r1, r3
 80054e8:	431a      	orrs	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	621a      	str	r2, [r3, #32]
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005510:	2302      	movs	r3, #2
 8005512:	e065      	b.n	80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a2c      	ldr	r2, [pc, #176]	@ (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d004      	beq.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a2b      	ldr	r2, [pc, #172]	@ (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d108      	bne.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800554e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005564:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1b      	ldr	r2, [pc, #108]	@ (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d018      	beq.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800558a:	d013      	beq.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a18      	ldr	r2, [pc, #96]	@ (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00e      	beq.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a17      	ldr	r2, [pc, #92]	@ (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d009      	beq.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a12      	ldr	r2, [pc, #72]	@ (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d004      	beq.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a13      	ldr	r2, [pc, #76]	@ (80055fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d10c      	bne.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	40013400 	.word	0x40013400
 80055f4:	40000400 	.word	0x40000400
 80055f8:	40000800 	.word	0x40000800
 80055fc:	40014000 	.word	0x40014000

08005600 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800569c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80056a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056c2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80056c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	43db      	mvns	r3, r3
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	4013      	ands	r3, r2
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	1d3b      	adds	r3, r7, #4
 80056fa:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800572c:	b480      	push	{r7}
 800572e:	b09d      	sub	sp, #116	@ 0x74
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	b29b      	uxth	r3, r3
 800574a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800574e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005752:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	78db      	ldrb	r3, [r3, #3]
 800575a:	2b03      	cmp	r3, #3
 800575c:	d81f      	bhi.n	800579e <USB_ActivateEndpoint+0x72>
 800575e:	a201      	add	r2, pc, #4	@ (adr r2, 8005764 <USB_ActivateEndpoint+0x38>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	08005775 	.word	0x08005775
 8005768:	08005791 	.word	0x08005791
 800576c:	080057a7 	.word	0x080057a7
 8005770:	08005783 	.word	0x08005783
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005774:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005778:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800577c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005780:	e012      	b.n	80057a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005782:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005786:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800578a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800578e:	e00b      	b.n	80057a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005790:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005794:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005798:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800579c:	e004      	b.n	80057a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80057a4:	e000      	b.n	80057a8 <USB_ActivateEndpoint+0x7c>
      break;
 80057a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	441a      	add	r2, r3
 80057b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	b21b      	sxth	r3, r3
 80057da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e2:	b21a      	sxth	r2, r3
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	b21b      	sxth	r3, r3
 80057ea:	4313      	orrs	r3, r2
 80057ec:	b21b      	sxth	r3, r3
 80057ee:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	441a      	add	r2, r3
 80057fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800580c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005810:	b29b      	uxth	r3, r3
 8005812:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	7b1b      	ldrb	r3, [r3, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f040 8178 	bne.w	8005b0e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 8084 	beq.w	8005930 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005832:	b29b      	uxth	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	4413      	add	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	00da      	lsls	r2, r3, #3
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	88db      	ldrh	r3, [r3, #6]
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	b29b      	uxth	r3, r3
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	827b      	strh	r3, [r7, #18]
 800586a:	8a7b      	ldrh	r3, [r7, #18]
 800586c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01b      	beq.n	80058ac <USB_ActivateEndpoint+0x180>
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588a:	823b      	strh	r3, [r7, #16]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	441a      	add	r2, r3
 8005896:	8a3b      	ldrh	r3, [r7, #16]
 8005898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800589c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	78db      	ldrb	r3, [r3, #3]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d020      	beq.n	80058f6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058ca:	81bb      	strh	r3, [r7, #12]
 80058cc:	89bb      	ldrh	r3, [r7, #12]
 80058ce:	f083 0320 	eor.w	r3, r3, #32
 80058d2:	81bb      	strh	r3, [r7, #12]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	441a      	add	r2, r3
 80058de:	89bb      	ldrh	r3, [r7, #12]
 80058e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	8013      	strh	r3, [r2, #0]
 80058f4:	e2d5      	b.n	8005ea2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005908:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800590c:	81fb      	strh	r3, [r7, #14]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	441a      	add	r2, r3
 8005918:	89fb      	ldrh	r3, [r7, #14]
 800591a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800591e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800592a:	b29b      	uxth	r3, r3
 800592c:	8013      	strh	r3, [r2, #0]
 800592e:	e2b8      	b.n	8005ea2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	633b      	str	r3, [r7, #48]	@ 0x30
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800593a:	b29b      	uxth	r3, r3
 800593c:	461a      	mov	r2, r3
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	4413      	add	r3, r2
 8005942:	633b      	str	r3, [r7, #48]	@ 0x30
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	00da      	lsls	r2, r3, #3
 800594a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594c:	4413      	add	r3, r2
 800594e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	88db      	ldrh	r3, [r3, #6]
 8005958:	085b      	lsrs	r3, r3, #1
 800595a:	b29b      	uxth	r3, r3
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005962:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800596e:	b29b      	uxth	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005974:	4413      	add	r3, r2
 8005976:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	00da      	lsls	r2, r3, #3
 800597e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005980:	4413      	add	r3, r2
 8005982:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005986:	627b      	str	r3, [r7, #36]	@ 0x24
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005992:	b29a      	uxth	r2, r3
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	801a      	strh	r2, [r3, #0]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b3e      	cmp	r3, #62	@ 0x3e
 800599e:	d91d      	bls.n	80059dc <USB_ActivateEndpoint+0x2b0>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	f003 031f 	and.w	r3, r3, #31
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d102      	bne.n	80059ba <USB_ActivateEndpoint+0x28e>
 80059b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059b6:	3b01      	subs	r3, #1
 80059b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	b29a      	uxth	r2, r3
 80059c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	029b      	lsls	r3, r3, #10
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	4313      	orrs	r3, r2
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	801a      	strh	r2, [r3, #0]
 80059da:	e026      	b.n	8005a2a <USB_ActivateEndpoint+0x2fe>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <USB_ActivateEndpoint+0x2ce>
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	801a      	strh	r2, [r3, #0]
 80059f8:	e017      	b.n	8005a2a <USB_ActivateEndpoint+0x2fe>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <USB_ActivateEndpoint+0x2e8>
 8005a0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a10:	3301      	adds	r3, #1
 8005a12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	029b      	lsls	r3, r3, #10
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	4313      	orrs	r3, r2
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005a38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01b      	beq.n	8005a7a <USB_ActivateEndpoint+0x34e>
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a58:	843b      	strh	r3, [r7, #32]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	441a      	add	r2, r3
 8005a64:	8c3b      	ldrh	r3, [r7, #32]
 8005a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d124      	bne.n	8005acc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a98:	83bb      	strh	r3, [r7, #28]
 8005a9a:	8bbb      	ldrh	r3, [r7, #28]
 8005a9c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005aa0:	83bb      	strh	r3, [r7, #28]
 8005aa2:	8bbb      	ldrh	r3, [r7, #28]
 8005aa4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005aa8:	83bb      	strh	r3, [r7, #28]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	441a      	add	r2, r3
 8005ab4:	8bbb      	ldrh	r3, [r7, #28]
 8005ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	8013      	strh	r3, [r2, #0]
 8005aca:	e1ea      	b.n	8005ea2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae2:	83fb      	strh	r3, [r7, #30]
 8005ae4:	8bfb      	ldrh	r3, [r7, #30]
 8005ae6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005aea:	83fb      	strh	r3, [r7, #30]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	441a      	add	r2, r3
 8005af6:	8bfb      	ldrh	r3, [r7, #30]
 8005af8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005afc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	8013      	strh	r3, [r2, #0]
 8005b0c:	e1c9      	b.n	8005ea2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	78db      	ldrb	r3, [r3, #3]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d11e      	bne.n	8005b54 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b2c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	441a      	add	r2, r3
 8005b3a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005b3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b46:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	8013      	strh	r3, [r2, #0]
 8005b52:	e01d      	b.n	8005b90 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b6a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	441a      	add	r2, r3
 8005b78:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ba0:	4413      	add	r3, r2
 8005ba2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	00da      	lsls	r2, r3, #3
 8005baa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	891b      	ldrh	r3, [r3, #8]
 8005bb8:	085b      	lsrs	r3, r3, #1
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bd4:	4413      	add	r3, r2
 8005bd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	00da      	lsls	r2, r3, #3
 8005bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005be0:	4413      	add	r3, r2
 8005be2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005be6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	895b      	ldrh	r3, [r3, #10]
 8005bec:	085b      	lsrs	r3, r3, #1
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bf6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f040 8093 	bne.w	8005d28 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005c12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01b      	beq.n	8005c56 <USB_ActivateEndpoint+0x52a>
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c34:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	441a      	add	r2, r3
 8005c40:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005c64:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01b      	beq.n	8005ca6 <USB_ActivateEndpoint+0x57a>
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c84:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	441a      	add	r2, r3
 8005c90:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005c92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cbc:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005cbe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005cc0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005cc4:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005cc6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005cc8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ccc:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	441a      	add	r2, r3
 8005cd8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005cda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d04:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	441a      	add	r2, r3
 8005d10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	8013      	strh	r3, [r2, #0]
 8005d26:	e0bc      	b.n	8005ea2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005d38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01d      	beq.n	8005d80 <USB_ActivateEndpoint+0x654>
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d5a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	441a      	add	r2, r3
 8005d68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005d90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01d      	beq.n	8005dd8 <USB_ActivateEndpoint+0x6ac>
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	441a      	add	r2, r3
 8005dc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005dc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dd0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	78db      	ldrb	r3, [r3, #3]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d024      	beq.n	8005e2a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005dfa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005dfe:	f083 0320 	eor.w	r3, r3, #32
 8005e02:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	441a      	add	r2, r3
 8005e10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	8013      	strh	r3, [r2, #0]
 8005e28:	e01d      	b.n	8005e66 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e40:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	441a      	add	r2, r3
 8005e4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005e52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e7c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005ea2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3774      	adds	r7, #116	@ 0x74
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop

08005eb4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b08d      	sub	sp, #52	@ 0x34
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	7b1b      	ldrb	r3, [r3, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f040 808e 	bne.w	8005fe4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d044      	beq.n	8005f5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	81bb      	strh	r3, [r7, #12]
 8005ede:	89bb      	ldrh	r3, [r7, #12]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01b      	beq.n	8005f20 <USB_DeactivateEndpoint+0x6c>
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005efe:	817b      	strh	r3, [r7, #10]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	441a      	add	r2, r3
 8005f0a:	897b      	ldrh	r3, [r7, #10]
 8005f0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f36:	813b      	strh	r3, [r7, #8]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	441a      	add	r2, r3
 8005f42:	893b      	ldrh	r3, [r7, #8]
 8005f44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	8013      	strh	r3, [r2, #0]
 8005f58:	e192      	b.n	8006280 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	827b      	strh	r3, [r7, #18]
 8005f68:	8a7b      	ldrh	r3, [r7, #18]
 8005f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d01b      	beq.n	8005faa <USB_DeactivateEndpoint+0xf6>
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f88:	823b      	strh	r3, [r7, #16]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	441a      	add	r2, r3
 8005f94:	8a3b      	ldrh	r3, [r7, #16]
 8005f96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc0:	81fb      	strh	r3, [r7, #14]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	89fb      	ldrh	r3, [r7, #14]
 8005fce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	8013      	strh	r3, [r2, #0]
 8005fe2:	e14d      	b.n	8006280 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f040 80a5 	bne.w	8006138 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	843b      	strh	r3, [r7, #32]
 8005ffc:	8c3b      	ldrh	r3, [r7, #32]
 8005ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d01b      	beq.n	800603e <USB_DeactivateEndpoint+0x18a>
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601c:	83fb      	strh	r3, [r7, #30]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	441a      	add	r2, r3
 8006028:	8bfb      	ldrh	r3, [r7, #30]
 800602a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800602e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006032:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603a:	b29b      	uxth	r3, r3
 800603c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	83bb      	strh	r3, [r7, #28]
 800604c:	8bbb      	ldrh	r3, [r7, #28]
 800604e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01b      	beq.n	800608e <USB_DeactivateEndpoint+0x1da>
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006068:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800606c:	837b      	strh	r3, [r7, #26]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	441a      	add	r2, r3
 8006078:	8b7b      	ldrh	r3, [r7, #26]
 800607a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800607e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006086:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800608a:	b29b      	uxth	r3, r3
 800608c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a4:	833b      	strh	r3, [r7, #24]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	441a      	add	r2, r3
 80060b0:	8b3b      	ldrh	r3, [r7, #24]
 80060b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060dc:	82fb      	strh	r3, [r7, #22]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	441a      	add	r2, r3
 80060e8:	8afb      	ldrh	r3, [r7, #22]
 80060ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006114:	82bb      	strh	r3, [r7, #20]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	441a      	add	r2, r3
 8006120:	8abb      	ldrh	r3, [r7, #20]
 8006122:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006126:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800612a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800612e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006132:	b29b      	uxth	r3, r3
 8006134:	8013      	strh	r3, [r2, #0]
 8006136:	e0a3      	b.n	8006280 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006146:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01b      	beq.n	8006188 <USB_DeactivateEndpoint+0x2d4>
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	b29b      	uxth	r3, r3
 800615e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006166:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	441a      	add	r2, r3
 8006172:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006174:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006178:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800617c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006184:	b29b      	uxth	r3, r3
 8006186:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006196:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01b      	beq.n	80061d8 <USB_DeactivateEndpoint+0x324>
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	441a      	add	r2, r3
 80061c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80061c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	441a      	add	r2, r3
 80061fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006200:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006204:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800620c:	b29b      	uxth	r3, r3
 800620e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006226:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	441a      	add	r2, r3
 8006232:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006234:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006238:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800623c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006244:	b29b      	uxth	r3, r3
 8006246:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800625a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	441a      	add	r2, r3
 800626a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800626c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006270:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006274:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800627c:	b29b      	uxth	r3, r3
 800627e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3734      	adds	r7, #52	@ 0x34
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b0c2      	sub	sp, #264	@ 0x108
 8006292:	af00      	add	r7, sp, #0
 8006294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800629c:	6018      	str	r0, [r3, #0]
 800629e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	785b      	ldrb	r3, [r3, #1]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	f040 86b7 	bne.w	8007028 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80062ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d908      	bls.n	80062e8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80062d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80062e6:	e007      	b.n	80062f8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80062e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80062f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	7b1b      	ldrb	r3, [r3, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d13a      	bne.n	800637e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6959      	ldr	r1, [r3, #20]
 8006314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	88da      	ldrh	r2, [r3, #6]
 8006320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006324:	b29b      	uxth	r3, r3
 8006326:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800632a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800632e:	6800      	ldr	r0, [r0, #0]
 8006330:	f001 fc98 	bl	8007c64 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006338:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006344:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800634e:	b29b      	uxth	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	4413      	add	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	00da      	lsls	r2, r3, #3
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	4413      	add	r3, r2
 800636a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	801a      	strh	r2, [r3, #0]
 800637a:	f000 be1f 	b.w	8006fbc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800637e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	78db      	ldrb	r3, [r3, #3]
 800638a:	2b02      	cmp	r3, #2
 800638c:	f040 8462 	bne.w	8006c54 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6a1a      	ldr	r2, [r3, #32]
 800639c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	f240 83df 	bls.w	8006b6c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80063ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80063d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	441a      	add	r2, r3
 80063f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80063f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063fe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006406:	b29b      	uxth	r3, r3
 8006408:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800640a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6a1a      	ldr	r2, [r3, #32]
 8006416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641a:	1ad2      	subs	r2, r2, r3
 800641c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29b      	uxth	r3, r3
 8006446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 81c7 	beq.w	80067de <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	633b      	str	r3, [r7, #48]	@ 0x30
 800645c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	785b      	ldrb	r3, [r3, #1]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d177      	bne.n	800655c <USB_EPStartXfer+0x2ce>
 800646c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006470:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006486:	b29b      	uxth	r3, r3
 8006488:	461a      	mov	r2, r3
 800648a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648c:	4413      	add	r3, r2
 800648e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	00da      	lsls	r2, r3, #3
 800649e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a0:	4413      	add	r3, r2
 80064a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80064be:	d921      	bls.n	8006504 <USB_EPStartXfer+0x276>
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80064ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ce:	f003 031f 	and.w	r3, r3, #31
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d104      	bne.n	80064e0 <USB_EPStartXfer+0x252>
 80064d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80064da:	3b01      	subs	r3, #1
 80064dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80064e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	029b      	lsls	r3, r3, #10
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	4313      	orrs	r3, r2
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	e050      	b.n	80065a6 <USB_EPStartXfer+0x318>
 8006504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <USB_EPStartXfer+0x294>
 800650c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651a:	b29a      	uxth	r2, r3
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	801a      	strh	r2, [r3, #0]
 8006520:	e041      	b.n	80065a6 <USB_EPStartXfer+0x318>
 8006522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006526:	085b      	lsrs	r3, r3, #1
 8006528:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d004      	beq.n	8006542 <USB_EPStartXfer+0x2b4>
 8006538:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800653c:	3301      	adds	r3, #1
 800653e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29a      	uxth	r2, r3
 8006548:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800654c:	b29b      	uxth	r3, r3
 800654e:	029b      	lsls	r3, r3, #10
 8006550:	b29b      	uxth	r3, r3
 8006552:	4313      	orrs	r3, r2
 8006554:	b29a      	uxth	r2, r3
 8006556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006558:	801a      	strh	r2, [r3, #0]
 800655a:	e024      	b.n	80065a6 <USB_EPStartXfer+0x318>
 800655c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	785b      	ldrb	r3, [r3, #1]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d11c      	bne.n	80065a6 <USB_EPStartXfer+0x318>
 800656c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006570:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800657a:	b29b      	uxth	r3, r3
 800657c:	461a      	mov	r2, r3
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	4413      	add	r3, r2
 8006582:	633b      	str	r3, [r7, #48]	@ 0x30
 8006584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	00da      	lsls	r2, r3, #3
 8006592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006594:	4413      	add	r3, r2
 8006596:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800659a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800659c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	895b      	ldrh	r3, [r3, #10]
 80065b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6959      	ldr	r1, [r3, #20]
 80065c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065d4:	6800      	ldr	r0, [r0, #0]
 80065d6:	f001 fb45 	bl	8007c64 <USB_WritePMA>
            ep->xfer_buff += len;
 80065da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695a      	ldr	r2, [r3, #20]
 80065e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ea:	441a      	add	r2, r3
 80065ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6a1a      	ldr	r2, [r3, #32]
 8006604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	429a      	cmp	r2, r3
 8006612:	d90f      	bls.n	8006634 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6a1a      	ldr	r2, [r3, #32]
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006624:	1ad2      	subs	r2, r2, r3
 8006626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	621a      	str	r2, [r3, #32]
 8006632:	e00e      	b.n	8006652 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2200      	movs	r2, #0
 8006650:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d177      	bne.n	8006752 <USB_EPStartXfer+0x4c4>
 8006662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800667c:	b29b      	uxth	r3, r3
 800667e:	461a      	mov	r2, r3
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	4413      	add	r3, r2
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	00da      	lsls	r2, r3, #3
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	4413      	add	r3, r2
 8006698:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80066b4:	d921      	bls.n	80066fa <USB_EPStartXfer+0x46c>
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80066c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c4:	f003 031f 	and.w	r3, r3, #31
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d104      	bne.n	80066d6 <USB_EPStartXfer+0x448>
 80066cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066d0:	3b01      	subs	r3, #1
 80066d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29a      	uxth	r2, r3
 80066dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	029b      	lsls	r3, r3, #10
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	4313      	orrs	r3, r2
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	801a      	strh	r2, [r3, #0]
 80066f8:	e056      	b.n	80067a8 <USB_EPStartXfer+0x51a>
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10a      	bne.n	8006718 <USB_EPStartXfer+0x48a>
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006710:	b29a      	uxth	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	e047      	b.n	80067a8 <USB_EPStartXfer+0x51a>
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <USB_EPStartXfer+0x4aa>
 800672e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006732:	3301      	adds	r3, #1
 8006734:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29a      	uxth	r2, r3
 800673e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006742:	b29b      	uxth	r3, r3
 8006744:	029b      	lsls	r3, r3, #10
 8006746:	b29b      	uxth	r3, r3
 8006748:	4313      	orrs	r3, r2
 800674a:	b29a      	uxth	r2, r3
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	801a      	strh	r2, [r3, #0]
 8006750:	e02a      	b.n	80067a8 <USB_EPStartXfer+0x51a>
 8006752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	785b      	ldrb	r3, [r3, #1]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d122      	bne.n	80067a8 <USB_EPStartXfer+0x51a>
 8006762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	623b      	str	r3, [r7, #32]
 800676e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006772:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800677c:	b29b      	uxth	r3, r3
 800677e:	461a      	mov	r2, r3
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	4413      	add	r3, r2
 8006784:	623b      	str	r3, [r7, #32]
 8006786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	00da      	lsls	r2, r3, #3
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	4413      	add	r3, r2
 8006798:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	891b      	ldrh	r3, [r3, #8]
 80067b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6959      	ldr	r1, [r3, #20]
 80067c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80067ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80067d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80067d6:	6800      	ldr	r0, [r0, #0]
 80067d8:	f001 fa44 	bl	8007c64 <USB_WritePMA>
 80067dc:	e3ee      	b.n	8006fbc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	785b      	ldrb	r3, [r3, #1]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d177      	bne.n	80068de <USB_EPStartXfer+0x650>
 80067ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006808:	b29b      	uxth	r3, r3
 800680a:	461a      	mov	r2, r3
 800680c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800680e:	4413      	add	r3, r2
 8006810:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	00da      	lsls	r2, r3, #3
 8006820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006822:	4413      	add	r3, r2
 8006824:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006828:	647b      	str	r3, [r7, #68]	@ 0x44
 800682a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	b29b      	uxth	r3, r3
 8006830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006834:	b29a      	uxth	r2, r3
 8006836:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006840:	d921      	bls.n	8006886 <USB_EPStartXfer+0x5f8>
 8006842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006846:	095b      	lsrs	r3, r3, #5
 8006848:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800684c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006850:	f003 031f 	and.w	r3, r3, #31
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <USB_EPStartXfer+0x5d4>
 8006858:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800685c:	3b01      	subs	r3, #1
 800685e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b29a      	uxth	r2, r3
 8006868:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800686c:	b29b      	uxth	r3, r3
 800686e:	029b      	lsls	r3, r3, #10
 8006870:	b29b      	uxth	r3, r3
 8006872:	4313      	orrs	r3, r2
 8006874:	b29b      	uxth	r3, r3
 8006876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800687a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687e:	b29a      	uxth	r2, r3
 8006880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006882:	801a      	strh	r2, [r3, #0]
 8006884:	e056      	b.n	8006934 <USB_EPStartXfer+0x6a6>
 8006886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <USB_EPStartXfer+0x616>
 800688e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689c:	b29a      	uxth	r2, r3
 800689e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	e047      	b.n	8006934 <USB_EPStartXfer+0x6a6>
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a8:	085b      	lsrs	r3, r3, #1
 80068aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <USB_EPStartXfer+0x636>
 80068ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068be:	3301      	adds	r3, #1
 80068c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	029b      	lsls	r3, r3, #10
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	4313      	orrs	r3, r2
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068da:	801a      	strh	r2, [r3, #0]
 80068dc:	e02a      	b.n	8006934 <USB_EPStartXfer+0x6a6>
 80068de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	785b      	ldrb	r3, [r3, #1]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d122      	bne.n	8006934 <USB_EPStartXfer+0x6a6>
 80068ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80068fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006908:	b29b      	uxth	r3, r3
 800690a:	461a      	mov	r2, r3
 800690c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800690e:	4413      	add	r3, r2
 8006910:	653b      	str	r3, [r7, #80]	@ 0x50
 8006912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	00da      	lsls	r2, r3, #3
 8006920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006922:	4413      	add	r3, r2
 8006924:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006928:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800692a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692e:	b29a      	uxth	r2, r3
 8006930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006932:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	891b      	ldrh	r3, [r3, #8]
 8006940:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6959      	ldr	r1, [r3, #20]
 8006950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006954:	b29b      	uxth	r3, r3
 8006956:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800695a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800695e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006962:	6800      	ldr	r0, [r0, #0]
 8006964:	f001 f97e 	bl	8007c64 <USB_WritePMA>
            ep->xfer_buff += len;
 8006968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	695a      	ldr	r2, [r3, #20]
 8006974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006978:	441a      	add	r2, r3
 800697a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6a1a      	ldr	r2, [r3, #32]
 8006992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d90f      	bls.n	80069c2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80069a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6a1a      	ldr	r2, [r3, #32]
 80069ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b2:	1ad2      	subs	r2, r2, r3
 80069b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	621a      	str	r2, [r3, #32]
 80069c0:	e00e      	b.n	80069e0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80069c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80069d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2200      	movs	r2, #0
 80069de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80069ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d177      	bne.n	8006aec <USB_EPStartXfer+0x85e>
 80069fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1c:	4413      	add	r3, r2
 8006a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	00da      	lsls	r2, r3, #3
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a30:	4413      	add	r3, r2
 8006a32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a46:	801a      	strh	r2, [r3, #0]
 8006a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a4e:	d921      	bls.n	8006a94 <USB_EPStartXfer+0x806>
 8006a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5e:	f003 031f 	and.w	r3, r3, #31
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <USB_EPStartXfer+0x7e2>
 8006a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	029b      	lsls	r3, r3, #10
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	4313      	orrs	r3, r2
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	e050      	b.n	8006b36 <USB_EPStartXfer+0x8a8>
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <USB_EPStartXfer+0x824>
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aae:	801a      	strh	r2, [r3, #0]
 8006ab0:	e041      	b.n	8006b36 <USB_EPStartXfer+0x8a8>
 8006ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab6:	085b      	lsrs	r3, r3, #1
 8006ab8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d004      	beq.n	8006ad2 <USB_EPStartXfer+0x844>
 8006ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006acc:	3301      	adds	r3, #1
 8006ace:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	029b      	lsls	r3, r3, #10
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae8:	801a      	strh	r2, [r3, #0]
 8006aea:	e024      	b.n	8006b36 <USB_EPStartXfer+0x8a8>
 8006aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	785b      	ldrb	r3, [r3, #1]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d11c      	bne.n	8006b36 <USB_EPStartXfer+0x8a8>
 8006afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b10:	4413      	add	r3, r2
 8006b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	00da      	lsls	r2, r3, #3
 8006b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b24:	4413      	add	r3, r2
 8006b26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	895b      	ldrh	r3, [r3, #10]
 8006b42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6959      	ldr	r1, [r3, #20]
 8006b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b64:	6800      	ldr	r0, [r0, #0]
 8006b66:	f001 f87d 	bl	8007c64 <USB_WritePMA>
 8006b6a:	e227      	b.n	8006fbc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006baa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	441a      	add	r2, r3
 8006bc0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006bc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bf8:	4413      	add	r3, r2
 8006bfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	00da      	lsls	r2, r3, #3
 8006c0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	891b      	ldrh	r3, [r3, #8]
 8006c2a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6959      	ldr	r1, [r3, #20]
 8006c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c44:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c48:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c4c:	6800      	ldr	r0, [r0, #0]
 8006c4e:	f001 f809 	bl	8007c64 <USB_WritePMA>
 8006c52:	e1b3      	b.n	8006fbc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6a1a      	ldr	r2, [r3, #32]
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c64:	1ad2      	subs	r2, r2, r3
 8006c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80c6 	beq.w	8006e26 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	785b      	ldrb	r3, [r3, #1]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d177      	bne.n	8006da6 <USB_EPStartXfer+0xb18>
 8006cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cd6:	4413      	add	r3, r2
 8006cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	00da      	lsls	r2, r3, #3
 8006ce8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cea:	4413      	add	r3, r2
 8006cec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006cf0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d06:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d08:	d921      	bls.n	8006d4e <USB_EPStartXfer+0xac0>
 8006d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d18:	f003 031f 	and.w	r3, r3, #31
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <USB_EPStartXfer+0xa9c>
 8006d20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d24:	3b01      	subs	r3, #1
 8006d26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	029b      	lsls	r3, r3, #10
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	e050      	b.n	8006df0 <USB_EPStartXfer+0xb62>
 8006d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10a      	bne.n	8006d6c <USB_EPStartXfer+0xade>
 8006d56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d68:	801a      	strh	r2, [r3, #0]
 8006d6a:	e041      	b.n	8006df0 <USB_EPStartXfer+0xb62>
 8006d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d70:	085b      	lsrs	r3, r3, #1
 8006d72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d004      	beq.n	8006d8c <USB_EPStartXfer+0xafe>
 8006d82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d86:	3301      	adds	r3, #1
 8006d88:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	029b      	lsls	r3, r3, #10
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006da2:	801a      	strh	r2, [r3, #0]
 8006da4:	e024      	b.n	8006df0 <USB_EPStartXfer+0xb62>
 8006da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	785b      	ldrb	r3, [r3, #1]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d11c      	bne.n	8006df0 <USB_EPStartXfer+0xb62>
 8006db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dca:	4413      	add	r3, r2
 8006dcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	00da      	lsls	r2, r3, #3
 8006ddc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dde:	4413      	add	r3, r2
 8006de0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006de4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	895b      	ldrh	r3, [r3, #10]
 8006dfc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6959      	ldr	r1, [r3, #20]
 8006e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e16:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e1a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e1e:	6800      	ldr	r0, [r0, #0]
 8006e20:	f000 ff20 	bl	8007c64 <USB_WritePMA>
 8006e24:	e0ca      	b.n	8006fbc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	785b      	ldrb	r3, [r3, #1]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d177      	bne.n	8006f26 <USB_EPStartXfer+0xc98>
 8006e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	461a      	mov	r2, r3
 8006e54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e56:	4413      	add	r3, r2
 8006e58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	00da      	lsls	r2, r3, #3
 8006e68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e80:	801a      	strh	r2, [r3, #0]
 8006e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e86:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e88:	d921      	bls.n	8006ece <USB_EPStartXfer+0xc40>
 8006e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8e:	095b      	lsrs	r3, r3, #5
 8006e90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e98:	f003 031f 	and.w	r3, r3, #31
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <USB_EPStartXfer+0xc1c>
 8006ea0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006eaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	029b      	lsls	r3, r3, #10
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	e05c      	b.n	8006f88 <USB_EPStartXfer+0xcfa>
 8006ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10a      	bne.n	8006eec <USB_EPStartXfer+0xc5e>
 8006ed6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ee8:	801a      	strh	r2, [r3, #0]
 8006eea:	e04d      	b.n	8006f88 <USB_EPStartXfer+0xcfa>
 8006eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef0:	085b      	lsrs	r3, r3, #1
 8006ef2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d004      	beq.n	8006f0c <USB_EPStartXfer+0xc7e>
 8006f02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f06:	3301      	adds	r3, #1
 8006f08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	029b      	lsls	r3, r3, #10
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f22:	801a      	strh	r2, [r3, #0]
 8006f24:	e030      	b.n	8006f88 <USB_EPStartXfer+0xcfa>
 8006f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	785b      	ldrb	r3, [r3, #1]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d128      	bne.n	8006f88 <USB_EPStartXfer+0xcfa>
 8006f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	00da      	lsls	r2, r3, #3
 8006f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f72:	4413      	add	r3, r2
 8006f74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	891b      	ldrh	r3, [r3, #8]
 8006f94:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6959      	ldr	r1, [r3, #20]
 8006fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006fae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006fb2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006fb6:	6800      	ldr	r0, [r0, #0]
 8006fb8:	f000 fe54 	bl	8007c64 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fe2:	817b      	strh	r3, [r7, #10]
 8006fe4:	897b      	ldrh	r3, [r7, #10]
 8006fe6:	f083 0310 	eor.w	r3, r3, #16
 8006fea:	817b      	strh	r3, [r7, #10]
 8006fec:	897b      	ldrh	r3, [r7, #10]
 8006fee:	f083 0320 	eor.w	r3, r3, #32
 8006ff2:	817b      	strh	r3, [r7, #10]
 8006ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	441a      	add	r2, r3
 800700e:	897b      	ldrh	r3, [r7, #10]
 8007010:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007014:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800701c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007020:	b29b      	uxth	r3, r3
 8007022:	8013      	strh	r3, [r2, #0]
 8007024:	f000 bcde 	b.w	80079e4 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	7b1b      	ldrb	r3, [r3, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f040 80bb 	bne.w	80071b0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800703a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	429a      	cmp	r2, r3
 8007054:	d917      	bls.n	8007086 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800705a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699a      	ldr	r2, [r3, #24]
 8007072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007076:	1ad2      	subs	r2, r2, r3
 8007078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	619a      	str	r2, [r3, #24]
 8007084:	e00e      	b.n	80070a4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2200      	movs	r2, #0
 80070a2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80070a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	461a      	mov	r2, r3
 80070c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070c8:	4413      	add	r3, r2
 80070ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	00da      	lsls	r2, r3, #3
 80070dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070e0:	4413      	add	r3, r2
 80070e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070fc:	801a      	strh	r2, [r3, #0]
 80070fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007102:	2b3e      	cmp	r3, #62	@ 0x3e
 8007104:	d924      	bls.n	8007150 <USB_EPStartXfer+0xec2>
 8007106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710a:	095b      	lsrs	r3, r3, #5
 800710c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007114:	f003 031f 	and.w	r3, r3, #31
 8007118:	2b00      	cmp	r3, #0
 800711a:	d104      	bne.n	8007126 <USB_EPStartXfer+0xe98>
 800711c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007120:	3b01      	subs	r3, #1
 8007122:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	b29a      	uxth	r2, r3
 800712e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007132:	b29b      	uxth	r3, r3
 8007134:	029b      	lsls	r3, r3, #10
 8007136:	b29b      	uxth	r3, r3
 8007138:	4313      	orrs	r3, r2
 800713a:	b29b      	uxth	r3, r3
 800713c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007144:	b29a      	uxth	r2, r3
 8007146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800714a:	801a      	strh	r2, [r3, #0]
 800714c:	f000 bc10 	b.w	8007970 <USB_EPStartXfer+0x16e2>
 8007150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10c      	bne.n	8007172 <USB_EPStartXfer+0xee4>
 8007158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	b29b      	uxth	r3, r3
 8007160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007168:	b29a      	uxth	r2, r3
 800716a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800716e:	801a      	strh	r2, [r3, #0]
 8007170:	e3fe      	b.n	8007970 <USB_EPStartXfer+0x16e2>
 8007172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007176:	085b      	lsrs	r3, r3, #1
 8007178:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800717c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	d004      	beq.n	8007192 <USB_EPStartXfer+0xf04>
 8007188:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800718c:	3301      	adds	r3, #1
 800718e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	b29a      	uxth	r2, r3
 800719a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800719e:	b29b      	uxth	r3, r3
 80071a0:	029b      	lsls	r3, r3, #10
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	4313      	orrs	r3, r2
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071ac:	801a      	strh	r2, [r3, #0]
 80071ae:	e3df      	b.n	8007970 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80071b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	78db      	ldrb	r3, [r3, #3]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	f040 8218 	bne.w	80075f2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80071c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	785b      	ldrb	r3, [r3, #1]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f040 809d 	bne.w	800730e <USB_EPStartXfer+0x1080>
 80071d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	461a      	mov	r2, r3
 80071f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071f8:	4413      	add	r3, r2
 80071fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	00da      	lsls	r2, r3, #3
 800720c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007210:	4413      	add	r3, r2
 8007212:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007216:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800721a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29b      	uxth	r3, r3
 8007222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007226:	b29a      	uxth	r2, r3
 8007228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800722c:	801a      	strh	r2, [r3, #0]
 800722e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b3e      	cmp	r3, #62	@ 0x3e
 800723c:	d92b      	bls.n	8007296 <USB_EPStartXfer+0x1008>
 800723e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	095b      	lsrs	r3, r3, #5
 800724c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <USB_EPStartXfer+0xfe0>
 8007264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007268:	3b01      	subs	r3, #1
 800726a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800726e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	b29a      	uxth	r2, r3
 8007276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800727a:	b29b      	uxth	r3, r3
 800727c:	029b      	lsls	r3, r3, #10
 800727e:	b29b      	uxth	r3, r3
 8007280:	4313      	orrs	r3, r2
 8007282:	b29b      	uxth	r3, r3
 8007284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800728c:	b29a      	uxth	r2, r3
 800728e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007292:	801a      	strh	r2, [r3, #0]
 8007294:	e070      	b.n	8007378 <USB_EPStartXfer+0x10ea>
 8007296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10c      	bne.n	80072c0 <USB_EPStartXfer+0x1032>
 80072a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072bc:	801a      	strh	r2, [r3, #0]
 80072be:	e05b      	b.n	8007378 <USB_EPStartXfer+0x10ea>
 80072c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	085b      	lsrs	r3, r3, #1
 80072ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <USB_EPStartXfer+0x1062>
 80072e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ea:	3301      	adds	r3, #1
 80072ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	029b      	lsls	r3, r3, #10
 8007300:	b29b      	uxth	r3, r3
 8007302:	4313      	orrs	r3, r2
 8007304:	b29a      	uxth	r2, r3
 8007306:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800730a:	801a      	strh	r2, [r3, #0]
 800730c:	e034      	b.n	8007378 <USB_EPStartXfer+0x10ea>
 800730e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d12c      	bne.n	8007378 <USB_EPStartXfer+0x10ea>
 800731e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800732c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007330:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800733a:	b29b      	uxth	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007342:	4413      	add	r3, r2
 8007344:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	00da      	lsls	r2, r3, #3
 8007356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800735a:	4413      	add	r3, r2
 800735c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007360:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	b29a      	uxth	r2, r3
 8007372:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007376:	801a      	strh	r2, [r3, #0]
 8007378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f040 809d 	bne.w	80074d2 <USB_EPStartXfer+0x1244>
 8007398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073bc:	4413      	add	r3, r2
 80073be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	00da      	lsls	r2, r3, #3
 80073d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073d4:	4413      	add	r3, r2
 80073d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80073da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073f0:	801a      	strh	r2, [r3, #0]
 80073f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8007400:	d92b      	bls.n	800745a <USB_EPStartXfer+0x11cc>
 8007402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f003 031f 	and.w	r3, r3, #31
 8007424:	2b00      	cmp	r3, #0
 8007426:	d104      	bne.n	8007432 <USB_EPStartXfer+0x11a4>
 8007428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800742c:	3b01      	subs	r3, #1
 800742e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007432:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29a      	uxth	r2, r3
 800743a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800743e:	b29b      	uxth	r3, r3
 8007440:	029b      	lsls	r3, r3, #10
 8007442:	b29b      	uxth	r3, r3
 8007444:	4313      	orrs	r3, r2
 8007446:	b29b      	uxth	r3, r3
 8007448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800744c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007450:	b29a      	uxth	r2, r3
 8007452:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007456:	801a      	strh	r2, [r3, #0]
 8007458:	e069      	b.n	800752e <USB_EPStartXfer+0x12a0>
 800745a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10c      	bne.n	8007484 <USB_EPStartXfer+0x11f6>
 800746a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747a:	b29a      	uxth	r2, r3
 800747c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	e054      	b.n	800752e <USB_EPStartXfer+0x12a0>
 8007484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	085b      	lsrs	r3, r3, #1
 8007492:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d004      	beq.n	80074b4 <USB_EPStartXfer+0x1226>
 80074aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ae:	3301      	adds	r3, #1
 80074b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	029b      	lsls	r3, r3, #10
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	4313      	orrs	r3, r2
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074ce:	801a      	strh	r2, [r3, #0]
 80074d0:	e02d      	b.n	800752e <USB_EPStartXfer+0x12a0>
 80074d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d125      	bne.n	800752e <USB_EPStartXfer+0x12a0>
 80074e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	461a      	mov	r2, r3
 80074f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80074f8:	4413      	add	r3, r2
 80074fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80074fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	00da      	lsls	r2, r3, #3
 800750c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007510:	4413      	add	r3, r2
 8007512:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007516:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800751a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	b29a      	uxth	r2, r3
 8007528:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800752c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800752e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 8218 	beq.w	8007970 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007544:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007560:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <USB_EPStartXfer+0x12ea>
 800756c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10d      	bne.n	8007594 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007578:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800757c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007580:	2b00      	cmp	r3, #0
 8007582:	f040 81f5 	bne.w	8007970 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007586:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800758a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	f040 81ee 	bne.w	8007970 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007598:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ba:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80075be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	441a      	add	r2, r3
 80075d8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80075dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	8013      	strh	r3, [r2, #0]
 80075f0:	e1be      	b.n	8007970 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80075f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	78db      	ldrb	r3, [r3, #3]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	f040 81b4 	bne.w	800796c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	699a      	ldr	r2, [r3, #24]
 8007610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	429a      	cmp	r2, r3
 800761e:	d917      	bls.n	8007650 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	699a      	ldr	r2, [r3, #24]
 800763c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007640:	1ad2      	subs	r2, r2, r3
 8007642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	619a      	str	r2, [r3, #24]
 800764e:	e00e      	b.n	800766e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2200      	movs	r2, #0
 800766c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800766e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	785b      	ldrb	r3, [r3, #1]
 800767a:	2b00      	cmp	r3, #0
 800767c:	f040 8085 	bne.w	800778a <USB_EPStartXfer+0x14fc>
 8007680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800768e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007692:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800769c:	b29b      	uxth	r3, r3
 800769e:	461a      	mov	r2, r3
 80076a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076a4:	4413      	add	r3, r2
 80076a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	00da      	lsls	r2, r3, #3
 80076b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076bc:	4413      	add	r3, r2
 80076be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076d8:	801a      	strh	r2, [r3, #0]
 80076da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076de:	2b3e      	cmp	r3, #62	@ 0x3e
 80076e0:	d923      	bls.n	800772a <USB_EPStartXfer+0x149c>
 80076e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e6:	095b      	lsrs	r3, r3, #5
 80076e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80076ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f0:	f003 031f 	and.w	r3, r3, #31
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d104      	bne.n	8007702 <USB_EPStartXfer+0x1474>
 80076f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076fc:	3b01      	subs	r3, #1
 80076fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007702:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29a      	uxth	r2, r3
 800770a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800770e:	b29b      	uxth	r3, r3
 8007710:	029b      	lsls	r3, r3, #10
 8007712:	b29b      	uxth	r3, r3
 8007714:	4313      	orrs	r3, r2
 8007716:	b29b      	uxth	r3, r3
 8007718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800771c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007720:	b29a      	uxth	r2, r3
 8007722:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007726:	801a      	strh	r2, [r3, #0]
 8007728:	e060      	b.n	80077ec <USB_EPStartXfer+0x155e>
 800772a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10c      	bne.n	800774c <USB_EPStartXfer+0x14be>
 8007732:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	b29b      	uxth	r3, r3
 800773a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800773e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007742:	b29a      	uxth	r2, r3
 8007744:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007748:	801a      	strh	r2, [r3, #0]
 800774a:	e04f      	b.n	80077ec <USB_EPStartXfer+0x155e>
 800774c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007750:	085b      	lsrs	r3, r3, #1
 8007752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <USB_EPStartXfer+0x14de>
 8007762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007766:	3301      	adds	r3, #1
 8007768:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800776c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	b29a      	uxth	r2, r3
 8007774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007778:	b29b      	uxth	r3, r3
 800777a:	029b      	lsls	r3, r3, #10
 800777c:	b29b      	uxth	r3, r3
 800777e:	4313      	orrs	r3, r2
 8007780:	b29a      	uxth	r2, r3
 8007782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007786:	801a      	strh	r2, [r3, #0]
 8007788:	e030      	b.n	80077ec <USB_EPStartXfer+0x155e>
 800778a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	785b      	ldrb	r3, [r3, #1]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d128      	bne.n	80077ec <USB_EPStartXfer+0x155e>
 800779a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800779e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80077a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077be:	4413      	add	r3, r2
 80077c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80077c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	00da      	lsls	r2, r3, #3
 80077d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077d6:	4413      	add	r3, r2
 80077d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80077dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80077ea:	801a      	strh	r2, [r3, #0]
 80077ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	785b      	ldrb	r3, [r3, #1]
 8007806:	2b00      	cmp	r3, #0
 8007808:	f040 8085 	bne.w	8007916 <USB_EPStartXfer+0x1688>
 800780c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007810:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800781a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007828:	b29b      	uxth	r3, r3
 800782a:	461a      	mov	r2, r3
 800782c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007830:	4413      	add	r3, r2
 8007832:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	00da      	lsls	r2, r3, #3
 8007844:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007848:	4413      	add	r3, r2
 800784a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800784e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007852:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	b29b      	uxth	r3, r3
 800785a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800785e:	b29a      	uxth	r2, r3
 8007860:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007864:	801a      	strh	r2, [r3, #0]
 8007866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786a:	2b3e      	cmp	r3, #62	@ 0x3e
 800786c:	d923      	bls.n	80078b6 <USB_EPStartXfer+0x1628>
 800786e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007872:	095b      	lsrs	r3, r3, #5
 8007874:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787c:	f003 031f 	and.w	r3, r3, #31
 8007880:	2b00      	cmp	r3, #0
 8007882:	d104      	bne.n	800788e <USB_EPStartXfer+0x1600>
 8007884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007888:	3b01      	subs	r3, #1
 800788a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800788e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29a      	uxth	r2, r3
 8007896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800789a:	b29b      	uxth	r3, r3
 800789c:	029b      	lsls	r3, r3, #10
 800789e:	b29b      	uxth	r3, r3
 80078a0:	4313      	orrs	r3, r2
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078b2:	801a      	strh	r2, [r3, #0]
 80078b4:	e05c      	b.n	8007970 <USB_EPStartXfer+0x16e2>
 80078b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10c      	bne.n	80078d8 <USB_EPStartXfer+0x164a>
 80078be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078d4:	801a      	strh	r2, [r3, #0]
 80078d6:	e04b      	b.n	8007970 <USB_EPStartXfer+0x16e2>
 80078d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078dc:	085b      	lsrs	r3, r3, #1
 80078de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <USB_EPStartXfer+0x166a>
 80078ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078f2:	3301      	adds	r3, #1
 80078f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29a      	uxth	r2, r3
 8007900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007904:	b29b      	uxth	r3, r3
 8007906:	029b      	lsls	r3, r3, #10
 8007908:	b29b      	uxth	r3, r3
 800790a:	4313      	orrs	r3, r2
 800790c:	b29a      	uxth	r2, r3
 800790e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007912:	801a      	strh	r2, [r3, #0]
 8007914:	e02c      	b.n	8007970 <USB_EPStartXfer+0x16e2>
 8007916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d124      	bne.n	8007970 <USB_EPStartXfer+0x16e2>
 8007926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007934:	b29b      	uxth	r3, r3
 8007936:	461a      	mov	r2, r3
 8007938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800793c:	4413      	add	r3, r2
 800793e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	00da      	lsls	r2, r3, #3
 8007950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007954:	4413      	add	r3, r2
 8007956:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800795a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800795e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007962:	b29a      	uxth	r2, r3
 8007964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007968:	801a      	strh	r2, [r3, #0]
 800796a:	e001      	b.n	8007970 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e03a      	b.n	80079e6 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007974:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	b29b      	uxth	r3, r3
 800798e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007996:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800799a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800799e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80079a2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80079a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80079aa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80079ae:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80079b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	441a      	add	r2, r3
 80079cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80079d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	785b      	ldrb	r3, [r3, #1]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d020      	beq.n	8007a44 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a18:	81bb      	strh	r3, [r7, #12]
 8007a1a:	89bb      	ldrh	r3, [r7, #12]
 8007a1c:	f083 0310 	eor.w	r3, r3, #16
 8007a20:	81bb      	strh	r3, [r7, #12]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	441a      	add	r2, r3
 8007a2c:	89bb      	ldrh	r3, [r7, #12]
 8007a2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	8013      	strh	r3, [r2, #0]
 8007a42:	e01f      	b.n	8007a84 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	881b      	ldrh	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a5a:	81fb      	strh	r3, [r7, #14]
 8007a5c:	89fb      	ldrh	r3, [r7, #14]
 8007a5e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a62:	81fb      	strh	r3, [r7, #14]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	441a      	add	r2, r3
 8007a6e:	89fb      	ldrh	r3, [r7, #14]
 8007a70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b087      	sub	sp, #28
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	7b1b      	ldrb	r3, [r3, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f040 809d 	bne.w	8007be0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d04c      	beq.n	8007b48 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	823b      	strh	r3, [r7, #16]
 8007abc:	8a3b      	ldrh	r3, [r7, #16]
 8007abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d01b      	beq.n	8007afe <USB_EPClearStall+0x6c>
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007adc:	81fb      	strh	r3, [r7, #14]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	441a      	add	r2, r3
 8007ae8:	89fb      	ldrh	r3, [r7, #14]
 8007aea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007af6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	78db      	ldrb	r3, [r3, #3]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d06c      	beq.n	8007be0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b1c:	81bb      	strh	r3, [r7, #12]
 8007b1e:	89bb      	ldrh	r3, [r7, #12]
 8007b20:	f083 0320 	eor.w	r3, r3, #32
 8007b24:	81bb      	strh	r3, [r7, #12]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	441a      	add	r2, r3
 8007b30:	89bb      	ldrh	r3, [r7, #12]
 8007b32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	8013      	strh	r3, [r2, #0]
 8007b46:	e04b      	b.n	8007be0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	82fb      	strh	r3, [r7, #22]
 8007b56:	8afb      	ldrh	r3, [r7, #22]
 8007b58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d01b      	beq.n	8007b98 <USB_EPClearStall+0x106>
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b76:	82bb      	strh	r3, [r7, #20]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	441a      	add	r2, r3
 8007b82:	8abb      	ldrh	r3, [r7, #20]
 8007b84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4413      	add	r3, r2
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bae:	827b      	strh	r3, [r7, #18]
 8007bb0:	8a7b      	ldrh	r3, [r7, #18]
 8007bb2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007bb6:	827b      	strh	r3, [r7, #18]
 8007bb8:	8a7b      	ldrh	r3, [r7, #18]
 8007bba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007bbe:	827b      	strh	r3, [r7, #18]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	441a      	add	r2, r3
 8007bca:	8a7b      	ldrh	r3, [r7, #18]
 8007bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	371c      	adds	r7, #28
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b083      	sub	sp, #12
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d103      	bne.n	8007c08 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2280      	movs	r2, #128	@ 0x80
 8007c04:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c56:	68fb      	ldr	r3, [r7, #12]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b08b      	sub	sp, #44	@ 0x2c
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4611      	mov	r1, r2
 8007c70:	461a      	mov	r2, r3
 8007c72:	460b      	mov	r3, r1
 8007c74:	80fb      	strh	r3, [r7, #6]
 8007c76:	4613      	mov	r3, r2
 8007c78:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c7a:	88bb      	ldrh	r3, [r7, #4]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	085b      	lsrs	r3, r3, #1
 8007c80:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c8a:	88fa      	ldrh	r2, [r7, #6]
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c94:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c9a:	e01b      	b.n	8007cd4 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	021b      	lsls	r3, r3, #8
 8007caa:	b21a      	sxth	r2, r3
 8007cac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	b21b      	sxth	r3, r3
 8007cb4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	8a7a      	ldrh	r2, [r7, #18]
 8007cba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	3302      	adds	r3, #2
 8007cc0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e0      	bne.n	8007c9c <USB_WritePMA+0x38>
  }
}
 8007cda:	bf00      	nop
 8007cdc:	bf00      	nop
 8007cde:	372c      	adds	r7, #44	@ 0x2c
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b08b      	sub	sp, #44	@ 0x2c
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	80fb      	strh	r3, [r7, #6]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007cfe:	88bb      	ldrh	r3, [r7, #4]
 8007d00:	085b      	lsrs	r3, r3, #1
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d0e:	88fa      	ldrh	r2, [r7, #6]
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d18:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d1e:	e018      	b.n	8007d52 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	3302      	adds	r3, #2
 8007d2c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	0a1b      	lsrs	r3, r3, #8
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e3      	bne.n	8007d20 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007d58:	88bb      	ldrh	r3, [r7, #4]
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d007      	beq.n	8007d74 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	701a      	strb	r2, [r3, #0]
  }
}
 8007d74:	bf00      	nop
 8007d76:	372c      	adds	r7, #44	@ 0x2c
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d8c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007d90:	f005 fd82 	bl	800d898 <USBD_static_malloc>
 8007d94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d105      	bne.n	8007da8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007da4:	2302      	movs	r3, #2
 8007da6:	e066      	b.n	8007e76 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	7c1b      	ldrb	r3, [r3, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d119      	bne.n	8007dec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007db8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	2181      	movs	r1, #129	@ 0x81
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f005 fc10 	bl	800d5e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007dcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f005 fc06 	bl	800d5e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2210      	movs	r2, #16
 8007de6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8007dea:	e016      	b.n	8007e1a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007dec:	2340      	movs	r3, #64	@ 0x40
 8007dee:	2202      	movs	r2, #2
 8007df0:	2181      	movs	r1, #129	@ 0x81
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f005 fbf7 	bl	800d5e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007dfe:	2340      	movs	r3, #64	@ 0x40
 8007e00:	2202      	movs	r2, #2
 8007e02:	2101      	movs	r1, #1
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f005 fbee 	bl	800d5e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2210      	movs	r2, #16
 8007e16:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e1a:	2308      	movs	r3, #8
 8007e1c:	2203      	movs	r2, #3
 8007e1e:	2182      	movs	r1, #130	@ 0x82
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f005 fbe0 	bl	800d5e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	7c1b      	ldrb	r3, [r3, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d109      	bne.n	8007e64 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f005 fcb1 	bl	800d7c4 <USBD_LL_PrepareReceive>
 8007e62:	e007      	b.n	8007e74 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e6a:	2340      	movs	r3, #64	@ 0x40
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f005 fca8 	bl	800d7c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e8a:	2181      	movs	r1, #129	@ 0x81
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f005 fbd0 	bl	800d632 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e98:	2101      	movs	r1, #1
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f005 fbc9 	bl	800d632 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007ea8:	2182      	movs	r1, #130	@ 0x82
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f005 fbc1 	bl	800d632 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00e      	beq.n	8007ee8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007eda:	4618      	mov	r0, r3
 8007edc:	f005 fcea 	bl	800d8b4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e0af      	b.n	800807c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d03f      	beq.n	8007fa8 <USBD_CDC_Setup+0xb4>
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	f040 809f 	bne.w	800806c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	88db      	ldrh	r3, [r3, #6]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d02e      	beq.n	8007f94 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	b25b      	sxtb	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	da16      	bge.n	8007f6e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007f4c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	88d2      	ldrh	r2, [r2, #6]
 8007f52:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	88db      	ldrh	r3, [r3, #6]
 8007f58:	2b07      	cmp	r3, #7
 8007f5a:	bf28      	it	cs
 8007f5c:	2307      	movcs	r3, #7
 8007f5e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	89fa      	ldrh	r2, [r7, #14]
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 facd 	bl	8009506 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007f6c:	e085      	b.n	800807a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	785a      	ldrb	r2, [r3, #1]
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	88db      	ldrh	r3, [r3, #6]
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007f84:	6939      	ldr	r1, [r7, #16]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	88db      	ldrh	r3, [r3, #6]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 fae6 	bl	800955e <USBD_CtlPrepareRx>
      break;
 8007f92:	e072      	b.n	800807a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	7850      	ldrb	r0, [r2, #1]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	4798      	blx	r3
      break;
 8007fa6:	e068      	b.n	800807a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	2b0b      	cmp	r3, #11
 8007fae:	d852      	bhi.n	8008056 <USBD_CDC_Setup+0x162>
 8007fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb8 <USBD_CDC_Setup+0xc4>)
 8007fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb6:	bf00      	nop
 8007fb8:	08007fe9 	.word	0x08007fe9
 8007fbc:	08008065 	.word	0x08008065
 8007fc0:	08008057 	.word	0x08008057
 8007fc4:	08008057 	.word	0x08008057
 8007fc8:	08008057 	.word	0x08008057
 8007fcc:	08008057 	.word	0x08008057
 8007fd0:	08008057 	.word	0x08008057
 8007fd4:	08008057 	.word	0x08008057
 8007fd8:	08008057 	.word	0x08008057
 8007fdc:	08008057 	.word	0x08008057
 8007fe0:	08008013 	.word	0x08008013
 8007fe4:	0800803d 	.word	0x0800803d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b03      	cmp	r3, #3
 8007ff2:	d107      	bne.n	8008004 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ff4:	f107 030a 	add.w	r3, r7, #10
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 fa82 	bl	8009506 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008002:	e032      	b.n	800806a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 fa0c 	bl	8009424 <USBD_CtlError>
            ret = USBD_FAIL;
 800800c:	2303      	movs	r3, #3
 800800e:	75fb      	strb	r3, [r7, #23]
          break;
 8008010:	e02b      	b.n	800806a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b03      	cmp	r3, #3
 800801c:	d107      	bne.n	800802e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800801e:	f107 030d 	add.w	r3, r7, #13
 8008022:	2201      	movs	r2, #1
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 fa6d 	bl	8009506 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800802c:	e01d      	b.n	800806a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 f9f7 	bl	8009424 <USBD_CtlError>
            ret = USBD_FAIL;
 8008036:	2303      	movs	r3, #3
 8008038:	75fb      	strb	r3, [r7, #23]
          break;
 800803a:	e016      	b.n	800806a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b03      	cmp	r3, #3
 8008046:	d00f      	beq.n	8008068 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 f9ea 	bl	8009424 <USBD_CtlError>
            ret = USBD_FAIL;
 8008050:	2303      	movs	r3, #3
 8008052:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008054:	e008      	b.n	8008068 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f001 f9e3 	bl	8009424 <USBD_CtlError>
          ret = USBD_FAIL;
 800805e:	2303      	movs	r3, #3
 8008060:	75fb      	strb	r3, [r7, #23]
          break;
 8008062:	e002      	b.n	800806a <USBD_CDC_Setup+0x176>
          break;
 8008064:	bf00      	nop
 8008066:	e008      	b.n	800807a <USBD_CDC_Setup+0x186>
          break;
 8008068:	bf00      	nop
      }
      break;
 800806a:	e006      	b.n	800807a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 f9d8 	bl	8009424 <USBD_CtlError>
      ret = USBD_FAIL;
 8008074:	2303      	movs	r3, #3
 8008076:	75fb      	strb	r3, [r7, #23]
      break;
 8008078:	bf00      	nop
  }

  return (uint8_t)ret;
 800807a:	7dfb      	ldrb	r3, [r7, #23]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3718      	adds	r7, #24
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	460b      	mov	r3, r1
 800808e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008096:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e04f      	b.n	8008146 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80080ae:	78fa      	ldrb	r2, [r7, #3]
 80080b0:	6879      	ldr	r1, [r7, #4]
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	440b      	add	r3, r1
 80080bc:	3318      	adds	r3, #24
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d029      	beq.n	8008118 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80080c4:	78fa      	ldrb	r2, [r7, #3]
 80080c6:	6879      	ldr	r1, [r7, #4]
 80080c8:	4613      	mov	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	440b      	add	r3, r1
 80080d2:	3318      	adds	r3, #24
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	78f9      	ldrb	r1, [r7, #3]
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	460b      	mov	r3, r1
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	440b      	add	r3, r1
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	4403      	add	r3, r0
 80080e4:	3320      	adds	r3, #32
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80080ec:	fb01 f303 	mul.w	r3, r1, r3
 80080f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d110      	bne.n	8008118 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80080f6:	78fa      	ldrb	r2, [r7, #3]
 80080f8:	6879      	ldr	r1, [r7, #4]
 80080fa:	4613      	mov	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	440b      	add	r3, r1
 8008104:	3318      	adds	r3, #24
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800810a:	78f9      	ldrb	r1, [r7, #3]
 800810c:	2300      	movs	r3, #0
 800810e:	2200      	movs	r2, #0
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f005 fb36 	bl	800d782 <USBD_LL_Transmit>
 8008116:	e015      	b.n	8008144 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2200      	movs	r2, #0
 800811c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00b      	beq.n	8008144 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008140:	78fa      	ldrb	r2, [r7, #3]
 8008142:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008160:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800816c:	2303      	movs	r3, #3
 800816e:	e015      	b.n	800819c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f005 fb46 	bl	800d806 <USBD_LL_GetRxDataSize>
 800817a:	4602      	mov	r2, r0
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008196:	4611      	mov	r1, r2
 8008198:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e01a      	b.n	80081f4 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d014      	beq.n	80081f2 <USBD_CDC_EP0_RxReady+0x4e>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80081ce:	2bff      	cmp	r3, #255	@ 0xff
 80081d0:	d00f      	beq.n	80081f2 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 80081e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	22ff      	movs	r2, #255	@ 0xff
 80081ee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2243      	movs	r2, #67	@ 0x43
 8008208:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800820a:	4b03      	ldr	r3, [pc, #12]	@ (8008218 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800820c:	4618      	mov	r0, r3
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr
 8008218:	20000094 	.word	0x20000094

0800821c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2243      	movs	r2, #67	@ 0x43
 8008228:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800822a:	4b03      	ldr	r3, [pc, #12]	@ (8008238 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800822c:	4618      	mov	r0, r3
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	20000050 	.word	0x20000050

0800823c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2243      	movs	r2, #67	@ 0x43
 8008248:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800824a:	4b03      	ldr	r3, [pc, #12]	@ (8008258 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800824c:	4618      	mov	r0, r3
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	200000d8 	.word	0x200000d8

0800825c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	220a      	movs	r2, #10
 8008268:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800826a:	4b03      	ldr	r3, [pc, #12]	@ (8008278 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800826c:	4618      	mov	r0, r3
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	2000000c 	.word	0x2000000c

0800827c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800828c:	2303      	movs	r3, #3
 800828e:	e004      	b.n	800829a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b087      	sub	sp, #28
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	60f8      	str	r0, [r7, #12]
 80082ae:	60b9      	str	r1, [r7, #8]
 80082b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082b8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d101      	bne.n	80082c4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e008      	b.n	80082d6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	371c      	adds	r7, #28
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b085      	sub	sp, #20
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e004      	b.n	8008308 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008322:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008324:	2301      	movs	r3, #1
 8008326:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008332:	2303      	movs	r3, #3
 8008334:	e01a      	b.n	800836c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800833c:	2b00      	cmp	r3, #0
 800833e:	d114      	bne.n	800836a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2201      	movs	r2, #1
 8008344:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800835e:	2181      	movs	r1, #129	@ 0x81
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f005 fa0e 	bl	800d782 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800836a:	7bfb      	ldrb	r3, [r7, #15]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008382:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800838e:	2303      	movs	r3, #3
 8008390:	e016      	b.n	80083c0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	7c1b      	ldrb	r3, [r3, #16]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d109      	bne.n	80083ae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083a4:	2101      	movs	r1, #1
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f005 fa0c 	bl	800d7c4 <USBD_LL_PrepareReceive>
 80083ac:	e007      	b.n	80083be <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083b4:	2340      	movs	r3, #64	@ 0x40
 80083b6:	2101      	movs	r1, #1
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f005 fa03 	bl	800d7c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	4613      	mov	r3, r2
 80083d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80083dc:	2303      	movs	r3, #3
 80083de:	e01f      	b.n	8008420 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	79fa      	ldrb	r2, [r7, #7]
 8008412:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f005 f86b 	bl	800d4f0 <USBD_LL_Init>
 800841a:	4603      	mov	r3, r0
 800841c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800841e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800843c:	2303      	movs	r3, #3
 800843e:	e016      	b.n	800846e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800844e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00b      	beq.n	800846c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800845a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845c:	f107 020e 	add.w	r2, r7, #14
 8008460:	4610      	mov	r0, r2
 8008462:	4798      	blx	r3
 8008464:	4602      	mov	r2, r0
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f005 f896 	bl	800d5b0 <USBD_LL_Start>
 8008484:	4603      	mov	r3, r0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80084b0:	2303      	movs	r3, #3
 80084b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d009      	beq.n	80084d2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	78fa      	ldrb	r2, [r7, #3]
 80084c8:	4611      	mov	r1, r2
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	4798      	blx	r3
 80084ce:	4603      	mov	r3, r0
 80084d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d007      	beq.n	8008502 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	78fa      	ldrb	r2, [r7, #3]
 80084fc:	4611      	mov	r1, r2
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	4798      	blx	r3
  }

  return USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 ff46 	bl	80093b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008532:	461a      	mov	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008540:	f003 031f 	and.w	r3, r3, #31
 8008544:	2b02      	cmp	r3, #2
 8008546:	d01a      	beq.n	800857e <USBD_LL_SetupStage+0x72>
 8008548:	2b02      	cmp	r3, #2
 800854a:	d822      	bhi.n	8008592 <USBD_LL_SetupStage+0x86>
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <USBD_LL_SetupStage+0x4a>
 8008550:	2b01      	cmp	r3, #1
 8008552:	d00a      	beq.n	800856a <USBD_LL_SetupStage+0x5e>
 8008554:	e01d      	b.n	8008592 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f9ee 	bl	8008940 <USBD_StdDevReq>
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]
      break;
 8008568:	e020      	b.n	80085ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fa52 	bl	8008a1c <USBD_StdItfReq>
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]
      break;
 800857c:	e016      	b.n	80085ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fa91 	bl	8008aae <USBD_StdEPReq>
 800858c:	4603      	mov	r3, r0
 800858e:	73fb      	strb	r3, [r7, #15]
      break;
 8008590:	e00c      	b.n	80085ac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008598:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800859c:	b2db      	uxtb	r3, r3
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f005 f865 	bl	800d670 <USBD_LL_StallEP>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73fb      	strb	r3, [r7, #15]
      break;
 80085aa:	bf00      	nop
  }

  return ret;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b086      	sub	sp, #24
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	460b      	mov	r3, r1
 80085c0:	607a      	str	r2, [r7, #4]
 80085c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80085c4:	7afb      	ldrb	r3, [r7, #11]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d138      	bne.n	800863c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80085d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d14a      	bne.n	8008672 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d913      	bls.n	8008610 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	1ad2      	subs	r2, r2, r3
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	4293      	cmp	r3, r2
 8008600:	bf28      	it	cs
 8008602:	4613      	movcs	r3, r2
 8008604:	461a      	mov	r2, r3
 8008606:	6879      	ldr	r1, [r7, #4]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 ffc5 	bl	8009598 <USBD_CtlContinueRx>
 800860e:	e030      	b.n	8008672 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b03      	cmp	r3, #3
 800861a:	d10b      	bne.n	8008634 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d005      	beq.n	8008634 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f000 ffc0 	bl	80095ba <USBD_CtlSendStatus>
 800863a:	e01a      	b.n	8008672 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b03      	cmp	r3, #3
 8008646:	d114      	bne.n	8008672 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00e      	beq.n	8008672 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	7afa      	ldrb	r2, [r7, #11]
 800865e:	4611      	mov	r1, r2
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	4798      	blx	r3
 8008664:	4603      	mov	r3, r0
 8008666:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800866e:	7dfb      	ldrb	r3, [r7, #23]
 8008670:	e000      	b.n	8008674 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	460b      	mov	r3, r1
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800868a:	7afb      	ldrb	r3, [r7, #11]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d16b      	bne.n	8008768 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3314      	adds	r3, #20
 8008694:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800869c:	2b02      	cmp	r3, #2
 800869e:	d156      	bne.n	800874e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	689a      	ldr	r2, [r3, #8]
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d914      	bls.n	80086d6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	1ad2      	subs	r2, r2, r3
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	461a      	mov	r2, r3
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f000 ff3a 	bl	800953c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086c8:	2300      	movs	r3, #0
 80086ca:	2200      	movs	r2, #0
 80086cc:	2100      	movs	r1, #0
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f005 f878 	bl	800d7c4 <USBD_LL_PrepareReceive>
 80086d4:	e03b      	b.n	800874e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d11c      	bne.n	800871c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d316      	bcc.n	800871c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d20f      	bcs.n	800871c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086fc:	2200      	movs	r2, #0
 80086fe:	2100      	movs	r1, #0
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 ff1b 	bl	800953c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800870e:	2300      	movs	r3, #0
 8008710:	2200      	movs	r2, #0
 8008712:	2100      	movs	r1, #0
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f005 f855 	bl	800d7c4 <USBD_LL_PrepareReceive>
 800871a:	e018      	b.n	800874e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b03      	cmp	r3, #3
 8008726:	d10b      	bne.n	8008740 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d005      	beq.n	8008740 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008740:	2180      	movs	r1, #128	@ 0x80
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f004 ff94 	bl	800d670 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 ff49 	bl	80095e0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008754:	2b01      	cmp	r3, #1
 8008756:	d122      	bne.n	800879e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f7ff fe98 	bl	800848e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008766:	e01a      	b.n	800879e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b03      	cmp	r3, #3
 8008772:	d114      	bne.n	800879e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00e      	beq.n	800879e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	7afa      	ldrb	r2, [r7, #11]
 800878a:	4611      	mov	r1, r2
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	4798      	blx	r3
 8008790:	4603      	mov	r3, r0
 8008792:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008794:	7dfb      	ldrb	r3, [r7, #23]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	e000      	b.n	80087a0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80087d8:	2303      	movs	r3, #3
 80087da:	e02f      	b.n	800883c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00f      	beq.n	8008806 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d009      	beq.n	8008806 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	6852      	ldr	r2, [r2, #4]
 80087fe:	b2d2      	uxtb	r2, r2
 8008800:	4611      	mov	r1, r2
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008806:	2340      	movs	r3, #64	@ 0x40
 8008808:	2200      	movs	r2, #0
 800880a:	2100      	movs	r1, #0
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f004 feea 	bl	800d5e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2240      	movs	r2, #64	@ 0x40
 800881e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008822:	2340      	movs	r3, #64	@ 0x40
 8008824:	2200      	movs	r2, #0
 8008826:	2180      	movs	r1, #128	@ 0x80
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f004 fedc 	bl	800d5e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2240      	movs	r2, #64	@ 0x40
 8008838:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	78fa      	ldrb	r2, [r7, #3]
 8008854:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008872:	b2da      	uxtb	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2204      	movs	r2, #4
 800887e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d106      	bne.n	80088b2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e012      	b.n	80088fc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d10b      	bne.n	80088fa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d005      	beq.n	80088fa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008904:	b480      	push	{r7}
 8008906:	b087      	sub	sp, #28
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	3301      	adds	r3, #1
 800891a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008922:	8a3b      	ldrh	r3, [r7, #16]
 8008924:	021b      	lsls	r3, r3, #8
 8008926:	b21a      	sxth	r2, r3
 8008928:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800892c:	4313      	orrs	r3, r2
 800892e:	b21b      	sxth	r3, r3
 8008930:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008932:	89fb      	ldrh	r3, [r7, #14]
}
 8008934:	4618      	mov	r0, r3
 8008936:	371c      	adds	r7, #28
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008956:	2b40      	cmp	r3, #64	@ 0x40
 8008958:	d005      	beq.n	8008966 <USBD_StdDevReq+0x26>
 800895a:	2b40      	cmp	r3, #64	@ 0x40
 800895c:	d853      	bhi.n	8008a06 <USBD_StdDevReq+0xc6>
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00b      	beq.n	800897a <USBD_StdDevReq+0x3a>
 8008962:	2b20      	cmp	r3, #32
 8008964:	d14f      	bne.n	8008a06 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	4798      	blx	r3
 8008974:	4603      	mov	r3, r0
 8008976:	73fb      	strb	r3, [r7, #15]
      break;
 8008978:	e04a      	b.n	8008a10 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	785b      	ldrb	r3, [r3, #1]
 800897e:	2b09      	cmp	r3, #9
 8008980:	d83b      	bhi.n	80089fa <USBD_StdDevReq+0xba>
 8008982:	a201      	add	r2, pc, #4	@ (adr r2, 8008988 <USBD_StdDevReq+0x48>)
 8008984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008988:	080089dd 	.word	0x080089dd
 800898c:	080089f1 	.word	0x080089f1
 8008990:	080089fb 	.word	0x080089fb
 8008994:	080089e7 	.word	0x080089e7
 8008998:	080089fb 	.word	0x080089fb
 800899c:	080089bb 	.word	0x080089bb
 80089a0:	080089b1 	.word	0x080089b1
 80089a4:	080089fb 	.word	0x080089fb
 80089a8:	080089d3 	.word	0x080089d3
 80089ac:	080089c5 	.word	0x080089c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f9de 	bl	8008d74 <USBD_GetDescriptor>
          break;
 80089b8:	e024      	b.n	8008a04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fb6d 	bl	800909c <USBD_SetAddress>
          break;
 80089c2:	e01f      	b.n	8008a04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fbac 	bl	8009124 <USBD_SetConfig>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73fb      	strb	r3, [r7, #15]
          break;
 80089d0:	e018      	b.n	8008a04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fc4b 	bl	8009270 <USBD_GetConfig>
          break;
 80089da:	e013      	b.n	8008a04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fc7c 	bl	80092dc <USBD_GetStatus>
          break;
 80089e4:	e00e      	b.n	8008a04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fcab 	bl	8009344 <USBD_SetFeature>
          break;
 80089ee:	e009      	b.n	8008a04 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fcba 	bl	800936c <USBD_ClrFeature>
          break;
 80089f8:	e004      	b.n	8008a04 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fd11 	bl	8009424 <USBD_CtlError>
          break;
 8008a02:	bf00      	nop
      }
      break;
 8008a04:	e004      	b.n	8008a10 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fd0b 	bl	8009424 <USBD_CtlError>
      break;
 8008a0e:	bf00      	nop
  }

  return ret;
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop

08008a1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a32:	2b40      	cmp	r3, #64	@ 0x40
 8008a34:	d005      	beq.n	8008a42 <USBD_StdItfReq+0x26>
 8008a36:	2b40      	cmp	r3, #64	@ 0x40
 8008a38:	d82f      	bhi.n	8008a9a <USBD_StdItfReq+0x7e>
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <USBD_StdItfReq+0x26>
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	d12b      	bne.n	8008a9a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d81d      	bhi.n	8008a8c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	889b      	ldrh	r3, [r3, #4]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d813      	bhi.n	8008a82 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	4798      	blx	r3
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	88db      	ldrh	r3, [r3, #6]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d110      	bne.n	8008a96 <USBD_StdItfReq+0x7a>
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10d      	bne.n	8008a96 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fd9d 	bl	80095ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a80:	e009      	b.n	8008a96 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fccd 	bl	8009424 <USBD_CtlError>
          break;
 8008a8a:	e004      	b.n	8008a96 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fcc8 	bl	8009424 <USBD_CtlError>
          break;
 8008a94:	e000      	b.n	8008a98 <USBD_StdItfReq+0x7c>
          break;
 8008a96:	bf00      	nop
      }
      break;
 8008a98:	e004      	b.n	8008aa4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fcc1 	bl	8009424 <USBD_CtlError>
      break;
 8008aa2:	bf00      	nop
  }

  return ret;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	889b      	ldrh	r3, [r3, #4]
 8008ac0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008aca:	2b40      	cmp	r3, #64	@ 0x40
 8008acc:	d007      	beq.n	8008ade <USBD_StdEPReq+0x30>
 8008ace:	2b40      	cmp	r3, #64	@ 0x40
 8008ad0:	f200 8145 	bhi.w	8008d5e <USBD_StdEPReq+0x2b0>
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00c      	beq.n	8008af2 <USBD_StdEPReq+0x44>
 8008ad8:	2b20      	cmp	r3, #32
 8008ada:	f040 8140 	bne.w	8008d5e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	4798      	blx	r3
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]
      break;
 8008af0:	e13a      	b.n	8008d68 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	785b      	ldrb	r3, [r3, #1]
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d007      	beq.n	8008b0a <USBD_StdEPReq+0x5c>
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	f300 8129 	bgt.w	8008d52 <USBD_StdEPReq+0x2a4>
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d07f      	beq.n	8008c04 <USBD_StdEPReq+0x156>
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d03c      	beq.n	8008b82 <USBD_StdEPReq+0xd4>
 8008b08:	e123      	b.n	8008d52 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d002      	beq.n	8008b1c <USBD_StdEPReq+0x6e>
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d016      	beq.n	8008b48 <USBD_StdEPReq+0x9a>
 8008b1a:	e02c      	b.n	8008b76 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00d      	beq.n	8008b3e <USBD_StdEPReq+0x90>
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
 8008b24:	2b80      	cmp	r3, #128	@ 0x80
 8008b26:	d00a      	beq.n	8008b3e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f004 fd9f 	bl	800d670 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b32:	2180      	movs	r1, #128	@ 0x80
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f004 fd9b 	bl	800d670 <USBD_LL_StallEP>
 8008b3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b3c:	e020      	b.n	8008b80 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fc6f 	bl	8009424 <USBD_CtlError>
              break;
 8008b46:	e01b      	b.n	8008b80 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	885b      	ldrh	r3, [r3, #2]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10e      	bne.n	8008b6e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00b      	beq.n	8008b6e <USBD_StdEPReq+0xc0>
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
 8008b58:	2b80      	cmp	r3, #128	@ 0x80
 8008b5a:	d008      	beq.n	8008b6e <USBD_StdEPReq+0xc0>
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	88db      	ldrh	r3, [r3, #6]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d104      	bne.n	8008b6e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f004 fd81 	bl	800d670 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fd23 	bl	80095ba <USBD_CtlSendStatus>

              break;
 8008b74:	e004      	b.n	8008b80 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fc53 	bl	8009424 <USBD_CtlError>
              break;
 8008b7e:	bf00      	nop
          }
          break;
 8008b80:	e0ec      	b.n	8008d5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d002      	beq.n	8008b94 <USBD_StdEPReq+0xe6>
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d016      	beq.n	8008bc0 <USBD_StdEPReq+0x112>
 8008b92:	e030      	b.n	8008bf6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00d      	beq.n	8008bb6 <USBD_StdEPReq+0x108>
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	2b80      	cmp	r3, #128	@ 0x80
 8008b9e:	d00a      	beq.n	8008bb6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f004 fd63 	bl	800d670 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008baa:	2180      	movs	r1, #128	@ 0x80
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f004 fd5f 	bl	800d670 <USBD_LL_StallEP>
 8008bb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bb4:	e025      	b.n	8008c02 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fc33 	bl	8009424 <USBD_CtlError>
              break;
 8008bbe:	e020      	b.n	8008c02 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	885b      	ldrh	r3, [r3, #2]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d11b      	bne.n	8008c00 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d004      	beq.n	8008bdc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f004 fd69 	bl	800d6ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fcec 	bl	80095ba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	4798      	blx	r3
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008bf4:	e004      	b.n	8008c00 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fc13 	bl	8009424 <USBD_CtlError>
              break;
 8008bfe:	e000      	b.n	8008c02 <USBD_StdEPReq+0x154>
              break;
 8008c00:	bf00      	nop
          }
          break;
 8008c02:	e0ab      	b.n	8008d5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d002      	beq.n	8008c16 <USBD_StdEPReq+0x168>
 8008c10:	2b03      	cmp	r3, #3
 8008c12:	d032      	beq.n	8008c7a <USBD_StdEPReq+0x1cc>
 8008c14:	e097      	b.n	8008d46 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d007      	beq.n	8008c2c <USBD_StdEPReq+0x17e>
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	2b80      	cmp	r3, #128	@ 0x80
 8008c20:	d004      	beq.n	8008c2c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fbfd 	bl	8009424 <USBD_CtlError>
                break;
 8008c2a:	e091      	b.n	8008d50 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	da0b      	bge.n	8008c4c <USBD_StdEPReq+0x19e>
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	3310      	adds	r3, #16
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	4413      	add	r3, r2
 8008c48:	3304      	adds	r3, #4
 8008c4a:	e00b      	b.n	8008c64 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	4413      	add	r3, r2
 8008c62:	3304      	adds	r3, #4
 8008c64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	4619      	mov	r1, r3
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fc47 	bl	8009506 <USBD_CtlSendData>
              break;
 8008c78:	e06a      	b.n	8008d50 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	da11      	bge.n	8008ca6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c82:	7bbb      	ldrb	r3, [r7, #14]
 8008c84:	f003 020f 	and.w	r2, r3, #15
 8008c88:	6879      	ldr	r1, [r7, #4]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	440b      	add	r3, r1
 8008c94:	3324      	adds	r3, #36	@ 0x24
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d117      	bne.n	8008ccc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fbc0 	bl	8009424 <USBD_CtlError>
                  break;
 8008ca4:	e054      	b.n	8008d50 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	f003 020f 	and.w	r2, r3, #15
 8008cac:	6879      	ldr	r1, [r7, #4]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	440b      	add	r3, r1
 8008cb8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d104      	bne.n	8008ccc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fbad 	bl	8009424 <USBD_CtlError>
                  break;
 8008cca:	e041      	b.n	8008d50 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	da0b      	bge.n	8008cec <USBD_StdEPReq+0x23e>
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
 8008cd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cda:	4613      	mov	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	3310      	adds	r3, #16
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	3304      	adds	r3, #4
 8008cea:	e00b      	b.n	8008d04 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	4413      	add	r3, r2
 8008d02:	3304      	adds	r3, #4
 8008d04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <USBD_StdEPReq+0x264>
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
 8008d0e:	2b80      	cmp	r3, #128	@ 0x80
 8008d10:	d103      	bne.n	8008d1a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	e00e      	b.n	8008d38 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f004 fce4 	bl	800d6ec <USBD_LL_IsStallEP>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]
 8008d30:	e002      	b.n	8008d38 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	2200      	movs	r2, #0
 8008d36:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fbe1 	bl	8009506 <USBD_CtlSendData>
              break;
 8008d44:	e004      	b.n	8008d50 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fb6b 	bl	8009424 <USBD_CtlError>
              break;
 8008d4e:	bf00      	nop
          }
          break;
 8008d50:	e004      	b.n	8008d5c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fb65 	bl	8009424 <USBD_CtlError>
          break;
 8008d5a:	bf00      	nop
      }
      break;
 8008d5c:	e004      	b.n	8008d68 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fb5f 	bl	8009424 <USBD_CtlError>
      break;
 8008d66:	bf00      	nop
  }

  return ret;
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	885b      	ldrh	r3, [r3, #2]
 8008d8e:	0a1b      	lsrs	r3, r3, #8
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	3b01      	subs	r3, #1
 8008d94:	2b0e      	cmp	r3, #14
 8008d96:	f200 8152 	bhi.w	800903e <USBD_GetDescriptor+0x2ca>
 8008d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008da0 <USBD_GetDescriptor+0x2c>)
 8008d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da0:	08008e11 	.word	0x08008e11
 8008da4:	08008e29 	.word	0x08008e29
 8008da8:	08008e69 	.word	0x08008e69
 8008dac:	0800903f 	.word	0x0800903f
 8008db0:	0800903f 	.word	0x0800903f
 8008db4:	08008fdf 	.word	0x08008fdf
 8008db8:	0800900b 	.word	0x0800900b
 8008dbc:	0800903f 	.word	0x0800903f
 8008dc0:	0800903f 	.word	0x0800903f
 8008dc4:	0800903f 	.word	0x0800903f
 8008dc8:	0800903f 	.word	0x0800903f
 8008dcc:	0800903f 	.word	0x0800903f
 8008dd0:	0800903f 	.word	0x0800903f
 8008dd4:	0800903f 	.word	0x0800903f
 8008dd8:	08008ddd 	.word	0x08008ddd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00b      	beq.n	8008e00 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dee:	69db      	ldr	r3, [r3, #28]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	7c12      	ldrb	r2, [r2, #16]
 8008df4:	f107 0108 	add.w	r1, r7, #8
 8008df8:	4610      	mov	r0, r2
 8008dfa:	4798      	blx	r3
 8008dfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dfe:	e126      	b.n	800904e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fb0e 	bl	8009424 <USBD_CtlError>
        err++;
 8008e08:	7afb      	ldrb	r3, [r7, #11]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	72fb      	strb	r3, [r7, #11]
      break;
 8008e0e:	e11e      	b.n	800904e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	7c12      	ldrb	r2, [r2, #16]
 8008e1c:	f107 0108 	add.w	r1, r7, #8
 8008e20:	4610      	mov	r0, r2
 8008e22:	4798      	blx	r3
 8008e24:	60f8      	str	r0, [r7, #12]
      break;
 8008e26:	e112      	b.n	800904e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	7c1b      	ldrb	r3, [r3, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10d      	bne.n	8008e4c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e38:	f107 0208 	add.w	r2, r7, #8
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	4798      	blx	r3
 8008e40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3301      	adds	r3, #1
 8008e46:	2202      	movs	r2, #2
 8008e48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e4a:	e100      	b.n	800904e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e54:	f107 0208 	add.w	r2, r7, #8
 8008e58:	4610      	mov	r0, r2
 8008e5a:	4798      	blx	r3
 8008e5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	3301      	adds	r3, #1
 8008e62:	2202      	movs	r2, #2
 8008e64:	701a      	strb	r2, [r3, #0]
      break;
 8008e66:	e0f2      	b.n	800904e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	885b      	ldrh	r3, [r3, #2]
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b05      	cmp	r3, #5
 8008e70:	f200 80ac 	bhi.w	8008fcc <USBD_GetDescriptor+0x258>
 8008e74:	a201      	add	r2, pc, #4	@ (adr r2, 8008e7c <USBD_GetDescriptor+0x108>)
 8008e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7a:	bf00      	nop
 8008e7c:	08008e95 	.word	0x08008e95
 8008e80:	08008ec9 	.word	0x08008ec9
 8008e84:	08008efd 	.word	0x08008efd
 8008e88:	08008f31 	.word	0x08008f31
 8008e8c:	08008f65 	.word	0x08008f65
 8008e90:	08008f99 	.word	0x08008f99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	7c12      	ldrb	r2, [r2, #16]
 8008eac:	f107 0108 	add.w	r1, r7, #8
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	4798      	blx	r3
 8008eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eb6:	e091      	b.n	8008fdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fab2 	bl	8009424 <USBD_CtlError>
            err++;
 8008ec0:	7afb      	ldrb	r3, [r7, #11]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ec6:	e089      	b.n	8008fdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	7c12      	ldrb	r2, [r2, #16]
 8008ee0:	f107 0108 	add.w	r1, r7, #8
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eea:	e077      	b.n	8008fdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa98 	bl	8009424 <USBD_CtlError>
            err++;
 8008ef4:	7afb      	ldrb	r3, [r7, #11]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8008efa:	e06f      	b.n	8008fdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	7c12      	ldrb	r2, [r2, #16]
 8008f14:	f107 0108 	add.w	r1, r7, #8
 8008f18:	4610      	mov	r0, r2
 8008f1a:	4798      	blx	r3
 8008f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f1e:	e05d      	b.n	8008fdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa7e 	bl	8009424 <USBD_CtlError>
            err++;
 8008f28:	7afb      	ldrb	r3, [r7, #11]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f2e:	e055      	b.n	8008fdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00b      	beq.n	8008f54 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	7c12      	ldrb	r2, [r2, #16]
 8008f48:	f107 0108 	add.w	r1, r7, #8
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4798      	blx	r3
 8008f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f52:	e043      	b.n	8008fdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fa64 	bl	8009424 <USBD_CtlError>
            err++;
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	72fb      	strb	r3, [r7, #11]
          break;
 8008f62:	e03b      	b.n	8008fdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00b      	beq.n	8008f88 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	7c12      	ldrb	r2, [r2, #16]
 8008f7c:	f107 0108 	add.w	r1, r7, #8
 8008f80:	4610      	mov	r0, r2
 8008f82:	4798      	blx	r3
 8008f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f86:	e029      	b.n	8008fdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fa4a 	bl	8009424 <USBD_CtlError>
            err++;
 8008f90:	7afb      	ldrb	r3, [r7, #11]
 8008f92:	3301      	adds	r3, #1
 8008f94:	72fb      	strb	r3, [r7, #11]
          break;
 8008f96:	e021      	b.n	8008fdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00b      	beq.n	8008fbc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	7c12      	ldrb	r2, [r2, #16]
 8008fb0:	f107 0108 	add.w	r1, r7, #8
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4798      	blx	r3
 8008fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fba:	e00f      	b.n	8008fdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fa30 	bl	8009424 <USBD_CtlError>
            err++;
 8008fc4:	7afb      	ldrb	r3, [r7, #11]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fca:	e007      	b.n	8008fdc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fa28 	bl	8009424 <USBD_CtlError>
          err++;
 8008fd4:	7afb      	ldrb	r3, [r7, #11]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008fda:	bf00      	nop
      }
      break;
 8008fdc:	e037      	b.n	800904e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	7c1b      	ldrb	r3, [r3, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d109      	bne.n	8008ffa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fee:	f107 0208 	add.w	r2, r7, #8
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	4798      	blx	r3
 8008ff6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ff8:	e029      	b.n	800904e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 fa11 	bl	8009424 <USBD_CtlError>
        err++;
 8009002:	7afb      	ldrb	r3, [r7, #11]
 8009004:	3301      	adds	r3, #1
 8009006:	72fb      	strb	r3, [r7, #11]
      break;
 8009008:	e021      	b.n	800904e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	7c1b      	ldrb	r3, [r3, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10d      	bne.n	800902e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800901a:	f107 0208 	add.w	r2, r7, #8
 800901e:	4610      	mov	r0, r2
 8009020:	4798      	blx	r3
 8009022:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3301      	adds	r3, #1
 8009028:	2207      	movs	r2, #7
 800902a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800902c:	e00f      	b.n	800904e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f9f7 	bl	8009424 <USBD_CtlError>
        err++;
 8009036:	7afb      	ldrb	r3, [r7, #11]
 8009038:	3301      	adds	r3, #1
 800903a:	72fb      	strb	r3, [r7, #11]
      break;
 800903c:	e007      	b.n	800904e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f9ef 	bl	8009424 <USBD_CtlError>
      err++;
 8009046:	7afb      	ldrb	r3, [r7, #11]
 8009048:	3301      	adds	r3, #1
 800904a:	72fb      	strb	r3, [r7, #11]
      break;
 800904c:	bf00      	nop
  }

  if (err != 0U)
 800904e:	7afb      	ldrb	r3, [r7, #11]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d11e      	bne.n	8009092 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	88db      	ldrh	r3, [r3, #6]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d016      	beq.n	800908a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800905c:	893b      	ldrh	r3, [r7, #8]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00e      	beq.n	8009080 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	88da      	ldrh	r2, [r3, #6]
 8009066:	893b      	ldrh	r3, [r7, #8]
 8009068:	4293      	cmp	r3, r2
 800906a:	bf28      	it	cs
 800906c:	4613      	movcs	r3, r2
 800906e:	b29b      	uxth	r3, r3
 8009070:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009072:	893b      	ldrh	r3, [r7, #8]
 8009074:	461a      	mov	r2, r3
 8009076:	68f9      	ldr	r1, [r7, #12]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fa44 	bl	8009506 <USBD_CtlSendData>
 800907e:	e009      	b.n	8009094 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f9ce 	bl	8009424 <USBD_CtlError>
 8009088:	e004      	b.n	8009094 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fa95 	bl	80095ba <USBD_CtlSendStatus>
 8009090:	e000      	b.n	8009094 <USBD_GetDescriptor+0x320>
    return;
 8009092:	bf00      	nop
  }
}
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop

0800909c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	889b      	ldrh	r3, [r3, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d131      	bne.n	8009112 <USBD_SetAddress+0x76>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	88db      	ldrh	r3, [r3, #6]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d12d      	bne.n	8009112 <USBD_SetAddress+0x76>
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	885b      	ldrh	r3, [r3, #2]
 80090ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80090bc:	d829      	bhi.n	8009112 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	885b      	ldrh	r3, [r3, #2]
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d104      	bne.n	80090e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f9a3 	bl	8009424 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090de:	e01d      	b.n	800911c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	7bfa      	ldrb	r2, [r7, #15]
 80090e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f004 fb29 	bl	800d744 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fa61 	bl	80095ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d004      	beq.n	8009108 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2202      	movs	r2, #2
 8009102:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009106:	e009      	b.n	800911c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009110:	e004      	b.n	800911c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f985 	bl	8009424 <USBD_CtlError>
  }
}
 800911a:	bf00      	nop
 800911c:	bf00      	nop
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	885b      	ldrh	r3, [r3, #2]
 8009136:	b2da      	uxtb	r2, r3
 8009138:	4b4c      	ldr	r3, [pc, #304]	@ (800926c <USBD_SetConfig+0x148>)
 800913a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800913c:	4b4b      	ldr	r3, [pc, #300]	@ (800926c <USBD_SetConfig+0x148>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d905      	bls.n	8009150 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f96c 	bl	8009424 <USBD_CtlError>
    return USBD_FAIL;
 800914c:	2303      	movs	r3, #3
 800914e:	e088      	b.n	8009262 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b02      	cmp	r3, #2
 800915a:	d002      	beq.n	8009162 <USBD_SetConfig+0x3e>
 800915c:	2b03      	cmp	r3, #3
 800915e:	d025      	beq.n	80091ac <USBD_SetConfig+0x88>
 8009160:	e071      	b.n	8009246 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009162:	4b42      	ldr	r3, [pc, #264]	@ (800926c <USBD_SetConfig+0x148>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d01c      	beq.n	80091a4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800916a:	4b40      	ldr	r3, [pc, #256]	@ (800926c <USBD_SetConfig+0x148>)
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	461a      	mov	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009174:	4b3d      	ldr	r3, [pc, #244]	@ (800926c <USBD_SetConfig+0x148>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff f992 	bl	80084a4 <USBD_SetClassConfig>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d004      	beq.n	8009194 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f949 	bl	8009424 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009192:	e065      	b.n	8009260 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fa10 	bl	80095ba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2203      	movs	r2, #3
 800919e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80091a2:	e05d      	b.n	8009260 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fa08 	bl	80095ba <USBD_CtlSendStatus>
      break;
 80091aa:	e059      	b.n	8009260 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80091ac:	4b2f      	ldr	r3, [pc, #188]	@ (800926c <USBD_SetConfig+0x148>)
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d112      	bne.n	80091da <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2202      	movs	r2, #2
 80091b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80091bc:	4b2b      	ldr	r3, [pc, #172]	@ (800926c <USBD_SetConfig+0x148>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	461a      	mov	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091c6:	4b29      	ldr	r3, [pc, #164]	@ (800926c <USBD_SetConfig+0x148>)
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f7ff f985 	bl	80084dc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f9f1 	bl	80095ba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091d8:	e042      	b.n	8009260 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80091da:	4b24      	ldr	r3, [pc, #144]	@ (800926c <USBD_SetConfig+0x148>)
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d02a      	beq.n	800923e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff f973 	bl	80084dc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80091f6:	4b1d      	ldr	r3, [pc, #116]	@ (800926c <USBD_SetConfig+0x148>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009200:	4b1a      	ldr	r3, [pc, #104]	@ (800926c <USBD_SetConfig+0x148>)
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7ff f94c 	bl	80084a4 <USBD_SetClassConfig>
 800920c:	4603      	mov	r3, r0
 800920e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00f      	beq.n	8009236 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f903 	bl	8009424 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff f958 	bl	80084dc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2202      	movs	r2, #2
 8009230:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009234:	e014      	b.n	8009260 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f9bf 	bl	80095ba <USBD_CtlSendStatus>
      break;
 800923c:	e010      	b.n	8009260 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f9bb 	bl	80095ba <USBD_CtlSendStatus>
      break;
 8009244:	e00c      	b.n	8009260 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f8eb 	bl	8009424 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800924e:	4b07      	ldr	r3, [pc, #28]	@ (800926c <USBD_SetConfig+0x148>)
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7ff f941 	bl	80084dc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800925a:	2303      	movs	r3, #3
 800925c:	73fb      	strb	r3, [r7, #15]
      break;
 800925e:	bf00      	nop
  }

  return ret;
 8009260:	7bfb      	ldrb	r3, [r7, #15]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	20000324 	.word	0x20000324

08009270 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	88db      	ldrh	r3, [r3, #6]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d004      	beq.n	800928c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f8cd 	bl	8009424 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800928a:	e023      	b.n	80092d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b02      	cmp	r3, #2
 8009296:	dc02      	bgt.n	800929e <USBD_GetConfig+0x2e>
 8009298:	2b00      	cmp	r3, #0
 800929a:	dc03      	bgt.n	80092a4 <USBD_GetConfig+0x34>
 800929c:	e015      	b.n	80092ca <USBD_GetConfig+0x5a>
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d00b      	beq.n	80092ba <USBD_GetConfig+0x4a>
 80092a2:	e012      	b.n	80092ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	3308      	adds	r3, #8
 80092ae:	2201      	movs	r2, #1
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f927 	bl	8009506 <USBD_CtlSendData>
        break;
 80092b8:	e00c      	b.n	80092d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	3304      	adds	r3, #4
 80092be:	2201      	movs	r2, #1
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f91f 	bl	8009506 <USBD_CtlSendData>
        break;
 80092c8:	e004      	b.n	80092d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f8a9 	bl	8009424 <USBD_CtlError>
        break;
 80092d2:	bf00      	nop
}
 80092d4:	bf00      	nop
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	3b01      	subs	r3, #1
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d81e      	bhi.n	8009332 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	88db      	ldrh	r3, [r3, #6]
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	d004      	beq.n	8009306 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f890 	bl	8009424 <USBD_CtlError>
        break;
 8009304:	e01a      	b.n	800933c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009312:	2b00      	cmp	r3, #0
 8009314:	d005      	beq.n	8009322 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	f043 0202 	orr.w	r2, r3, #2
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	330c      	adds	r3, #12
 8009326:	2202      	movs	r2, #2
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f8eb 	bl	8009506 <USBD_CtlSendData>
      break;
 8009330:	e004      	b.n	800933c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f875 	bl	8009424 <USBD_CtlError>
      break;
 800933a:	bf00      	nop
  }
}
 800933c:	bf00      	nop
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	885b      	ldrh	r3, [r3, #2]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d106      	bne.n	8009364 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f92b 	bl	80095ba <USBD_CtlSendStatus>
  }
}
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800937c:	b2db      	uxtb	r3, r3
 800937e:	3b01      	subs	r3, #1
 8009380:	2b02      	cmp	r3, #2
 8009382:	d80b      	bhi.n	800939c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	885b      	ldrh	r3, [r3, #2]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d10c      	bne.n	80093a6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f910 	bl	80095ba <USBD_CtlSendStatus>
      }
      break;
 800939a:	e004      	b.n	80093a6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f840 	bl	8009424 <USBD_CtlError>
      break;
 80093a4:	e000      	b.n	80093a8 <USBD_ClrFeature+0x3c>
      break;
 80093a6:	bf00      	nop
  }
}
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	781a      	ldrb	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3301      	adds	r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	781a      	ldrb	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	3301      	adds	r3, #1
 80093d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f7ff fa92 	bl	8008904 <SWAPBYTE>
 80093e0:	4603      	mov	r3, r0
 80093e2:	461a      	mov	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3301      	adds	r3, #1
 80093ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	3301      	adds	r3, #1
 80093f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f7ff fa85 	bl	8008904 <SWAPBYTE>
 80093fa:	4603      	mov	r3, r0
 80093fc:	461a      	mov	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3301      	adds	r3, #1
 8009406:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3301      	adds	r3, #1
 800940c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f7ff fa78 	bl	8008904 <SWAPBYTE>
 8009414:	4603      	mov	r3, r0
 8009416:	461a      	mov	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	80da      	strh	r2, [r3, #6]
}
 800941c:	bf00      	nop
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800942e:	2180      	movs	r1, #128	@ 0x80
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f004 f91d 	bl	800d670 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009436:	2100      	movs	r1, #0
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f004 f919 	bl	800d670 <USBD_LL_StallEP>
}
 800943e:	bf00      	nop
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b086      	sub	sp, #24
 800944a:	af00      	add	r7, sp, #0
 800944c:	60f8      	str	r0, [r7, #12]
 800944e:	60b9      	str	r1, [r7, #8]
 8009450:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d036      	beq.n	80094ca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009460:	6938      	ldr	r0, [r7, #16]
 8009462:	f000 f836 	bl	80094d2 <USBD_GetLen>
 8009466:	4603      	mov	r3, r0
 8009468:	3301      	adds	r3, #1
 800946a:	b29b      	uxth	r3, r3
 800946c:	005b      	lsls	r3, r3, #1
 800946e:	b29a      	uxth	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009474:	7dfb      	ldrb	r3, [r7, #23]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	4413      	add	r3, r2
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	7812      	ldrb	r2, [r2, #0]
 800947e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
 8009482:	3301      	adds	r3, #1
 8009484:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009486:	7dfb      	ldrb	r3, [r7, #23]
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	4413      	add	r3, r2
 800948c:	2203      	movs	r2, #3
 800948e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009490:	7dfb      	ldrb	r3, [r7, #23]
 8009492:	3301      	adds	r3, #1
 8009494:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009496:	e013      	b.n	80094c0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	4413      	add	r3, r2
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	7812      	ldrb	r2, [r2, #0]
 80094a2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	3301      	adds	r3, #1
 80094a8:	613b      	str	r3, [r7, #16]
    idx++;
 80094aa:	7dfb      	ldrb	r3, [r7, #23]
 80094ac:	3301      	adds	r3, #1
 80094ae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	4413      	add	r3, r2
 80094b6:	2200      	movs	r2, #0
 80094b8:	701a      	strb	r2, [r3, #0]
    idx++;
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	3301      	adds	r3, #1
 80094be:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1e7      	bne.n	8009498 <USBD_GetString+0x52>
 80094c8:	e000      	b.n	80094cc <USBD_GetString+0x86>
    return;
 80094ca:	bf00      	nop
  }
}
 80094cc:	3718      	adds	r7, #24
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b085      	sub	sp, #20
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80094e2:	e005      	b.n	80094f0 <USBD_GetLen+0x1e>
  {
    len++;
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	3301      	adds	r3, #1
 80094e8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	3301      	adds	r3, #1
 80094ee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1f5      	bne.n	80094e4 <USBD_GetLen+0x12>
  }

  return len;
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	60f8      	str	r0, [r7, #12]
 800950e:	60b9      	str	r1, [r7, #8]
 8009510:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2202      	movs	r2, #2
 8009516:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	2100      	movs	r1, #0
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f004 f928 	bl	800d782 <USBD_LL_Transmit>

  return USBD_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	2100      	movs	r1, #0
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f004 f917 	bl	800d782 <USBD_LL_Transmit>

  return USBD_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b084      	sub	sp, #16
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2203      	movs	r2, #3
 800956e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	2100      	movs	r1, #0
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f004 f91b 	bl	800d7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	2100      	movs	r1, #0
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f004 f90a 	bl	800d7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2204      	movs	r2, #4
 80095c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095ca:	2300      	movs	r3, #0
 80095cc:	2200      	movs	r2, #0
 80095ce:	2100      	movs	r1, #0
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f004 f8d6 	bl	800d782 <USBD_LL_Transmit>

  return USBD_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2205      	movs	r2, #5
 80095ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095f0:	2300      	movs	r3, #0
 80095f2:	2200      	movs	r2, #0
 80095f4:	2100      	movs	r1, #0
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f004 f8e4 	bl	800d7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
	...

08009608 <__NVIC_SetPriority>:
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	4603      	mov	r3, r0
 8009610:	6039      	str	r1, [r7, #0]
 8009612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009618:	2b00      	cmp	r3, #0
 800961a:	db0a      	blt.n	8009632 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	b2da      	uxtb	r2, r3
 8009620:	490c      	ldr	r1, [pc, #48]	@ (8009654 <__NVIC_SetPriority+0x4c>)
 8009622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009626:	0112      	lsls	r2, r2, #4
 8009628:	b2d2      	uxtb	r2, r2
 800962a:	440b      	add	r3, r1
 800962c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009630:	e00a      	b.n	8009648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	b2da      	uxtb	r2, r3
 8009636:	4908      	ldr	r1, [pc, #32]	@ (8009658 <__NVIC_SetPriority+0x50>)
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	f003 030f 	and.w	r3, r3, #15
 800963e:	3b04      	subs	r3, #4
 8009640:	0112      	lsls	r2, r2, #4
 8009642:	b2d2      	uxtb	r2, r2
 8009644:	440b      	add	r3, r1
 8009646:	761a      	strb	r2, [r3, #24]
}
 8009648:	bf00      	nop
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	e000e100 	.word	0xe000e100
 8009658:	e000ed00 	.word	0xe000ed00

0800965c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800965c:	b580      	push	{r7, lr}
 800965e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009660:	4b05      	ldr	r3, [pc, #20]	@ (8009678 <SysTick_Handler+0x1c>)
 8009662:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009664:	f002 fab4 	bl	800bbd0 <xTaskGetSchedulerState>
 8009668:	4603      	mov	r3, r0
 800966a:	2b01      	cmp	r3, #1
 800966c:	d001      	beq.n	8009672 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800966e:	f003 f9ab 	bl	800c9c8 <xPortSysTickHandler>
  }
}
 8009672:	bf00      	nop
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	e000e010 	.word	0xe000e010

0800967c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800967c:	b580      	push	{r7, lr}
 800967e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009680:	2100      	movs	r1, #0
 8009682:	f06f 0004 	mvn.w	r0, #4
 8009686:	f7ff ffbf 	bl	8009608 <__NVIC_SetPriority>
#endif
}
 800968a:	bf00      	nop
 800968c:	bd80      	pop	{r7, pc}
	...

08009690 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009696:	f3ef 8305 	mrs	r3, IPSR
 800969a:	603b      	str	r3, [r7, #0]
  return(result);
 800969c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80096a2:	f06f 0305 	mvn.w	r3, #5
 80096a6:	607b      	str	r3, [r7, #4]
 80096a8:	e00c      	b.n	80096c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80096aa:	4b0a      	ldr	r3, [pc, #40]	@ (80096d4 <osKernelInitialize+0x44>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d105      	bne.n	80096be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096b2:	4b08      	ldr	r3, [pc, #32]	@ (80096d4 <osKernelInitialize+0x44>)
 80096b4:	2201      	movs	r2, #1
 80096b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	607b      	str	r3, [r7, #4]
 80096bc:	e002      	b.n	80096c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80096be:	f04f 33ff 	mov.w	r3, #4294967295
 80096c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096c4:	687b      	ldr	r3, [r7, #4]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	20000328 	.word	0x20000328

080096d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096de:	f3ef 8305 	mrs	r3, IPSR
 80096e2:	603b      	str	r3, [r7, #0]
  return(result);
 80096e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80096ea:	f06f 0305 	mvn.w	r3, #5
 80096ee:	607b      	str	r3, [r7, #4]
 80096f0:	e010      	b.n	8009714 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80096f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009720 <osKernelStart+0x48>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d109      	bne.n	800970e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80096fa:	f7ff ffbf 	bl	800967c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80096fe:	4b08      	ldr	r3, [pc, #32]	@ (8009720 <osKernelStart+0x48>)
 8009700:	2202      	movs	r2, #2
 8009702:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009704:	f001 fe06 	bl	800b314 <vTaskStartScheduler>
      stat = osOK;
 8009708:	2300      	movs	r3, #0
 800970a:	607b      	str	r3, [r7, #4]
 800970c:	e002      	b.n	8009714 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800970e:	f04f 33ff 	mov.w	r3, #4294967295
 8009712:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009714:	687b      	ldr	r3, [r7, #4]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20000328 	.word	0x20000328

08009724 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009724:	b580      	push	{r7, lr}
 8009726:	b08e      	sub	sp, #56	@ 0x38
 8009728:	af04      	add	r7, sp, #16
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009730:	2300      	movs	r3, #0
 8009732:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009734:	f3ef 8305 	mrs	r3, IPSR
 8009738:	617b      	str	r3, [r7, #20]
  return(result);
 800973a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800973c:	2b00      	cmp	r3, #0
 800973e:	d17e      	bne.n	800983e <osThreadNew+0x11a>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d07b      	beq.n	800983e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009746:	2340      	movs	r3, #64	@ 0x40
 8009748:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800974a:	2318      	movs	r3, #24
 800974c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800974e:	2300      	movs	r3, #0
 8009750:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009752:	f04f 33ff 	mov.w	r3, #4294967295
 8009756:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d045      	beq.n	80097ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <osThreadNew+0x48>
        name = attr->name;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d008      	beq.n	8009792 <osThreadNew+0x6e>
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	2b38      	cmp	r3, #56	@ 0x38
 8009784:	d805      	bhi.n	8009792 <osThreadNew+0x6e>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <osThreadNew+0x72>
        return (NULL);
 8009792:	2300      	movs	r3, #0
 8009794:	e054      	b.n	8009840 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	089b      	lsrs	r3, r3, #2
 80097a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00e      	beq.n	80097cc <osThreadNew+0xa8>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	2b5b      	cmp	r3, #91	@ 0x5b
 80097b4:	d90a      	bls.n	80097cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d006      	beq.n	80097cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <osThreadNew+0xa8>
        mem = 1;
 80097c6:	2301      	movs	r3, #1
 80097c8:	61bb      	str	r3, [r7, #24]
 80097ca:	e010      	b.n	80097ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10c      	bne.n	80097ee <osThreadNew+0xca>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d108      	bne.n	80097ee <osThreadNew+0xca>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d104      	bne.n	80097ee <osThreadNew+0xca>
          mem = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	61bb      	str	r3, [r7, #24]
 80097e8:	e001      	b.n	80097ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d110      	bne.n	8009816 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80097fc:	9202      	str	r2, [sp, #8]
 80097fe:	9301      	str	r3, [sp, #4]
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	6a3a      	ldr	r2, [r7, #32]
 8009808:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f001 fba6 	bl	800af5c <xTaskCreateStatic>
 8009810:	4603      	mov	r3, r0
 8009812:	613b      	str	r3, [r7, #16]
 8009814:	e013      	b.n	800983e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d110      	bne.n	800983e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	b29a      	uxth	r2, r3
 8009820:	f107 0310 	add.w	r3, r7, #16
 8009824:	9301      	str	r3, [sp, #4]
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f001 fbf4 	bl	800b01c <xTaskCreate>
 8009834:	4603      	mov	r3, r0
 8009836:	2b01      	cmp	r3, #1
 8009838:	d001      	beq.n	800983e <osThreadNew+0x11a>
            hTask = NULL;
 800983a:	2300      	movs	r3, #0
 800983c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800983e:	693b      	ldr	r3, [r7, #16]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3728      	adds	r7, #40	@ 0x28
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009850:	f3ef 8305 	mrs	r3, IPSR
 8009854:	60bb      	str	r3, [r7, #8]
  return(result);
 8009856:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009858:	2b00      	cmp	r3, #0
 800985a:	d003      	beq.n	8009864 <osDelay+0x1c>
    stat = osErrorISR;
 800985c:	f06f 0305 	mvn.w	r3, #5
 8009860:	60fb      	str	r3, [r7, #12]
 8009862:	e007      	b.n	8009874 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009864:	2300      	movs	r3, #0
 8009866:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d002      	beq.n	8009874 <osDelay+0x2c>
      vTaskDelay(ticks);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f001 fd1a 	bl	800b2a8 <vTaskDelay>
    }
  }

  return (stat);
 8009874:	68fb      	ldr	r3, [r7, #12]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800987e:	b580      	push	{r7, lr}
 8009880:	b088      	sub	sp, #32
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009886:	2300      	movs	r3, #0
 8009888:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800988a:	f3ef 8305 	mrs	r3, IPSR
 800988e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009890:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009892:	2b00      	cmp	r3, #0
 8009894:	d174      	bne.n	8009980 <osMutexNew+0x102>
    if (attr != NULL) {
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <osMutexNew+0x26>
      type = attr->attr_bits;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	61bb      	str	r3, [r7, #24]
 80098a2:	e001      	b.n	80098a8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80098a4:	2300      	movs	r3, #0
 80098a6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <osMutexNew+0x3a>
      rmtx = 1U;
 80098b2:	2301      	movs	r3, #1
 80098b4:	617b      	str	r3, [r7, #20]
 80098b6:	e001      	b.n	80098bc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80098b8:	2300      	movs	r3, #0
 80098ba:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	f003 0308 	and.w	r3, r3, #8
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d15c      	bne.n	8009980 <osMutexNew+0x102>
      mem = -1;
 80098c6:	f04f 33ff 	mov.w	r3, #4294967295
 80098ca:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d015      	beq.n	80098fe <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d006      	beq.n	80098e8 <osMutexNew+0x6a>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	2b4f      	cmp	r3, #79	@ 0x4f
 80098e0:	d902      	bls.n	80098e8 <osMutexNew+0x6a>
          mem = 1;
 80098e2:	2301      	movs	r3, #1
 80098e4:	613b      	str	r3, [r7, #16]
 80098e6:	e00c      	b.n	8009902 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d108      	bne.n	8009902 <osMutexNew+0x84>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d104      	bne.n	8009902 <osMutexNew+0x84>
            mem = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	613b      	str	r3, [r7, #16]
 80098fc:	e001      	b.n	8009902 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d112      	bne.n	800992e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d007      	beq.n	800991e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	4619      	mov	r1, r3
 8009914:	2004      	movs	r0, #4
 8009916:	f000 fc72 	bl	800a1fe <xQueueCreateMutexStatic>
 800991a:	61f8      	str	r0, [r7, #28]
 800991c:	e016      	b.n	800994c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	4619      	mov	r1, r3
 8009924:	2001      	movs	r0, #1
 8009926:	f000 fc6a 	bl	800a1fe <xQueueCreateMutexStatic>
 800992a:	61f8      	str	r0, [r7, #28]
 800992c:	e00e      	b.n	800994c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10b      	bne.n	800994c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d004      	beq.n	8009944 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800993a:	2004      	movs	r0, #4
 800993c:	f000 fc47 	bl	800a1ce <xQueueCreateMutex>
 8009940:	61f8      	str	r0, [r7, #28]
 8009942:	e003      	b.n	800994c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009944:	2001      	movs	r0, #1
 8009946:	f000 fc42 	bl	800a1ce <xQueueCreateMutex>
 800994a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00c      	beq.n	800996c <osMutexNew+0xee>
        if (attr != NULL) {
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d003      	beq.n	8009960 <osMutexNew+0xe2>
          name = attr->name;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	60fb      	str	r3, [r7, #12]
 800995e:	e001      	b.n	8009964 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009960:	2300      	movs	r3, #0
 8009962:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009964:	68f9      	ldr	r1, [r7, #12]
 8009966:	69f8      	ldr	r0, [r7, #28]
 8009968:	f001 fa70 	bl	800ae4c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d006      	beq.n	8009980 <osMutexNew+0x102>
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d003      	beq.n	8009980 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	f043 0301 	orr.w	r3, r3, #1
 800997e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009980:	69fb      	ldr	r3, [r7, #28]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3720      	adds	r7, #32
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800998a:	b580      	push	{r7, lr}
 800998c:	b08a      	sub	sp, #40	@ 0x28
 800998e:	af02      	add	r7, sp, #8
 8009990:	60f8      	str	r0, [r7, #12]
 8009992:	60b9      	str	r1, [r7, #8]
 8009994:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009996:	2300      	movs	r3, #0
 8009998:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800999a:	f3ef 8305 	mrs	r3, IPSR
 800999e:	613b      	str	r3, [r7, #16]
  return(result);
 80099a0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d175      	bne.n	8009a92 <osSemaphoreNew+0x108>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d072      	beq.n	8009a92 <osSemaphoreNew+0x108>
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d86e      	bhi.n	8009a92 <osSemaphoreNew+0x108>
    mem = -1;
 80099b4:	f04f 33ff 	mov.w	r3, #4294967295
 80099b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d015      	beq.n	80099ec <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d006      	beq.n	80099d6 <osSemaphoreNew+0x4c>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	2b4f      	cmp	r3, #79	@ 0x4f
 80099ce:	d902      	bls.n	80099d6 <osSemaphoreNew+0x4c>
        mem = 1;
 80099d0:	2301      	movs	r3, #1
 80099d2:	61bb      	str	r3, [r7, #24]
 80099d4:	e00c      	b.n	80099f0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d108      	bne.n	80099f0 <osSemaphoreNew+0x66>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d104      	bne.n	80099f0 <osSemaphoreNew+0x66>
          mem = 0;
 80099e6:	2300      	movs	r3, #0
 80099e8:	61bb      	str	r3, [r7, #24]
 80099ea:	e001      	b.n	80099f0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80099ec:	2300      	movs	r3, #0
 80099ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f6:	d04c      	beq.n	8009a92 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d128      	bne.n	8009a50 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d10a      	bne.n	8009a1a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	2203      	movs	r2, #3
 8009a0a:	9200      	str	r2, [sp, #0]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	2100      	movs	r1, #0
 8009a10:	2001      	movs	r0, #1
 8009a12:	f000 fae7 	bl	8009fe4 <xQueueGenericCreateStatic>
 8009a16:	61f8      	str	r0, [r7, #28]
 8009a18:	e005      	b.n	8009a26 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009a1a:	2203      	movs	r2, #3
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	2001      	movs	r0, #1
 8009a20:	f000 fb5d 	bl	800a0de <xQueueGenericCreate>
 8009a24:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d022      	beq.n	8009a72 <osSemaphoreNew+0xe8>
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d01f      	beq.n	8009a72 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009a32:	2300      	movs	r3, #0
 8009a34:	2200      	movs	r2, #0
 8009a36:	2100      	movs	r1, #0
 8009a38:	69f8      	ldr	r0, [r7, #28]
 8009a3a:	f000 fc69 	bl	800a310 <xQueueGenericSend>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d016      	beq.n	8009a72 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009a44:	69f8      	ldr	r0, [r7, #28]
 8009a46:	f001 f8b5 	bl	800abb4 <vQueueDelete>
            hSemaphore = NULL;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	61fb      	str	r3, [r7, #28]
 8009a4e:	e010      	b.n	8009a72 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d108      	bne.n	8009a68 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	68b9      	ldr	r1, [r7, #8]
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f000 fbe8 	bl	800a234 <xQueueCreateCountingSemaphoreStatic>
 8009a64:	61f8      	str	r0, [r7, #28]
 8009a66:	e004      	b.n	8009a72 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009a68:	68b9      	ldr	r1, [r7, #8]
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 fc1b 	bl	800a2a6 <xQueueCreateCountingSemaphore>
 8009a70:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00c      	beq.n	8009a92 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	617b      	str	r3, [r7, #20]
 8009a84:	e001      	b.n	8009a8a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009a86:	2300      	movs	r3, #0
 8009a88:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009a8a:	6979      	ldr	r1, [r7, #20]
 8009a8c:	69f8      	ldr	r0, [r7, #28]
 8009a8e:	f001 f9dd 	bl	800ae4c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009a92:	69fb      	ldr	r3, [r7, #28]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3720      	adds	r7, #32
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08a      	sub	sp, #40	@ 0x28
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aac:	f3ef 8305 	mrs	r3, IPSR
 8009ab0:	613b      	str	r3, [r7, #16]
  return(result);
 8009ab2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d15f      	bne.n	8009b78 <osMessageQueueNew+0xdc>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d05c      	beq.n	8009b78 <osMessageQueueNew+0xdc>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d059      	beq.n	8009b78 <osMessageQueueNew+0xdc>
    mem = -1;
 8009ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d029      	beq.n	8009b24 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d012      	beq.n	8009afe <osMessageQueueNew+0x62>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	2b4f      	cmp	r3, #79	@ 0x4f
 8009ade:	d90e      	bls.n	8009afe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00a      	beq.n	8009afe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	695a      	ldr	r2, [r3, #20]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	68b9      	ldr	r1, [r7, #8]
 8009af0:	fb01 f303 	mul.w	r3, r1, r3
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d302      	bcc.n	8009afe <osMessageQueueNew+0x62>
        mem = 1;
 8009af8:	2301      	movs	r3, #1
 8009afa:	61bb      	str	r3, [r7, #24]
 8009afc:	e014      	b.n	8009b28 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d110      	bne.n	8009b28 <osMessageQueueNew+0x8c>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10c      	bne.n	8009b28 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d108      	bne.n	8009b28 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d104      	bne.n	8009b28 <osMessageQueueNew+0x8c>
          mem = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	61bb      	str	r3, [r7, #24]
 8009b22:	e001      	b.n	8009b28 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d10b      	bne.n	8009b46 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691a      	ldr	r2, [r3, #16]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	2100      	movs	r1, #0
 8009b38:	9100      	str	r1, [sp, #0]
 8009b3a:	68b9      	ldr	r1, [r7, #8]
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f000 fa51 	bl	8009fe4 <xQueueGenericCreateStatic>
 8009b42:	61f8      	str	r0, [r7, #28]
 8009b44:	e008      	b.n	8009b58 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d105      	bne.n	8009b58 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	68b9      	ldr	r1, [r7, #8]
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f000 fac4 	bl	800a0de <xQueueGenericCreate>
 8009b56:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00c      	beq.n	8009b78 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d003      	beq.n	8009b6c <osMessageQueueNew+0xd0>
        name = attr->name;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	617b      	str	r3, [r7, #20]
 8009b6a:	e001      	b.n	8009b70 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009b70:	6979      	ldr	r1, [r7, #20]
 8009b72:	69f8      	ldr	r0, [r7, #28]
 8009b74:	f001 f96a 	bl	800ae4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009b78:	69fb      	ldr	r3, [r7, #28]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3720      	adds	r7, #32
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
	...

08009b84 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b088      	sub	sp, #32
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	603b      	str	r3, [r7, #0]
 8009b90:	4613      	mov	r3, r2
 8009b92:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b9c:	f3ef 8305 	mrs	r3, IPSR
 8009ba0:	617b      	str	r3, [r7, #20]
  return(result);
 8009ba2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d028      	beq.n	8009bfa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d005      	beq.n	8009bba <osMessageQueuePut+0x36>
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d002      	beq.n	8009bba <osMessageQueuePut+0x36>
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d003      	beq.n	8009bc2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009bba:	f06f 0303 	mvn.w	r3, #3
 8009bbe:	61fb      	str	r3, [r7, #28]
 8009bc0:	e038      	b.n	8009c34 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009bc6:	f107 0210 	add.w	r2, r7, #16
 8009bca:	2300      	movs	r3, #0
 8009bcc:	68b9      	ldr	r1, [r7, #8]
 8009bce:	69b8      	ldr	r0, [r7, #24]
 8009bd0:	f000 fca0 	bl	800a514 <xQueueGenericSendFromISR>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d003      	beq.n	8009be2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009bda:	f06f 0302 	mvn.w	r3, #2
 8009bde:	61fb      	str	r3, [r7, #28]
 8009be0:	e028      	b.n	8009c34 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d025      	beq.n	8009c34 <osMessageQueuePut+0xb0>
 8009be8:	4b15      	ldr	r3, [pc, #84]	@ (8009c40 <osMessageQueuePut+0xbc>)
 8009bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bee:	601a      	str	r2, [r3, #0]
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	e01c      	b.n	8009c34 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <osMessageQueuePut+0x82>
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d103      	bne.n	8009c0e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009c06:	f06f 0303 	mvn.w	r3, #3
 8009c0a:	61fb      	str	r3, [r7, #28]
 8009c0c:	e012      	b.n	8009c34 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c0e:	2300      	movs	r3, #0
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	68b9      	ldr	r1, [r7, #8]
 8009c14:	69b8      	ldr	r0, [r7, #24]
 8009c16:	f000 fb7b 	bl	800a310 <xQueueGenericSend>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d009      	beq.n	8009c34 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009c26:	f06f 0301 	mvn.w	r3, #1
 8009c2a:	61fb      	str	r3, [r7, #28]
 8009c2c:	e002      	b.n	8009c34 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009c2e:	f06f 0302 	mvn.w	r3, #2
 8009c32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009c34:	69fb      	ldr	r3, [r7, #28]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3720      	adds	r7, #32
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	e000ed04 	.word	0xe000ed04

08009c44 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
 8009c50:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c5a:	f3ef 8305 	mrs	r3, IPSR
 8009c5e:	617b      	str	r3, [r7, #20]
  return(result);
 8009c60:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d028      	beq.n	8009cb8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d005      	beq.n	8009c78 <osMessageQueueGet+0x34>
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d002      	beq.n	8009c78 <osMessageQueueGet+0x34>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d003      	beq.n	8009c80 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009c78:	f06f 0303 	mvn.w	r3, #3
 8009c7c:	61fb      	str	r3, [r7, #28]
 8009c7e:	e037      	b.n	8009cf0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009c80:	2300      	movs	r3, #0
 8009c82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009c84:	f107 0310 	add.w	r3, r7, #16
 8009c88:	461a      	mov	r2, r3
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	69b8      	ldr	r0, [r7, #24]
 8009c8e:	f000 fed1 	bl	800aa34 <xQueueReceiveFromISR>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d003      	beq.n	8009ca0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009c98:	f06f 0302 	mvn.w	r3, #2
 8009c9c:	61fb      	str	r3, [r7, #28]
 8009c9e:	e027      	b.n	8009cf0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d024      	beq.n	8009cf0 <osMessageQueueGet+0xac>
 8009ca6:	4b15      	ldr	r3, [pc, #84]	@ (8009cfc <osMessageQueueGet+0xb8>)
 8009ca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	e01b      	b.n	8009cf0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d002      	beq.n	8009cc4 <osMessageQueueGet+0x80>
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d103      	bne.n	8009ccc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009cc4:	f06f 0303 	mvn.w	r3, #3
 8009cc8:	61fb      	str	r3, [r7, #28]
 8009cca:	e011      	b.n	8009cf0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	69b8      	ldr	r0, [r7, #24]
 8009cd2:	f000 fcbd 	bl	800a650 <xQueueReceive>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d009      	beq.n	8009cf0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009ce2:	f06f 0301 	mvn.w	r3, #1
 8009ce6:	61fb      	str	r3, [r7, #28]
 8009ce8:	e002      	b.n	8009cf0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009cea:	f06f 0302 	mvn.w	r3, #2
 8009cee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009cf0:	69fb      	ldr	r3, [r7, #28]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3720      	adds	r7, #32
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	e000ed04 	.word	0xe000ed04

08009d00 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d102      	bne.n	8009d18 <osMessageQueueGetCount+0x18>
    count = 0U;
 8009d12:	2300      	movs	r3, #0
 8009d14:	617b      	str	r3, [r7, #20]
 8009d16:	e00e      	b.n	8009d36 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d18:	f3ef 8305 	mrs	r3, IPSR
 8009d1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d004      	beq.n	8009d2e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009d24:	6938      	ldr	r0, [r7, #16]
 8009d26:	f000 ff26 	bl	800ab76 <uxQueueMessagesWaitingFromISR>
 8009d2a:	6178      	str	r0, [r7, #20]
 8009d2c:	e003      	b.n	8009d36 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009d2e:	6938      	ldr	r0, [r7, #16]
 8009d30:	f000 ff02 	bl	800ab38 <uxQueueMessagesWaiting>
 8009d34:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8009d36:	697b      	ldr	r3, [r7, #20]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4a07      	ldr	r2, [pc, #28]	@ (8009d6c <vApplicationGetIdleTaskMemory+0x2c>)
 8009d50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	4a06      	ldr	r2, [pc, #24]	@ (8009d70 <vApplicationGetIdleTaskMemory+0x30>)
 8009d56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2240      	movs	r2, #64	@ 0x40
 8009d5c:	601a      	str	r2, [r3, #0]
}
 8009d5e:	bf00      	nop
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	2000032c 	.word	0x2000032c
 8009d70:	20000388 	.word	0x20000388

08009d74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	4a07      	ldr	r2, [pc, #28]	@ (8009da0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	4a06      	ldr	r2, [pc, #24]	@ (8009da4 <vApplicationGetTimerTaskMemory+0x30>)
 8009d8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2280      	movs	r2, #128	@ 0x80
 8009d90:	601a      	str	r2, [r3, #0]
}
 8009d92:	bf00      	nop
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	20000488 	.word	0x20000488
 8009da4:	200004e4 	.word	0x200004e4

08009da8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f103 0208 	add.w	r2, r3, #8
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f103 0208 	add.w	r2, r3, #8
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f103 0208 	add.w	r2, r3, #8
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e02:	b480      	push	{r7}
 8009e04:	b085      	sub	sp, #20
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	689a      	ldr	r2, [r3, #8]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	683a      	ldr	r2, [r7, #0]
 8009e26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	1c5a      	adds	r2, r3, #1
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	601a      	str	r2, [r3, #0]
}
 8009e3e:	bf00      	nop
 8009e40:	3714      	adds	r7, #20
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b085      	sub	sp, #20
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e60:	d103      	bne.n	8009e6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	60fb      	str	r3, [r7, #12]
 8009e68:	e00c      	b.n	8009e84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	3308      	adds	r3, #8
 8009e6e:	60fb      	str	r3, [r7, #12]
 8009e70:	e002      	b.n	8009e78 <vListInsert+0x2e>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	60fb      	str	r3, [r7, #12]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d2f6      	bcs.n	8009e72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	601a      	str	r2, [r3, #0]
}
 8009eb0:	bf00      	nop
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	6892      	ldr	r2, [r2, #8]
 8009ed2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	6852      	ldr	r2, [r2, #4]
 8009edc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d103      	bne.n	8009ef0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689a      	ldr	r2, [r3, #8]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	1e5a      	subs	r2, r3, #1
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3714      	adds	r7, #20
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10b      	bne.n	8009f3c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f36:	bf00      	nop
 8009f38:	bf00      	nop
 8009f3a:	e7fd      	b.n	8009f38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f3c:	f002 fcb4 	bl	800c8a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f48:	68f9      	ldr	r1, [r7, #12]
 8009f4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f4c:	fb01 f303 	mul.w	r3, r1, r3
 8009f50:	441a      	add	r2, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	68f9      	ldr	r1, [r7, #12]
 8009f70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f72:	fb01 f303 	mul.w	r3, r1, r3
 8009f76:	441a      	add	r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	22ff      	movs	r2, #255	@ 0xff
 8009f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	22ff      	movs	r2, #255	@ 0xff
 8009f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d114      	bne.n	8009fbc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d01a      	beq.n	8009fd0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3310      	adds	r3, #16
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f001 fc56 	bl	800b850 <xTaskRemoveFromEventList>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d012      	beq.n	8009fd0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009faa:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe0 <xQueueGenericReset+0xd0>)
 8009fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fb0:	601a      	str	r2, [r3, #0]
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	e009      	b.n	8009fd0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3310      	adds	r3, #16
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7ff fef1 	bl	8009da8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	3324      	adds	r3, #36	@ 0x24
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7ff feec 	bl	8009da8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fd0:	f002 fc9c 	bl	800c90c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009fd4:	2301      	movs	r3, #1
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	e000ed04 	.word	0xe000ed04

08009fe4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b08e      	sub	sp, #56	@ 0x38
 8009fe8:	af02      	add	r7, sp, #8
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
 8009ff0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10b      	bne.n	800a010 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a00a:	bf00      	nop
 800a00c:	bf00      	nop
 800a00e:	e7fd      	b.n	800a00c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10b      	bne.n	800a02e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a028:	bf00      	nop
 800a02a:	bf00      	nop
 800a02c:	e7fd      	b.n	800a02a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <xQueueGenericCreateStatic+0x56>
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d001      	beq.n	800a03e <xQueueGenericCreateStatic+0x5a>
 800a03a:	2301      	movs	r3, #1
 800a03c:	e000      	b.n	800a040 <xQueueGenericCreateStatic+0x5c>
 800a03e:	2300      	movs	r3, #0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10b      	bne.n	800a05c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	623b      	str	r3, [r7, #32]
}
 800a056:	bf00      	nop
 800a058:	bf00      	nop
 800a05a:	e7fd      	b.n	800a058 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d102      	bne.n	800a068 <xQueueGenericCreateStatic+0x84>
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <xQueueGenericCreateStatic+0x88>
 800a068:	2301      	movs	r3, #1
 800a06a:	e000      	b.n	800a06e <xQueueGenericCreateStatic+0x8a>
 800a06c:	2300      	movs	r3, #0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10b      	bne.n	800a08a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	61fb      	str	r3, [r7, #28]
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	e7fd      	b.n	800a086 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a08a:	2350      	movs	r3, #80	@ 0x50
 800a08c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2b50      	cmp	r3, #80	@ 0x50
 800a092:	d00b      	beq.n	800a0ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	61bb      	str	r3, [r7, #24]
}
 800a0a6:	bf00      	nop
 800a0a8:	bf00      	nop
 800a0aa:	e7fd      	b.n	800a0a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00d      	beq.n	800a0d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	68b9      	ldr	r1, [r7, #8]
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f000 f840 	bl	800a154 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3730      	adds	r7, #48	@ 0x30
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b08a      	sub	sp, #40	@ 0x28
 800a0e2:	af02      	add	r7, sp, #8
 800a0e4:	60f8      	str	r0, [r7, #12]
 800a0e6:	60b9      	str	r1, [r7, #8]
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10b      	bne.n	800a10a <xQueueGenericCreate+0x2c>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	613b      	str	r3, [r7, #16]
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop
 800a108:	e7fd      	b.n	800a106 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	fb02 f303 	mul.w	r3, r2, r3
 800a112:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	3350      	adds	r3, #80	@ 0x50
 800a118:	4618      	mov	r0, r3
 800a11a:	f002 fce7 	bl	800caec <pvPortMalloc>
 800a11e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d011      	beq.n	800a14a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	3350      	adds	r3, #80	@ 0x50
 800a12e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a138:	79fa      	ldrb	r2, [r7, #7]
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	4613      	mov	r3, r2
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	68b9      	ldr	r1, [r7, #8]
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 f805 	bl	800a154 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a14a:	69bb      	ldr	r3, [r7, #24]
	}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3720      	adds	r7, #32
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
 800a160:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d103      	bne.n	800a170 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	e002      	b.n	800a176 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a182:	2101      	movs	r1, #1
 800a184:	69b8      	ldr	r0, [r7, #24]
 800a186:	f7ff fec3 	bl	8009f10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	78fa      	ldrb	r2, [r7, #3]
 800a18e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a192:	bf00      	nop
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b082      	sub	sp, #8
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00e      	beq.n	800a1c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2100      	movs	r1, #0
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f8a5 	bl	800a310 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a1c6:	bf00      	nop
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b086      	sub	sp, #24
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	617b      	str	r3, [r7, #20]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a1e0:	79fb      	ldrb	r3, [r7, #7]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	6939      	ldr	r1, [r7, #16]
 800a1e6:	6978      	ldr	r0, [r7, #20]
 800a1e8:	f7ff ff79 	bl	800a0de <xQueueGenericCreate>
 800a1ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f7ff ffd3 	bl	800a19a <prvInitialiseMutex>

		return xNewQueue;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
	}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3718      	adds	r7, #24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b088      	sub	sp, #32
 800a202:	af02      	add	r7, sp, #8
 800a204:	4603      	mov	r3, r0
 800a206:	6039      	str	r1, [r7, #0]
 800a208:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a20a:	2301      	movs	r3, #1
 800a20c:	617b      	str	r3, [r7, #20]
 800a20e:	2300      	movs	r3, #0
 800a210:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a212:	79fb      	ldrb	r3, [r7, #7]
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2200      	movs	r2, #0
 800a21a:	6939      	ldr	r1, [r7, #16]
 800a21c:	6978      	ldr	r0, [r7, #20]
 800a21e:	f7ff fee1 	bl	8009fe4 <xQueueGenericCreateStatic>
 800a222:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f7ff ffb8 	bl	800a19a <prvInitialiseMutex>

		return xNewQueue;
 800a22a:	68fb      	ldr	r3, [r7, #12]
	}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3718      	adds	r7, #24
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a234:	b580      	push	{r7, lr}
 800a236:	b08a      	sub	sp, #40	@ 0x28
 800a238:	af02      	add	r7, sp, #8
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10b      	bne.n	800a25e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	61bb      	str	r3, [r7, #24]
}
 800a258:	bf00      	nop
 800a25a:	bf00      	nop
 800a25c:	e7fd      	b.n	800a25a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	429a      	cmp	r2, r3
 800a264:	d90b      	bls.n	800a27e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	617b      	str	r3, [r7, #20]
}
 800a278:	bf00      	nop
 800a27a:	bf00      	nop
 800a27c:	e7fd      	b.n	800a27a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a27e:	2302      	movs	r3, #2
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	2100      	movs	r1, #0
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f7ff feab 	bl	8009fe4 <xQueueGenericCreateStatic>
 800a28e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d002      	beq.n	800a29c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a29c:	69fb      	ldr	r3, [r7, #28]
	}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3720      	adds	r7, #32
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b086      	sub	sp, #24
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10b      	bne.n	800a2ce <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	613b      	str	r3, [r7, #16]
}
 800a2c8:	bf00      	nop
 800a2ca:	bf00      	nop
 800a2cc:	e7fd      	b.n	800a2ca <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d90b      	bls.n	800a2ee <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2da:	f383 8811 	msr	BASEPRI, r3
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	60fb      	str	r3, [r7, #12]
}
 800a2e8:	bf00      	nop
 800a2ea:	bf00      	nop
 800a2ec:	e7fd      	b.n	800a2ea <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7ff fef3 	bl	800a0de <xQueueGenericCreate>
 800a2f8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d002      	beq.n	800a306 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a306:	697b      	ldr	r3, [r7, #20]
	}
 800a308:	4618      	mov	r0, r3
 800a30a:	3718      	adds	r7, #24
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08e      	sub	sp, #56	@ 0x38
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a31e:	2300      	movs	r3, #0
 800a320:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10b      	bne.n	800a344 <xQueueGenericSend+0x34>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a33e:	bf00      	nop
 800a340:	bf00      	nop
 800a342:	e7fd      	b.n	800a340 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d103      	bne.n	800a352 <xQueueGenericSend+0x42>
 800a34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <xQueueGenericSend+0x46>
 800a352:	2301      	movs	r3, #1
 800a354:	e000      	b.n	800a358 <xQueueGenericSend+0x48>
 800a356:	2300      	movs	r3, #0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10b      	bne.n	800a374 <xQueueGenericSend+0x64>
	__asm volatile
 800a35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a36e:	bf00      	nop
 800a370:	bf00      	nop
 800a372:	e7fd      	b.n	800a370 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b02      	cmp	r3, #2
 800a378:	d103      	bne.n	800a382 <xQueueGenericSend+0x72>
 800a37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d101      	bne.n	800a386 <xQueueGenericSend+0x76>
 800a382:	2301      	movs	r3, #1
 800a384:	e000      	b.n	800a388 <xQueueGenericSend+0x78>
 800a386:	2300      	movs	r3, #0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10b      	bne.n	800a3a4 <xQueueGenericSend+0x94>
	__asm volatile
 800a38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	623b      	str	r3, [r7, #32]
}
 800a39e:	bf00      	nop
 800a3a0:	bf00      	nop
 800a3a2:	e7fd      	b.n	800a3a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3a4:	f001 fc14 	bl	800bbd0 <xTaskGetSchedulerState>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d102      	bne.n	800a3b4 <xQueueGenericSend+0xa4>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <xQueueGenericSend+0xa8>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e000      	b.n	800a3ba <xQueueGenericSend+0xaa>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10b      	bne.n	800a3d6 <xQueueGenericSend+0xc6>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	61fb      	str	r3, [r7, #28]
}
 800a3d0:	bf00      	nop
 800a3d2:	bf00      	nop
 800a3d4:	e7fd      	b.n	800a3d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3d6:	f002 fa67 	bl	800c8a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d302      	bcc.n	800a3ec <xQueueGenericSend+0xdc>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d129      	bne.n	800a440 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	68b9      	ldr	r1, [r7, #8]
 800a3f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3f2:	f000 fc1b 	bl	800ac2c <prvCopyDataToQueue>
 800a3f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d010      	beq.n	800a422 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a402:	3324      	adds	r3, #36	@ 0x24
 800a404:	4618      	mov	r0, r3
 800a406:	f001 fa23 	bl	800b850 <xTaskRemoveFromEventList>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d013      	beq.n	800a438 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a410:	4b3f      	ldr	r3, [pc, #252]	@ (800a510 <xQueueGenericSend+0x200>)
 800a412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	e00a      	b.n	800a438 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a424:	2b00      	cmp	r3, #0
 800a426:	d007      	beq.n	800a438 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a428:	4b39      	ldr	r3, [pc, #228]	@ (800a510 <xQueueGenericSend+0x200>)
 800a42a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a42e:	601a      	str	r2, [r3, #0]
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a438:	f002 fa68 	bl	800c90c <vPortExitCritical>
				return pdPASS;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e063      	b.n	800a508 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d103      	bne.n	800a44e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a446:	f002 fa61 	bl	800c90c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a44a:	2300      	movs	r3, #0
 800a44c:	e05c      	b.n	800a508 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a44e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a450:	2b00      	cmp	r3, #0
 800a452:	d106      	bne.n	800a462 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a454:	f107 0314 	add.w	r3, r7, #20
 800a458:	4618      	mov	r0, r3
 800a45a:	f001 fa5d 	bl	800b918 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a45e:	2301      	movs	r3, #1
 800a460:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a462:	f002 fa53 	bl	800c90c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a466:	f000 ffbd 	bl	800b3e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a46a:	f002 fa1d 	bl	800c8a8 <vPortEnterCritical>
 800a46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a474:	b25b      	sxtb	r3, r3
 800a476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47a:	d103      	bne.n	800a484 <xQueueGenericSend+0x174>
 800a47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a486:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a48a:	b25b      	sxtb	r3, r3
 800a48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a490:	d103      	bne.n	800a49a <xQueueGenericSend+0x18a>
 800a492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a49a:	f002 fa37 	bl	800c90c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a49e:	1d3a      	adds	r2, r7, #4
 800a4a0:	f107 0314 	add.w	r3, r7, #20
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f001 fa4c 	bl	800b944 <xTaskCheckForTimeOut>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d124      	bne.n	800a4fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4b4:	f000 fcb2 	bl	800ae1c <prvIsQueueFull>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d018      	beq.n	800a4f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c0:	3310      	adds	r3, #16
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f001 f970 	bl	800b7ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a4cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4ce:	f000 fc3d 	bl	800ad4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a4d2:	f000 ff95 	bl	800b400 <xTaskResumeAll>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f47f af7c 	bne.w	800a3d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a4de:	4b0c      	ldr	r3, [pc, #48]	@ (800a510 <xQueueGenericSend+0x200>)
 800a4e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4e4:	601a      	str	r2, [r3, #0]
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	e772      	b.n	800a3d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4f2:	f000 fc2b 	bl	800ad4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4f6:	f000 ff83 	bl	800b400 <xTaskResumeAll>
 800a4fa:	e76c      	b.n	800a3d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4fe:	f000 fc25 	bl	800ad4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a502:	f000 ff7d 	bl	800b400 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a506:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3738      	adds	r7, #56	@ 0x38
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	e000ed04 	.word	0xe000ed04

0800a514 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b090      	sub	sp, #64	@ 0x40
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
 800a520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10b      	bne.n	800a544 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a53e:	bf00      	nop
 800a540:	bf00      	nop
 800a542:	e7fd      	b.n	800a540 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d103      	bne.n	800a552 <xQueueGenericSendFromISR+0x3e>
 800a54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <xQueueGenericSendFromISR+0x42>
 800a552:	2301      	movs	r3, #1
 800a554:	e000      	b.n	800a558 <xQueueGenericSendFromISR+0x44>
 800a556:	2300      	movs	r3, #0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10b      	bne.n	800a574 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a56e:	bf00      	nop
 800a570:	bf00      	nop
 800a572:	e7fd      	b.n	800a570 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2b02      	cmp	r3, #2
 800a578:	d103      	bne.n	800a582 <xQueueGenericSendFromISR+0x6e>
 800a57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d101      	bne.n	800a586 <xQueueGenericSendFromISR+0x72>
 800a582:	2301      	movs	r3, #1
 800a584:	e000      	b.n	800a588 <xQueueGenericSendFromISR+0x74>
 800a586:	2300      	movs	r3, #0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10b      	bne.n	800a5a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	623b      	str	r3, [r7, #32]
}
 800a59e:	bf00      	nop
 800a5a0:	bf00      	nop
 800a5a2:	e7fd      	b.n	800a5a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5a4:	f002 fa60 	bl	800ca68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5a8:	f3ef 8211 	mrs	r2, BASEPRI
 800a5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	61fa      	str	r2, [r7, #28]
 800a5be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a5c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d302      	bcc.n	800a5d6 <xQueueGenericSendFromISR+0xc2>
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d12f      	bne.n	800a636 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	68b9      	ldr	r1, [r7, #8]
 800a5ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a5ec:	f000 fb1e 	bl	800ac2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f8:	d112      	bne.n	800a620 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d016      	beq.n	800a630 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a604:	3324      	adds	r3, #36	@ 0x24
 800a606:	4618      	mov	r0, r3
 800a608:	f001 f922 	bl	800b850 <xTaskRemoveFromEventList>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00e      	beq.n	800a630 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	e007      	b.n	800a630 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a620:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a624:	3301      	adds	r3, #1
 800a626:	b2db      	uxtb	r3, r3
 800a628:	b25a      	sxtb	r2, r3
 800a62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a630:	2301      	movs	r3, #1
 800a632:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a634:	e001      	b.n	800a63a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a636:	2300      	movs	r3, #0
 800a638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a63c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a644:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3740      	adds	r7, #64	@ 0x40
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b08c      	sub	sp, #48	@ 0x30
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a65c:	2300      	movs	r3, #0
 800a65e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10b      	bne.n	800a682 <xQueueReceive+0x32>
	__asm volatile
 800a66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	623b      	str	r3, [r7, #32]
}
 800a67c:	bf00      	nop
 800a67e:	bf00      	nop
 800a680:	e7fd      	b.n	800a67e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d103      	bne.n	800a690 <xQueueReceive+0x40>
 800a688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <xQueueReceive+0x44>
 800a690:	2301      	movs	r3, #1
 800a692:	e000      	b.n	800a696 <xQueueReceive+0x46>
 800a694:	2300      	movs	r3, #0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10b      	bne.n	800a6b2 <xQueueReceive+0x62>
	__asm volatile
 800a69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	61fb      	str	r3, [r7, #28]
}
 800a6ac:	bf00      	nop
 800a6ae:	bf00      	nop
 800a6b0:	e7fd      	b.n	800a6ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6b2:	f001 fa8d 	bl	800bbd0 <xTaskGetSchedulerState>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d102      	bne.n	800a6c2 <xQueueReceive+0x72>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <xQueueReceive+0x76>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e000      	b.n	800a6c8 <xQueueReceive+0x78>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10b      	bne.n	800a6e4 <xQueueReceive+0x94>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	61bb      	str	r3, [r7, #24]
}
 800a6de:	bf00      	nop
 800a6e0:	bf00      	nop
 800a6e2:	e7fd      	b.n	800a6e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6e4:	f002 f8e0 	bl	800c8a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d01f      	beq.n	800a734 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6f4:	68b9      	ldr	r1, [r7, #8]
 800a6f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6f8:	f000 fb02 	bl	800ad00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fe:	1e5a      	subs	r2, r3, #1
 800a700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a702:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00f      	beq.n	800a72c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70e:	3310      	adds	r3, #16
 800a710:	4618      	mov	r0, r3
 800a712:	f001 f89d 	bl	800b850 <xTaskRemoveFromEventList>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d007      	beq.n	800a72c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a71c:	4b3c      	ldr	r3, [pc, #240]	@ (800a810 <xQueueReceive+0x1c0>)
 800a71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a72c:	f002 f8ee 	bl	800c90c <vPortExitCritical>
				return pdPASS;
 800a730:	2301      	movs	r3, #1
 800a732:	e069      	b.n	800a808 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d103      	bne.n	800a742 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a73a:	f002 f8e7 	bl	800c90c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a73e:	2300      	movs	r3, #0
 800a740:	e062      	b.n	800a808 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d106      	bne.n	800a756 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a748:	f107 0310 	add.w	r3, r7, #16
 800a74c:	4618      	mov	r0, r3
 800a74e:	f001 f8e3 	bl	800b918 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a752:	2301      	movs	r3, #1
 800a754:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a756:	f002 f8d9 	bl	800c90c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a75a:	f000 fe43 	bl	800b3e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a75e:	f002 f8a3 	bl	800c8a8 <vPortEnterCritical>
 800a762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a764:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a768:	b25b      	sxtb	r3, r3
 800a76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76e:	d103      	bne.n	800a778 <xQueueReceive+0x128>
 800a770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a77e:	b25b      	sxtb	r3, r3
 800a780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a784:	d103      	bne.n	800a78e <xQueueReceive+0x13e>
 800a786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a78e:	f002 f8bd 	bl	800c90c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a792:	1d3a      	adds	r2, r7, #4
 800a794:	f107 0310 	add.w	r3, r7, #16
 800a798:	4611      	mov	r1, r2
 800a79a:	4618      	mov	r0, r3
 800a79c:	f001 f8d2 	bl	800b944 <xTaskCheckForTimeOut>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d123      	bne.n	800a7ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7a8:	f000 fb22 	bl	800adf0 <prvIsQueueEmpty>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d017      	beq.n	800a7e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b4:	3324      	adds	r3, #36	@ 0x24
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 fff6 	bl	800b7ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7c2:	f000 fac3 	bl	800ad4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7c6:	f000 fe1b 	bl	800b400 <xTaskResumeAll>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d189      	bne.n	800a6e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a7d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a810 <xQueueReceive+0x1c0>)
 800a7d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	e780      	b.n	800a6e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7e4:	f000 fab2 	bl	800ad4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7e8:	f000 fe0a 	bl	800b400 <xTaskResumeAll>
 800a7ec:	e77a      	b.n	800a6e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7f0:	f000 faac 	bl	800ad4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7f4:	f000 fe04 	bl	800b400 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7fa:	f000 faf9 	bl	800adf0 <prvIsQueueEmpty>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	f43f af6f 	beq.w	800a6e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a806:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3730      	adds	r7, #48	@ 0x30
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08e      	sub	sp, #56	@ 0x38
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a81e:	2300      	movs	r3, #0
 800a820:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a826:	2300      	movs	r3, #0
 800a828:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10b      	bne.n	800a848 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	623b      	str	r3, [r7, #32]
}
 800a842:	bf00      	nop
 800a844:	bf00      	nop
 800a846:	e7fd      	b.n	800a844 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a84a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00b      	beq.n	800a868 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	61fb      	str	r3, [r7, #28]
}
 800a862:	bf00      	nop
 800a864:	bf00      	nop
 800a866:	e7fd      	b.n	800a864 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a868:	f001 f9b2 	bl	800bbd0 <xTaskGetSchedulerState>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d102      	bne.n	800a878 <xQueueSemaphoreTake+0x64>
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <xQueueSemaphoreTake+0x68>
 800a878:	2301      	movs	r3, #1
 800a87a:	e000      	b.n	800a87e <xQueueSemaphoreTake+0x6a>
 800a87c:	2300      	movs	r3, #0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10b      	bne.n	800a89a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a886:	f383 8811 	msr	BASEPRI, r3
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	61bb      	str	r3, [r7, #24]
}
 800a894:	bf00      	nop
 800a896:	bf00      	nop
 800a898:	e7fd      	b.n	800a896 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a89a:	f002 f805 	bl	800c8a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d024      	beq.n	800a8f4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ac:	1e5a      	subs	r2, r3, #1
 800a8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d104      	bne.n	800a8c4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a8ba:	f001 fb03 	bl	800bec4 <pvTaskIncrementMutexHeldCount>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00f      	beq.n	800a8ec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ce:	3310      	adds	r3, #16
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f000 ffbd 	bl	800b850 <xTaskRemoveFromEventList>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d007      	beq.n	800a8ec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8dc:	4b54      	ldr	r3, [pc, #336]	@ (800aa30 <xQueueSemaphoreTake+0x21c>)
 800a8de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8ec:	f002 f80e 	bl	800c90c <vPortExitCritical>
				return pdPASS;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e098      	b.n	800aa26 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d112      	bne.n	800a920 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00b      	beq.n	800a918 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	617b      	str	r3, [r7, #20]
}
 800a912:	bf00      	nop
 800a914:	bf00      	nop
 800a916:	e7fd      	b.n	800a914 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a918:	f001 fff8 	bl	800c90c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a91c:	2300      	movs	r3, #0
 800a91e:	e082      	b.n	800aa26 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a922:	2b00      	cmp	r3, #0
 800a924:	d106      	bne.n	800a934 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a926:	f107 030c 	add.w	r3, r7, #12
 800a92a:	4618      	mov	r0, r3
 800a92c:	f000 fff4 	bl	800b918 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a930:	2301      	movs	r3, #1
 800a932:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a934:	f001 ffea 	bl	800c90c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a938:	f000 fd54 	bl	800b3e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a93c:	f001 ffb4 	bl	800c8a8 <vPortEnterCritical>
 800a940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a942:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a946:	b25b      	sxtb	r3, r3
 800a948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94c:	d103      	bne.n	800a956 <xQueueSemaphoreTake+0x142>
 800a94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a958:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a95c:	b25b      	sxtb	r3, r3
 800a95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a962:	d103      	bne.n	800a96c <xQueueSemaphoreTake+0x158>
 800a964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a966:	2200      	movs	r2, #0
 800a968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a96c:	f001 ffce 	bl	800c90c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a970:	463a      	mov	r2, r7
 800a972:	f107 030c 	add.w	r3, r7, #12
 800a976:	4611      	mov	r1, r2
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 ffe3 	bl	800b944 <xTaskCheckForTimeOut>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d132      	bne.n	800a9ea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a984:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a986:	f000 fa33 	bl	800adf0 <prvIsQueueEmpty>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d026      	beq.n	800a9de <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d109      	bne.n	800a9ac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a998:	f001 ff86 	bl	800c8a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f001 f933 	bl	800bc0c <xTaskPriorityInherit>
 800a9a6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a9a8:	f001 ffb0 	bl	800c90c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ae:	3324      	adds	r3, #36	@ 0x24
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	4611      	mov	r1, r2
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 fef9 	bl	800b7ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a9bc:	f000 f9c6 	bl	800ad4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9c0:	f000 fd1e 	bl	800b400 <xTaskResumeAll>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f47f af67 	bne.w	800a89a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a9cc:	4b18      	ldr	r3, [pc, #96]	@ (800aa30 <xQueueSemaphoreTake+0x21c>)
 800a9ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	e75d      	b.n	800a89a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a9de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a9e0:	f000 f9b4 	bl	800ad4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9e4:	f000 fd0c 	bl	800b400 <xTaskResumeAll>
 800a9e8:	e757      	b.n	800a89a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a9ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a9ec:	f000 f9ae 	bl	800ad4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9f0:	f000 fd06 	bl	800b400 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a9f6:	f000 f9fb 	bl	800adf0 <prvIsQueueEmpty>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f43f af4c 	beq.w	800a89a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aa02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00d      	beq.n	800aa24 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800aa08:	f001 ff4e 	bl	800c8a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aa0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa0e:	f000 f8f5 	bl	800abfc <prvGetDisinheritPriorityAfterTimeout>
 800aa12:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aa14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f001 f9ce 	bl	800bdbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aa20:	f001 ff74 	bl	800c90c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3738      	adds	r7, #56	@ 0x38
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	e000ed04 	.word	0xe000ed04

0800aa34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08e      	sub	sp, #56	@ 0x38
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aa44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d10b      	bne.n	800aa62 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800aa4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	623b      	str	r3, [r7, #32]
}
 800aa5c:	bf00      	nop
 800aa5e:	bf00      	nop
 800aa60:	e7fd      	b.n	800aa5e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d103      	bne.n	800aa70 <xQueueReceiveFromISR+0x3c>
 800aa68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d101      	bne.n	800aa74 <xQueueReceiveFromISR+0x40>
 800aa70:	2301      	movs	r3, #1
 800aa72:	e000      	b.n	800aa76 <xQueueReceiveFromISR+0x42>
 800aa74:	2300      	movs	r3, #0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10b      	bne.n	800aa92 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	61fb      	str	r3, [r7, #28]
}
 800aa8c:	bf00      	nop
 800aa8e:	bf00      	nop
 800aa90:	e7fd      	b.n	800aa8e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa92:	f001 ffe9 	bl	800ca68 <vPortValidateInterruptPriority>
	__asm volatile
 800aa96:	f3ef 8211 	mrs	r2, BASEPRI
 800aa9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	61ba      	str	r2, [r7, #24]
 800aaac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aaae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d02f      	beq.n	800ab1e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aac8:	68b9      	ldr	r1, [r7, #8]
 800aaca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aacc:	f000 f918 	bl	800ad00 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad2:	1e5a      	subs	r2, r3, #1
 800aad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aad8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800aadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae0:	d112      	bne.n	800ab08 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d016      	beq.n	800ab18 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaec:	3310      	adds	r3, #16
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 feae 	bl	800b850 <xTaskRemoveFromEventList>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00e      	beq.n	800ab18 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00b      	beq.n	800ab18 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	601a      	str	r2, [r3, #0]
 800ab06:	e007      	b.n	800ab18 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	b25a      	sxtb	r2, r3
 800ab12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab1c:	e001      	b.n	800ab22 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab24:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	f383 8811 	msr	BASEPRI, r3
}
 800ab2c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3738      	adds	r7, #56	@ 0x38
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d10b      	bne.n	800ab5e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800ab46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	60bb      	str	r3, [r7, #8]
}
 800ab58:	bf00      	nop
 800ab5a:	bf00      	nop
 800ab5c:	e7fd      	b.n	800ab5a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ab5e:	f001 fea3 	bl	800c8a8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab66:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ab68:	f001 fed0 	bl	800c90c <vPortExitCritical>

	return uxReturn;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800ab76:	b480      	push	{r7}
 800ab78:	b087      	sub	sp, #28
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10b      	bne.n	800aba0 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800ab88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab8c:	f383 8811 	msr	BASEPRI, r3
 800ab90:	f3bf 8f6f 	isb	sy
 800ab94:	f3bf 8f4f 	dsb	sy
 800ab98:	60fb      	str	r3, [r7, #12]
}
 800ab9a:	bf00      	nop
 800ab9c:	bf00      	nop
 800ab9e:	e7fd      	b.n	800ab9c <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800aba6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800aba8:	4618      	mov	r0, r3
 800abaa:	371c      	adds	r7, #28
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d10b      	bne.n	800abde <vQueueDelete+0x2a>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	60bb      	str	r3, [r7, #8]
}
 800abd8:	bf00      	nop
 800abda:	bf00      	nop
 800abdc:	e7fd      	b.n	800abda <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f000 f95e 	bl	800aea0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800abea:	2b00      	cmp	r3, #0
 800abec:	d102      	bne.n	800abf4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f002 f850 	bl	800cc94 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800abf4:	bf00      	nop
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d006      	beq.n	800ac1a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ac16:	60fb      	str	r3, [r7, #12]
 800ac18:	e001      	b.n	800ac1e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
	}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3714      	adds	r7, #20
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10d      	bne.n	800ac66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d14d      	bne.n	800acee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f001 f840 	bl	800bcdc <xTaskPriorityDisinherit>
 800ac5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	609a      	str	r2, [r3, #8]
 800ac64:	e043      	b.n	800acee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d119      	bne.n	800aca0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6858      	ldr	r0, [r3, #4]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac74:	461a      	mov	r2, r3
 800ac76:	68b9      	ldr	r1, [r7, #8]
 800ac78:	f003 f9e3 	bl	800e042 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	685a      	ldr	r2, [r3, #4]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac84:	441a      	add	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d32b      	bcc.n	800acee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	605a      	str	r2, [r3, #4]
 800ac9e:	e026      	b.n	800acee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	68d8      	ldr	r0, [r3, #12]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca8:	461a      	mov	r2, r3
 800acaa:	68b9      	ldr	r1, [r7, #8]
 800acac:	f003 f9c9 	bl	800e042 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	68da      	ldr	r2, [r3, #12]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb8:	425b      	negs	r3, r3
 800acba:	441a      	add	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	68da      	ldr	r2, [r3, #12]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d207      	bcs.n	800acdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	689a      	ldr	r2, [r3, #8]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acd4:	425b      	negs	r3, r3
 800acd6:	441a      	add	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d105      	bne.n	800acee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	3b01      	subs	r3, #1
 800acec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	1c5a      	adds	r2, r3, #1
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800acf6:	697b      	ldr	r3, [r7, #20]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3718      	adds	r7, #24
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d018      	beq.n	800ad44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	68da      	ldr	r2, [r3, #12]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad1a:	441a      	add	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	68da      	ldr	r2, [r3, #12]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d303      	bcc.n	800ad34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	68d9      	ldr	r1, [r3, #12]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	6838      	ldr	r0, [r7, #0]
 800ad40:	f003 f97f 	bl	800e042 <memcpy>
	}
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad54:	f001 fda8 	bl	800c8a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad60:	e011      	b.n	800ad86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d012      	beq.n	800ad90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	3324      	adds	r3, #36	@ 0x24
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 fd6e 	bl	800b850 <xTaskRemoveFromEventList>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad7a:	f000 fe47 	bl	800ba0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	dce9      	bgt.n	800ad62 <prvUnlockQueue+0x16>
 800ad8e:	e000      	b.n	800ad92 <prvUnlockQueue+0x46>
					break;
 800ad90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	22ff      	movs	r2, #255	@ 0xff
 800ad96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ad9a:	f001 fdb7 	bl	800c90c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad9e:	f001 fd83 	bl	800c8a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ada8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adaa:	e011      	b.n	800add0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d012      	beq.n	800adda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	3310      	adds	r3, #16
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 fd49 	bl	800b850 <xTaskRemoveFromEventList>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d001      	beq.n	800adc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800adc4:	f000 fe22 	bl	800ba0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
 800adca:	3b01      	subs	r3, #1
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800add0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800add4:	2b00      	cmp	r3, #0
 800add6:	dce9      	bgt.n	800adac <prvUnlockQueue+0x60>
 800add8:	e000      	b.n	800addc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800adda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	22ff      	movs	r2, #255	@ 0xff
 800ade0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ade4:	f001 fd92 	bl	800c90c <vPortExitCritical>
}
 800ade8:	bf00      	nop
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adf8:	f001 fd56 	bl	800c8a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae04:	2301      	movs	r3, #1
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	e001      	b.n	800ae0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae0e:	f001 fd7d 	bl	800c90c <vPortExitCritical>

	return xReturn;
 800ae12:	68fb      	ldr	r3, [r7, #12]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae24:	f001 fd40 	bl	800c8a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d102      	bne.n	800ae3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae34:	2301      	movs	r3, #1
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	e001      	b.n	800ae3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae3e:	f001 fd65 	bl	800c90c <vPortExitCritical>

	return xReturn;
 800ae42:	68fb      	ldr	r3, [r7, #12]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae56:	2300      	movs	r3, #0
 800ae58:	60fb      	str	r3, [r7, #12]
 800ae5a:	e014      	b.n	800ae86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae5c:	4a0f      	ldr	r2, [pc, #60]	@ (800ae9c <vQueueAddToRegistry+0x50>)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10b      	bne.n	800ae80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae68:	490c      	ldr	r1, [pc, #48]	@ (800ae9c <vQueueAddToRegistry+0x50>)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae72:	4a0a      	ldr	r2, [pc, #40]	@ (800ae9c <vQueueAddToRegistry+0x50>)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	4413      	add	r3, r2
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae7e:	e006      	b.n	800ae8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3301      	adds	r3, #1
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2b07      	cmp	r3, #7
 800ae8a:	d9e7      	bls.n	800ae5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae8c:	bf00      	nop
 800ae8e:	bf00      	nop
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	200006e4 	.word	0x200006e4

0800aea0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60fb      	str	r3, [r7, #12]
 800aeac:	e016      	b.n	800aedc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aeae:	4a10      	ldr	r2, [pc, #64]	@ (800aef0 <vQueueUnregisterQueue+0x50>)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	00db      	lsls	r3, r3, #3
 800aeb4:	4413      	add	r3, r2
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d10b      	bne.n	800aed6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aebe:	4a0c      	ldr	r2, [pc, #48]	@ (800aef0 <vQueueUnregisterQueue+0x50>)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2100      	movs	r1, #0
 800aec4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aec8:	4a09      	ldr	r2, [pc, #36]	@ (800aef0 <vQueueUnregisterQueue+0x50>)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	4413      	add	r3, r2
 800aed0:	2200      	movs	r2, #0
 800aed2:	605a      	str	r2, [r3, #4]
				break;
 800aed4:	e006      	b.n	800aee4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3301      	adds	r3, #1
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2b07      	cmp	r3, #7
 800aee0:	d9e5      	bls.n	800aeae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aee2:	bf00      	nop
 800aee4:	bf00      	nop
 800aee6:	3714      	adds	r7, #20
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	200006e4 	.word	0x200006e4

0800aef4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af04:	f001 fcd0 	bl	800c8a8 <vPortEnterCritical>
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af0e:	b25b      	sxtb	r3, r3
 800af10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af14:	d103      	bne.n	800af1e <vQueueWaitForMessageRestricted+0x2a>
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af24:	b25b      	sxtb	r3, r3
 800af26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af2a:	d103      	bne.n	800af34 <vQueueWaitForMessageRestricted+0x40>
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af34:	f001 fcea 	bl	800c90c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d106      	bne.n	800af4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	3324      	adds	r3, #36	@ 0x24
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	68b9      	ldr	r1, [r7, #8]
 800af48:	4618      	mov	r0, r3
 800af4a:	f000 fc55 	bl	800b7f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af4e:	6978      	ldr	r0, [r7, #20]
 800af50:	f7ff fefc 	bl	800ad4c <prvUnlockQueue>
	}
 800af54:	bf00      	nop
 800af56:	3718      	adds	r7, #24
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b08e      	sub	sp, #56	@ 0x38
 800af60:	af04      	add	r7, sp, #16
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
 800af68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10b      	bne.n	800af88 <xTaskCreateStatic+0x2c>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	623b      	str	r3, [r7, #32]
}
 800af82:	bf00      	nop
 800af84:	bf00      	nop
 800af86:	e7fd      	b.n	800af84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d10b      	bne.n	800afa6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800af8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af92:	f383 8811 	msr	BASEPRI, r3
 800af96:	f3bf 8f6f 	isb	sy
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	61fb      	str	r3, [r7, #28]
}
 800afa0:	bf00      	nop
 800afa2:	bf00      	nop
 800afa4:	e7fd      	b.n	800afa2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800afa6:	235c      	movs	r3, #92	@ 0x5c
 800afa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	2b5c      	cmp	r3, #92	@ 0x5c
 800afae:	d00b      	beq.n	800afc8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	61bb      	str	r3, [r7, #24]
}
 800afc2:	bf00      	nop
 800afc4:	bf00      	nop
 800afc6:	e7fd      	b.n	800afc4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d01e      	beq.n	800b00e <xTaskCreateStatic+0xb2>
 800afd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d01b      	beq.n	800b00e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800afda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afde:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800afe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe2:	2202      	movs	r2, #2
 800afe4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800afe8:	2300      	movs	r3, #0
 800afea:	9303      	str	r3, [sp, #12]
 800afec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afee:	9302      	str	r3, [sp, #8]
 800aff0:	f107 0314 	add.w	r3, r7, #20
 800aff4:	9301      	str	r3, [sp, #4]
 800aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	68b9      	ldr	r1, [r7, #8]
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f000 f850 	bl	800b0a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b006:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b008:	f000 f8de 	bl	800b1c8 <prvAddNewTaskToReadyList>
 800b00c:	e001      	b.n	800b012 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b00e:	2300      	movs	r3, #0
 800b010:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b012:	697b      	ldr	r3, [r7, #20]
	}
 800b014:	4618      	mov	r0, r3
 800b016:	3728      	adds	r7, #40	@ 0x28
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b08c      	sub	sp, #48	@ 0x30
 800b020:	af04      	add	r7, sp, #16
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	603b      	str	r3, [r7, #0]
 800b028:	4613      	mov	r3, r2
 800b02a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b02c:	88fb      	ldrh	r3, [r7, #6]
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	4618      	mov	r0, r3
 800b032:	f001 fd5b 	bl	800caec <pvPortMalloc>
 800b036:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00e      	beq.n	800b05c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b03e:	205c      	movs	r0, #92	@ 0x5c
 800b040:	f001 fd54 	bl	800caec <pvPortMalloc>
 800b044:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	631a      	str	r2, [r3, #48]	@ 0x30
 800b052:	e005      	b.n	800b060 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b054:	6978      	ldr	r0, [r7, #20]
 800b056:	f001 fe1d 	bl	800cc94 <vPortFree>
 800b05a:	e001      	b.n	800b060 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b05c:	2300      	movs	r3, #0
 800b05e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d017      	beq.n	800b096 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b06e:	88fa      	ldrh	r2, [r7, #6]
 800b070:	2300      	movs	r3, #0
 800b072:	9303      	str	r3, [sp, #12]
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	9302      	str	r3, [sp, #8]
 800b078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b07a:	9301      	str	r3, [sp, #4]
 800b07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	68b9      	ldr	r1, [r7, #8]
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f000 f80e 	bl	800b0a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b08a:	69f8      	ldr	r0, [r7, #28]
 800b08c:	f000 f89c 	bl	800b1c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b090:	2301      	movs	r3, #1
 800b092:	61bb      	str	r3, [r7, #24]
 800b094:	e002      	b.n	800b09c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b096:	f04f 33ff 	mov.w	r3, #4294967295
 800b09a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b09c:	69bb      	ldr	r3, [r7, #24]
	}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3720      	adds	r7, #32
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b088      	sub	sp, #32
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	60f8      	str	r0, [r7, #12]
 800b0ae:	60b9      	str	r1, [r7, #8]
 800b0b0:	607a      	str	r2, [r7, #4]
 800b0b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	461a      	mov	r2, r3
 800b0be:	21a5      	movs	r1, #165	@ 0xa5
 800b0c0:	f002 fee8 	bl	800de94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	f023 0307 	bic.w	r3, r3, #7
 800b0dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	f003 0307 	and.w	r3, r3, #7
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00b      	beq.n	800b100 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ec:	f383 8811 	msr	BASEPRI, r3
 800b0f0:	f3bf 8f6f 	isb	sy
 800b0f4:	f3bf 8f4f 	dsb	sy
 800b0f8:	617b      	str	r3, [r7, #20]
}
 800b0fa:	bf00      	nop
 800b0fc:	bf00      	nop
 800b0fe:	e7fd      	b.n	800b0fc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d01f      	beq.n	800b146 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b106:	2300      	movs	r3, #0
 800b108:	61fb      	str	r3, [r7, #28]
 800b10a:	e012      	b.n	800b132 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b10c:	68ba      	ldr	r2, [r7, #8]
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	4413      	add	r3, r2
 800b112:	7819      	ldrb	r1, [r3, #0]
 800b114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	4413      	add	r3, r2
 800b11a:	3334      	adds	r3, #52	@ 0x34
 800b11c:	460a      	mov	r2, r1
 800b11e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	4413      	add	r3, r2
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d006      	beq.n	800b13a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	3301      	adds	r3, #1
 800b130:	61fb      	str	r3, [r7, #28]
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	2b0f      	cmp	r3, #15
 800b136:	d9e9      	bls.n	800b10c <prvInitialiseNewTask+0x66>
 800b138:	e000      	b.n	800b13c <prvInitialiseNewTask+0x96>
			{
				break;
 800b13a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b144:	e003      	b.n	800b14e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b150:	2b37      	cmp	r3, #55	@ 0x37
 800b152:	d901      	bls.n	800b158 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b154:	2337      	movs	r3, #55	@ 0x37
 800b156:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b15c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b160:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b162:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b166:	2200      	movs	r2, #0
 800b168:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16c:	3304      	adds	r3, #4
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fe fe3a 	bl	8009de8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b176:	3318      	adds	r3, #24
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fe fe35 	bl	8009de8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b182:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b186:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b192:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b196:	2200      	movs	r2, #0
 800b198:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19c:	2200      	movs	r2, #0
 800b19e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b1a2:	683a      	ldr	r2, [r7, #0]
 800b1a4:	68f9      	ldr	r1, [r7, #12]
 800b1a6:	69b8      	ldr	r0, [r7, #24]
 800b1a8:	f001 fa4e 	bl	800c648 <pxPortInitialiseStack>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1be:	bf00      	nop
 800b1c0:	3720      	adds	r7, #32
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
	...

0800b1c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1d0:	f001 fb6a 	bl	800c8a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1d4:	4b2d      	ldr	r3, [pc, #180]	@ (800b28c <prvAddNewTaskToReadyList+0xc4>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	4a2c      	ldr	r2, [pc, #176]	@ (800b28c <prvAddNewTaskToReadyList+0xc4>)
 800b1dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1de:	4b2c      	ldr	r3, [pc, #176]	@ (800b290 <prvAddNewTaskToReadyList+0xc8>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d109      	bne.n	800b1fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1e6:	4a2a      	ldr	r2, [pc, #168]	@ (800b290 <prvAddNewTaskToReadyList+0xc8>)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1ec:	4b27      	ldr	r3, [pc, #156]	@ (800b28c <prvAddNewTaskToReadyList+0xc4>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d110      	bne.n	800b216 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1f4:	f000 fc2e 	bl	800ba54 <prvInitialiseTaskLists>
 800b1f8:	e00d      	b.n	800b216 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1fa:	4b26      	ldr	r3, [pc, #152]	@ (800b294 <prvAddNewTaskToReadyList+0xcc>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d109      	bne.n	800b216 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b202:	4b23      	ldr	r3, [pc, #140]	@ (800b290 <prvAddNewTaskToReadyList+0xc8>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d802      	bhi.n	800b216 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b210:	4a1f      	ldr	r2, [pc, #124]	@ (800b290 <prvAddNewTaskToReadyList+0xc8>)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b216:	4b20      	ldr	r3, [pc, #128]	@ (800b298 <prvAddNewTaskToReadyList+0xd0>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	3301      	adds	r3, #1
 800b21c:	4a1e      	ldr	r2, [pc, #120]	@ (800b298 <prvAddNewTaskToReadyList+0xd0>)
 800b21e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b220:	4b1d      	ldr	r3, [pc, #116]	@ (800b298 <prvAddNewTaskToReadyList+0xd0>)
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b22c:	4b1b      	ldr	r3, [pc, #108]	@ (800b29c <prvAddNewTaskToReadyList+0xd4>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	429a      	cmp	r2, r3
 800b232:	d903      	bls.n	800b23c <prvAddNewTaskToReadyList+0x74>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b238:	4a18      	ldr	r2, [pc, #96]	@ (800b29c <prvAddNewTaskToReadyList+0xd4>)
 800b23a:	6013      	str	r3, [r2, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b240:	4613      	mov	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	4a15      	ldr	r2, [pc, #84]	@ (800b2a0 <prvAddNewTaskToReadyList+0xd8>)
 800b24a:	441a      	add	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	3304      	adds	r3, #4
 800b250:	4619      	mov	r1, r3
 800b252:	4610      	mov	r0, r2
 800b254:	f7fe fdd5 	bl	8009e02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b258:	f001 fb58 	bl	800c90c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b25c:	4b0d      	ldr	r3, [pc, #52]	@ (800b294 <prvAddNewTaskToReadyList+0xcc>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00e      	beq.n	800b282 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b264:	4b0a      	ldr	r3, [pc, #40]	@ (800b290 <prvAddNewTaskToReadyList+0xc8>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b26e:	429a      	cmp	r2, r3
 800b270:	d207      	bcs.n	800b282 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b272:	4b0c      	ldr	r3, [pc, #48]	@ (800b2a4 <prvAddNewTaskToReadyList+0xdc>)
 800b274:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b278:	601a      	str	r2, [r3, #0]
 800b27a:	f3bf 8f4f 	dsb	sy
 800b27e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b282:	bf00      	nop
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	20000bf8 	.word	0x20000bf8
 800b290:	20000724 	.word	0x20000724
 800b294:	20000c04 	.word	0x20000c04
 800b298:	20000c14 	.word	0x20000c14
 800b29c:	20000c00 	.word	0x20000c00
 800b2a0:	20000728 	.word	0x20000728
 800b2a4:	e000ed04 	.word	0xe000ed04

0800b2a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d018      	beq.n	800b2ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b2ba:	4b14      	ldr	r3, [pc, #80]	@ (800b30c <vTaskDelay+0x64>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d00b      	beq.n	800b2da <vTaskDelay+0x32>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	60bb      	str	r3, [r7, #8]
}
 800b2d4:	bf00      	nop
 800b2d6:	bf00      	nop
 800b2d8:	e7fd      	b.n	800b2d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b2da:	f000 f883 	bl	800b3e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b2de:	2100      	movs	r1, #0
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fe03 	bl	800beec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b2e6:	f000 f88b 	bl	800b400 <xTaskResumeAll>
 800b2ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d107      	bne.n	800b302 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b2f2:	4b07      	ldr	r3, [pc, #28]	@ (800b310 <vTaskDelay+0x68>)
 800b2f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2f8:	601a      	str	r2, [r3, #0]
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b302:	bf00      	nop
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	20000c20 	.word	0x20000c20
 800b310:	e000ed04 	.word	0xe000ed04

0800b314 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b08a      	sub	sp, #40	@ 0x28
 800b318:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b31e:	2300      	movs	r3, #0
 800b320:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b322:	463a      	mov	r2, r7
 800b324:	1d39      	adds	r1, r7, #4
 800b326:	f107 0308 	add.w	r3, r7, #8
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fe fd08 	bl	8009d40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b330:	6839      	ldr	r1, [r7, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	9202      	str	r2, [sp, #8]
 800b338:	9301      	str	r3, [sp, #4]
 800b33a:	2300      	movs	r3, #0
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	2300      	movs	r3, #0
 800b340:	460a      	mov	r2, r1
 800b342:	4922      	ldr	r1, [pc, #136]	@ (800b3cc <vTaskStartScheduler+0xb8>)
 800b344:	4822      	ldr	r0, [pc, #136]	@ (800b3d0 <vTaskStartScheduler+0xbc>)
 800b346:	f7ff fe09 	bl	800af5c <xTaskCreateStatic>
 800b34a:	4603      	mov	r3, r0
 800b34c:	4a21      	ldr	r2, [pc, #132]	@ (800b3d4 <vTaskStartScheduler+0xc0>)
 800b34e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b350:	4b20      	ldr	r3, [pc, #128]	@ (800b3d4 <vTaskStartScheduler+0xc0>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b358:	2301      	movs	r3, #1
 800b35a:	617b      	str	r3, [r7, #20]
 800b35c:	e001      	b.n	800b362 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b35e:	2300      	movs	r3, #0
 800b360:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d102      	bne.n	800b36e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b368:	f000 fe14 	bl	800bf94 <xTimerCreateTimerTask>
 800b36c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d116      	bne.n	800b3a2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	613b      	str	r3, [r7, #16]
}
 800b386:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b388:	4b13      	ldr	r3, [pc, #76]	@ (800b3d8 <vTaskStartScheduler+0xc4>)
 800b38a:	f04f 32ff 	mov.w	r2, #4294967295
 800b38e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b390:	4b12      	ldr	r3, [pc, #72]	@ (800b3dc <vTaskStartScheduler+0xc8>)
 800b392:	2201      	movs	r2, #1
 800b394:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b396:	4b12      	ldr	r3, [pc, #72]	@ (800b3e0 <vTaskStartScheduler+0xcc>)
 800b398:	2200      	movs	r2, #0
 800b39a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b39c:	f001 f9e0 	bl	800c760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b3a0:	e00f      	b.n	800b3c2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a8:	d10b      	bne.n	800b3c2 <vTaskStartScheduler+0xae>
	__asm volatile
 800b3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ae:	f383 8811 	msr	BASEPRI, r3
 800b3b2:	f3bf 8f6f 	isb	sy
 800b3b6:	f3bf 8f4f 	dsb	sy
 800b3ba:	60fb      	str	r3, [r7, #12]
}
 800b3bc:	bf00      	nop
 800b3be:	bf00      	nop
 800b3c0:	e7fd      	b.n	800b3be <vTaskStartScheduler+0xaa>
}
 800b3c2:	bf00      	nop
 800b3c4:	3718      	adds	r7, #24
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	0800f118 	.word	0x0800f118
 800b3d0:	0800ba25 	.word	0x0800ba25
 800b3d4:	20000c1c 	.word	0x20000c1c
 800b3d8:	20000c18 	.word	0x20000c18
 800b3dc:	20000c04 	.word	0x20000c04
 800b3e0:	20000bfc 	.word	0x20000bfc

0800b3e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b3e8:	4b04      	ldr	r3, [pc, #16]	@ (800b3fc <vTaskSuspendAll+0x18>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	4a03      	ldr	r2, [pc, #12]	@ (800b3fc <vTaskSuspendAll+0x18>)
 800b3f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b3f2:	bf00      	nop
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	20000c20 	.word	0x20000c20

0800b400 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b406:	2300      	movs	r3, #0
 800b408:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b40a:	2300      	movs	r3, #0
 800b40c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b40e:	4b42      	ldr	r3, [pc, #264]	@ (800b518 <xTaskResumeAll+0x118>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d10b      	bne.n	800b42e <xTaskResumeAll+0x2e>
	__asm volatile
 800b416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b41a:	f383 8811 	msr	BASEPRI, r3
 800b41e:	f3bf 8f6f 	isb	sy
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	603b      	str	r3, [r7, #0]
}
 800b428:	bf00      	nop
 800b42a:	bf00      	nop
 800b42c:	e7fd      	b.n	800b42a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b42e:	f001 fa3b 	bl	800c8a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b432:	4b39      	ldr	r3, [pc, #228]	@ (800b518 <xTaskResumeAll+0x118>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	3b01      	subs	r3, #1
 800b438:	4a37      	ldr	r2, [pc, #220]	@ (800b518 <xTaskResumeAll+0x118>)
 800b43a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b43c:	4b36      	ldr	r3, [pc, #216]	@ (800b518 <xTaskResumeAll+0x118>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d162      	bne.n	800b50a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b444:	4b35      	ldr	r3, [pc, #212]	@ (800b51c <xTaskResumeAll+0x11c>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d05e      	beq.n	800b50a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b44c:	e02f      	b.n	800b4ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b44e:	4b34      	ldr	r3, [pc, #208]	@ (800b520 <xTaskResumeAll+0x120>)
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	3318      	adds	r3, #24
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fe fd2e 	bl	8009ebc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3304      	adds	r3, #4
 800b464:	4618      	mov	r0, r3
 800b466:	f7fe fd29 	bl	8009ebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b46e:	4b2d      	ldr	r3, [pc, #180]	@ (800b524 <xTaskResumeAll+0x124>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	429a      	cmp	r2, r3
 800b474:	d903      	bls.n	800b47e <xTaskResumeAll+0x7e>
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b47a:	4a2a      	ldr	r2, [pc, #168]	@ (800b524 <xTaskResumeAll+0x124>)
 800b47c:	6013      	str	r3, [r2, #0]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b482:	4613      	mov	r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4413      	add	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4a27      	ldr	r2, [pc, #156]	@ (800b528 <xTaskResumeAll+0x128>)
 800b48c:	441a      	add	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	3304      	adds	r3, #4
 800b492:	4619      	mov	r1, r3
 800b494:	4610      	mov	r0, r2
 800b496:	f7fe fcb4 	bl	8009e02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b49e:	4b23      	ldr	r3, [pc, #140]	@ (800b52c <xTaskResumeAll+0x12c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d302      	bcc.n	800b4ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b4a8:	4b21      	ldr	r3, [pc, #132]	@ (800b530 <xTaskResumeAll+0x130>)
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b4ae:	4b1c      	ldr	r3, [pc, #112]	@ (800b520 <xTaskResumeAll+0x120>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1cb      	bne.n	800b44e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b4bc:	f000 fb68 	bl	800bb90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b4c0:	4b1c      	ldr	r3, [pc, #112]	@ (800b534 <xTaskResumeAll+0x134>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d010      	beq.n	800b4ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b4cc:	f000 f846 	bl	800b55c <xTaskIncrementTick>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d002      	beq.n	800b4dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b4d6:	4b16      	ldr	r3, [pc, #88]	@ (800b530 <xTaskResumeAll+0x130>)
 800b4d8:	2201      	movs	r2, #1
 800b4da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1f1      	bne.n	800b4cc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b4e8:	4b12      	ldr	r3, [pc, #72]	@ (800b534 <xTaskResumeAll+0x134>)
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4ee:	4b10      	ldr	r3, [pc, #64]	@ (800b530 <xTaskResumeAll+0x130>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d009      	beq.n	800b50a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4fa:	4b0f      	ldr	r3, [pc, #60]	@ (800b538 <xTaskResumeAll+0x138>)
 800b4fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b500:	601a      	str	r2, [r3, #0]
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b50a:	f001 f9ff 	bl	800c90c <vPortExitCritical>

	return xAlreadyYielded;
 800b50e:	68bb      	ldr	r3, [r7, #8]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	20000c20 	.word	0x20000c20
 800b51c:	20000bf8 	.word	0x20000bf8
 800b520:	20000bb8 	.word	0x20000bb8
 800b524:	20000c00 	.word	0x20000c00
 800b528:	20000728 	.word	0x20000728
 800b52c:	20000724 	.word	0x20000724
 800b530:	20000c0c 	.word	0x20000c0c
 800b534:	20000c08 	.word	0x20000c08
 800b538:	e000ed04 	.word	0xe000ed04

0800b53c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b542:	4b05      	ldr	r3, [pc, #20]	@ (800b558 <xTaskGetTickCount+0x1c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b548:	687b      	ldr	r3, [r7, #4]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	370c      	adds	r7, #12
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	20000bfc 	.word	0x20000bfc

0800b55c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b562:	2300      	movs	r3, #0
 800b564:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b566:	4b4f      	ldr	r3, [pc, #316]	@ (800b6a4 <xTaskIncrementTick+0x148>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f040 8090 	bne.w	800b690 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b570:	4b4d      	ldr	r3, [pc, #308]	@ (800b6a8 <xTaskIncrementTick+0x14c>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3301      	adds	r3, #1
 800b576:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b578:	4a4b      	ldr	r2, [pc, #300]	@ (800b6a8 <xTaskIncrementTick+0x14c>)
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d121      	bne.n	800b5c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b584:	4b49      	ldr	r3, [pc, #292]	@ (800b6ac <xTaskIncrementTick+0x150>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00b      	beq.n	800b5a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	603b      	str	r3, [r7, #0]
}
 800b5a0:	bf00      	nop
 800b5a2:	bf00      	nop
 800b5a4:	e7fd      	b.n	800b5a2 <xTaskIncrementTick+0x46>
 800b5a6:	4b41      	ldr	r3, [pc, #260]	@ (800b6ac <xTaskIncrementTick+0x150>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	60fb      	str	r3, [r7, #12]
 800b5ac:	4b40      	ldr	r3, [pc, #256]	@ (800b6b0 <xTaskIncrementTick+0x154>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a3e      	ldr	r2, [pc, #248]	@ (800b6ac <xTaskIncrementTick+0x150>)
 800b5b2:	6013      	str	r3, [r2, #0]
 800b5b4:	4a3e      	ldr	r2, [pc, #248]	@ (800b6b0 <xTaskIncrementTick+0x154>)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	6013      	str	r3, [r2, #0]
 800b5ba:	4b3e      	ldr	r3, [pc, #248]	@ (800b6b4 <xTaskIncrementTick+0x158>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	4a3c      	ldr	r2, [pc, #240]	@ (800b6b4 <xTaskIncrementTick+0x158>)
 800b5c2:	6013      	str	r3, [r2, #0]
 800b5c4:	f000 fae4 	bl	800bb90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b5c8:	4b3b      	ldr	r3, [pc, #236]	@ (800b6b8 <xTaskIncrementTick+0x15c>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d349      	bcc.n	800b666 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5d2:	4b36      	ldr	r3, [pc, #216]	@ (800b6ac <xTaskIncrementTick+0x150>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d104      	bne.n	800b5e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5dc:	4b36      	ldr	r3, [pc, #216]	@ (800b6b8 <xTaskIncrementTick+0x15c>)
 800b5de:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e2:	601a      	str	r2, [r3, #0]
					break;
 800b5e4:	e03f      	b.n	800b666 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e6:	4b31      	ldr	r3, [pc, #196]	@ (800b6ac <xTaskIncrementTick+0x150>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5f6:	693a      	ldr	r2, [r7, #16]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d203      	bcs.n	800b606 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5fe:	4a2e      	ldr	r2, [pc, #184]	@ (800b6b8 <xTaskIncrementTick+0x15c>)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b604:	e02f      	b.n	800b666 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	3304      	adds	r3, #4
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fe fc56 	bl	8009ebc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b614:	2b00      	cmp	r3, #0
 800b616:	d004      	beq.n	800b622 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	3318      	adds	r3, #24
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7fe fc4d 	bl	8009ebc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b626:	4b25      	ldr	r3, [pc, #148]	@ (800b6bc <xTaskIncrementTick+0x160>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d903      	bls.n	800b636 <xTaskIncrementTick+0xda>
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b632:	4a22      	ldr	r2, [pc, #136]	@ (800b6bc <xTaskIncrementTick+0x160>)
 800b634:	6013      	str	r3, [r2, #0]
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b63a:	4613      	mov	r3, r2
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	4413      	add	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4a1f      	ldr	r2, [pc, #124]	@ (800b6c0 <xTaskIncrementTick+0x164>)
 800b644:	441a      	add	r2, r3
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	3304      	adds	r3, #4
 800b64a:	4619      	mov	r1, r3
 800b64c:	4610      	mov	r0, r2
 800b64e:	f7fe fbd8 	bl	8009e02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b656:	4b1b      	ldr	r3, [pc, #108]	@ (800b6c4 <xTaskIncrementTick+0x168>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d3b8      	bcc.n	800b5d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b660:	2301      	movs	r3, #1
 800b662:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b664:	e7b5      	b.n	800b5d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b666:	4b17      	ldr	r3, [pc, #92]	@ (800b6c4 <xTaskIncrementTick+0x168>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b66c:	4914      	ldr	r1, [pc, #80]	@ (800b6c0 <xTaskIncrementTick+0x164>)
 800b66e:	4613      	mov	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4413      	add	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	440b      	add	r3, r1
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d901      	bls.n	800b682 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b67e:	2301      	movs	r3, #1
 800b680:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b682:	4b11      	ldr	r3, [pc, #68]	@ (800b6c8 <xTaskIncrementTick+0x16c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d007      	beq.n	800b69a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b68a:	2301      	movs	r3, #1
 800b68c:	617b      	str	r3, [r7, #20]
 800b68e:	e004      	b.n	800b69a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b690:	4b0e      	ldr	r3, [pc, #56]	@ (800b6cc <xTaskIncrementTick+0x170>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	3301      	adds	r3, #1
 800b696:	4a0d      	ldr	r2, [pc, #52]	@ (800b6cc <xTaskIncrementTick+0x170>)
 800b698:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b69a:	697b      	ldr	r3, [r7, #20]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3718      	adds	r7, #24
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	20000c20 	.word	0x20000c20
 800b6a8:	20000bfc 	.word	0x20000bfc
 800b6ac:	20000bb0 	.word	0x20000bb0
 800b6b0:	20000bb4 	.word	0x20000bb4
 800b6b4:	20000c10 	.word	0x20000c10
 800b6b8:	20000c18 	.word	0x20000c18
 800b6bc:	20000c00 	.word	0x20000c00
 800b6c0:	20000728 	.word	0x20000728
 800b6c4:	20000724 	.word	0x20000724
 800b6c8:	20000c0c 	.word	0x20000c0c
 800b6cc:	20000c08 	.word	0x20000c08

0800b6d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6d6:	4b30      	ldr	r3, [pc, #192]	@ (800b798 <vTaskSwitchContext+0xc8>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d003      	beq.n	800b6e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6de:	4b2f      	ldr	r3, [pc, #188]	@ (800b79c <vTaskSwitchContext+0xcc>)
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6e4:	e053      	b.n	800b78e <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 800b6e6:	4b2d      	ldr	r3, [pc, #180]	@ (800b79c <vTaskSwitchContext+0xcc>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b6ec:	4b2c      	ldr	r3, [pc, #176]	@ (800b7a0 <vTaskSwitchContext+0xd0>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	4b2b      	ldr	r3, [pc, #172]	@ (800b7a0 <vTaskSwitchContext+0xd0>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d808      	bhi.n	800b70e <vTaskSwitchContext+0x3e>
 800b6fc:	4b28      	ldr	r3, [pc, #160]	@ (800b7a0 <vTaskSwitchContext+0xd0>)
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	4b27      	ldr	r3, [pc, #156]	@ (800b7a0 <vTaskSwitchContext+0xd0>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	3334      	adds	r3, #52	@ 0x34
 800b706:	4619      	mov	r1, r3
 800b708:	4610      	mov	r0, r2
 800b70a:	f7f4 fdf7 	bl	80002fc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b70e:	4b25      	ldr	r3, [pc, #148]	@ (800b7a4 <vTaskSwitchContext+0xd4>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	60fb      	str	r3, [r7, #12]
 800b714:	e011      	b.n	800b73a <vTaskSwitchContext+0x6a>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d10b      	bne.n	800b734 <vTaskSwitchContext+0x64>
	__asm volatile
 800b71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b720:	f383 8811 	msr	BASEPRI, r3
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	f3bf 8f4f 	dsb	sy
 800b72c:	607b      	str	r3, [r7, #4]
}
 800b72e:	bf00      	nop
 800b730:	bf00      	nop
 800b732:	e7fd      	b.n	800b730 <vTaskSwitchContext+0x60>
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	3b01      	subs	r3, #1
 800b738:	60fb      	str	r3, [r7, #12]
 800b73a:	491b      	ldr	r1, [pc, #108]	@ (800b7a8 <vTaskSwitchContext+0xd8>)
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	4613      	mov	r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4413      	add	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	440b      	add	r3, r1
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d0e3      	beq.n	800b716 <vTaskSwitchContext+0x46>
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	4613      	mov	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	4413      	add	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4a13      	ldr	r2, [pc, #76]	@ (800b7a8 <vTaskSwitchContext+0xd8>)
 800b75a:	4413      	add	r3, r2
 800b75c:	60bb      	str	r3, [r7, #8]
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	605a      	str	r2, [r3, #4]
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	3308      	adds	r3, #8
 800b770:	429a      	cmp	r2, r3
 800b772:	d104      	bne.n	800b77e <vTaskSwitchContext+0xae>
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	685a      	ldr	r2, [r3, #4]
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	605a      	str	r2, [r3, #4]
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	4a06      	ldr	r2, [pc, #24]	@ (800b7a0 <vTaskSwitchContext+0xd0>)
 800b786:	6013      	str	r3, [r2, #0]
 800b788:	4a06      	ldr	r2, [pc, #24]	@ (800b7a4 <vTaskSwitchContext+0xd4>)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6013      	str	r3, [r2, #0]
}
 800b78e:	bf00      	nop
 800b790:	3710      	adds	r7, #16
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	20000c20 	.word	0x20000c20
 800b79c:	20000c0c 	.word	0x20000c0c
 800b7a0:	20000724 	.word	0x20000724
 800b7a4:	20000c00 	.word	0x20000c00
 800b7a8:	20000728 	.word	0x20000728

0800b7ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10b      	bne.n	800b7d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c0:	f383 8811 	msr	BASEPRI, r3
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	60fb      	str	r3, [r7, #12]
}
 800b7ce:	bf00      	nop
 800b7d0:	bf00      	nop
 800b7d2:	e7fd      	b.n	800b7d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7d4:	4b07      	ldr	r3, [pc, #28]	@ (800b7f4 <vTaskPlaceOnEventList+0x48>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	3318      	adds	r3, #24
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7fe fb34 	bl	8009e4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7e2:	2101      	movs	r1, #1
 800b7e4:	6838      	ldr	r0, [r7, #0]
 800b7e6:	f000 fb81 	bl	800beec <prvAddCurrentTaskToDelayedList>
}
 800b7ea:	bf00      	nop
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	20000724 	.word	0x20000724

0800b7f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d10b      	bne.n	800b822 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b80e:	f383 8811 	msr	BASEPRI, r3
 800b812:	f3bf 8f6f 	isb	sy
 800b816:	f3bf 8f4f 	dsb	sy
 800b81a:	617b      	str	r3, [r7, #20]
}
 800b81c:	bf00      	nop
 800b81e:	bf00      	nop
 800b820:	e7fd      	b.n	800b81e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b822:	4b0a      	ldr	r3, [pc, #40]	@ (800b84c <vTaskPlaceOnEventListRestricted+0x54>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3318      	adds	r3, #24
 800b828:	4619      	mov	r1, r3
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f7fe fae9 	bl	8009e02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d002      	beq.n	800b83c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b836:	f04f 33ff 	mov.w	r3, #4294967295
 800b83a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b83c:	6879      	ldr	r1, [r7, #4]
 800b83e:	68b8      	ldr	r0, [r7, #8]
 800b840:	f000 fb54 	bl	800beec <prvAddCurrentTaskToDelayedList>
	}
 800b844:	bf00      	nop
 800b846:	3718      	adds	r7, #24
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	20000724 	.word	0x20000724

0800b850 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d10b      	bne.n	800b87e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b86a:	f383 8811 	msr	BASEPRI, r3
 800b86e:	f3bf 8f6f 	isb	sy
 800b872:	f3bf 8f4f 	dsb	sy
 800b876:	60fb      	str	r3, [r7, #12]
}
 800b878:	bf00      	nop
 800b87a:	bf00      	nop
 800b87c:	e7fd      	b.n	800b87a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	3318      	adds	r3, #24
 800b882:	4618      	mov	r0, r3
 800b884:	f7fe fb1a 	bl	8009ebc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b888:	4b1d      	ldr	r3, [pc, #116]	@ (800b900 <xTaskRemoveFromEventList+0xb0>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d11d      	bne.n	800b8cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	3304      	adds	r3, #4
 800b894:	4618      	mov	r0, r3
 800b896:	f7fe fb11 	bl	8009ebc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b89e:	4b19      	ldr	r3, [pc, #100]	@ (800b904 <xTaskRemoveFromEventList+0xb4>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d903      	bls.n	800b8ae <xTaskRemoveFromEventList+0x5e>
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8aa:	4a16      	ldr	r2, [pc, #88]	@ (800b904 <xTaskRemoveFromEventList+0xb4>)
 800b8ac:	6013      	str	r3, [r2, #0]
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	4413      	add	r3, r2
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	4a13      	ldr	r2, [pc, #76]	@ (800b908 <xTaskRemoveFromEventList+0xb8>)
 800b8bc:	441a      	add	r2, r3
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	3304      	adds	r3, #4
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	f7fe fa9c 	bl	8009e02 <vListInsertEnd>
 800b8ca:	e005      	b.n	800b8d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	3318      	adds	r3, #24
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	480e      	ldr	r0, [pc, #56]	@ (800b90c <xTaskRemoveFromEventList+0xbc>)
 800b8d4:	f7fe fa95 	bl	8009e02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b910 <xTaskRemoveFromEventList+0xc0>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d905      	bls.n	800b8f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8ea:	4b0a      	ldr	r3, [pc, #40]	@ (800b914 <xTaskRemoveFromEventList+0xc4>)
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	e001      	b.n	800b8f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b8f6:	697b      	ldr	r3, [r7, #20]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3718      	adds	r7, #24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	20000c20 	.word	0x20000c20
 800b904:	20000c00 	.word	0x20000c00
 800b908:	20000728 	.word	0x20000728
 800b90c:	20000bb8 	.word	0x20000bb8
 800b910:	20000724 	.word	0x20000724
 800b914:	20000c0c 	.word	0x20000c0c

0800b918 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b920:	4b06      	ldr	r3, [pc, #24]	@ (800b93c <vTaskInternalSetTimeOutState+0x24>)
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b928:	4b05      	ldr	r3, [pc, #20]	@ (800b940 <vTaskInternalSetTimeOutState+0x28>)
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	605a      	str	r2, [r3, #4]
}
 800b930:	bf00      	nop
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	20000c10 	.word	0x20000c10
 800b940:	20000bfc 	.word	0x20000bfc

0800b944 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b088      	sub	sp, #32
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10b      	bne.n	800b96c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	613b      	str	r3, [r7, #16]
}
 800b966:	bf00      	nop
 800b968:	bf00      	nop
 800b96a:	e7fd      	b.n	800b968 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10b      	bne.n	800b98a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	60fb      	str	r3, [r7, #12]
}
 800b984:	bf00      	nop
 800b986:	bf00      	nop
 800b988:	e7fd      	b.n	800b986 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b98a:	f000 ff8d 	bl	800c8a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b98e:	4b1d      	ldr	r3, [pc, #116]	@ (800ba04 <xTaskCheckForTimeOut+0xc0>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	69ba      	ldr	r2, [r7, #24]
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a6:	d102      	bne.n	800b9ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	61fb      	str	r3, [r7, #28]
 800b9ac:	e023      	b.n	800b9f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	4b15      	ldr	r3, [pc, #84]	@ (800ba08 <xTaskCheckForTimeOut+0xc4>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d007      	beq.n	800b9ca <xTaskCheckForTimeOut+0x86>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	69ba      	ldr	r2, [r7, #24]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d302      	bcc.n	800b9ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	61fb      	str	r3, [r7, #28]
 800b9c8:	e015      	b.n	800b9f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	697a      	ldr	r2, [r7, #20]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d20b      	bcs.n	800b9ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	1ad2      	subs	r2, r2, r3
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff ff99 	bl	800b918 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	61fb      	str	r3, [r7, #28]
 800b9ea:	e004      	b.n	800b9f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9f6:	f000 ff89 	bl	800c90c <vPortExitCritical>

	return xReturn;
 800b9fa:	69fb      	ldr	r3, [r7, #28]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3720      	adds	r7, #32
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	20000bfc 	.word	0x20000bfc
 800ba08:	20000c10 	.word	0x20000c10

0800ba0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ba10:	4b03      	ldr	r3, [pc, #12]	@ (800ba20 <vTaskMissedYield+0x14>)
 800ba12:	2201      	movs	r2, #1
 800ba14:	601a      	str	r2, [r3, #0]
}
 800ba16:	bf00      	nop
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr
 800ba20:	20000c0c 	.word	0x20000c0c

0800ba24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba2c:	f000 f852 	bl	800bad4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba30:	4b06      	ldr	r3, [pc, #24]	@ (800ba4c <prvIdleTask+0x28>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d9f9      	bls.n	800ba2c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba38:	4b05      	ldr	r3, [pc, #20]	@ (800ba50 <prvIdleTask+0x2c>)
 800ba3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	f3bf 8f4f 	dsb	sy
 800ba44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba48:	e7f0      	b.n	800ba2c <prvIdleTask+0x8>
 800ba4a:	bf00      	nop
 800ba4c:	20000728 	.word	0x20000728
 800ba50:	e000ed04 	.word	0xe000ed04

0800ba54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	607b      	str	r3, [r7, #4]
 800ba5e:	e00c      	b.n	800ba7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	4613      	mov	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4413      	add	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	4a12      	ldr	r2, [pc, #72]	@ (800bab4 <prvInitialiseTaskLists+0x60>)
 800ba6c:	4413      	add	r3, r2
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fe f99a 	bl	8009da8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	3301      	adds	r3, #1
 800ba78:	607b      	str	r3, [r7, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2b37      	cmp	r3, #55	@ 0x37
 800ba7e:	d9ef      	bls.n	800ba60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba80:	480d      	ldr	r0, [pc, #52]	@ (800bab8 <prvInitialiseTaskLists+0x64>)
 800ba82:	f7fe f991 	bl	8009da8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba86:	480d      	ldr	r0, [pc, #52]	@ (800babc <prvInitialiseTaskLists+0x68>)
 800ba88:	f7fe f98e 	bl	8009da8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba8c:	480c      	ldr	r0, [pc, #48]	@ (800bac0 <prvInitialiseTaskLists+0x6c>)
 800ba8e:	f7fe f98b 	bl	8009da8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba92:	480c      	ldr	r0, [pc, #48]	@ (800bac4 <prvInitialiseTaskLists+0x70>)
 800ba94:	f7fe f988 	bl	8009da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba98:	480b      	ldr	r0, [pc, #44]	@ (800bac8 <prvInitialiseTaskLists+0x74>)
 800ba9a:	f7fe f985 	bl	8009da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba9e:	4b0b      	ldr	r3, [pc, #44]	@ (800bacc <prvInitialiseTaskLists+0x78>)
 800baa0:	4a05      	ldr	r2, [pc, #20]	@ (800bab8 <prvInitialiseTaskLists+0x64>)
 800baa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800baa4:	4b0a      	ldr	r3, [pc, #40]	@ (800bad0 <prvInitialiseTaskLists+0x7c>)
 800baa6:	4a05      	ldr	r2, [pc, #20]	@ (800babc <prvInitialiseTaskLists+0x68>)
 800baa8:	601a      	str	r2, [r3, #0]
}
 800baaa:	bf00      	nop
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	20000728 	.word	0x20000728
 800bab8:	20000b88 	.word	0x20000b88
 800babc:	20000b9c 	.word	0x20000b9c
 800bac0:	20000bb8 	.word	0x20000bb8
 800bac4:	20000bcc 	.word	0x20000bcc
 800bac8:	20000be4 	.word	0x20000be4
 800bacc:	20000bb0 	.word	0x20000bb0
 800bad0:	20000bb4 	.word	0x20000bb4

0800bad4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bada:	e019      	b.n	800bb10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800badc:	f000 fee4 	bl	800c8a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bae0:	4b10      	ldr	r3, [pc, #64]	@ (800bb24 <prvCheckTasksWaitingTermination+0x50>)
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	3304      	adds	r3, #4
 800baec:	4618      	mov	r0, r3
 800baee:	f7fe f9e5 	bl	8009ebc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800baf2:	4b0d      	ldr	r3, [pc, #52]	@ (800bb28 <prvCheckTasksWaitingTermination+0x54>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	3b01      	subs	r3, #1
 800baf8:	4a0b      	ldr	r2, [pc, #44]	@ (800bb28 <prvCheckTasksWaitingTermination+0x54>)
 800bafa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bafc:	4b0b      	ldr	r3, [pc, #44]	@ (800bb2c <prvCheckTasksWaitingTermination+0x58>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	3b01      	subs	r3, #1
 800bb02:	4a0a      	ldr	r2, [pc, #40]	@ (800bb2c <prvCheckTasksWaitingTermination+0x58>)
 800bb04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bb06:	f000 ff01 	bl	800c90c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f810 	bl	800bb30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb10:	4b06      	ldr	r3, [pc, #24]	@ (800bb2c <prvCheckTasksWaitingTermination+0x58>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d1e1      	bne.n	800badc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bb18:	bf00      	nop
 800bb1a:	bf00      	nop
 800bb1c:	3708      	adds	r7, #8
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	20000bcc 	.word	0x20000bcc
 800bb28:	20000bf8 	.word	0x20000bf8
 800bb2c:	20000be0 	.word	0x20000be0

0800bb30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d108      	bne.n	800bb54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb46:	4618      	mov	r0, r3
 800bb48:	f001 f8a4 	bl	800cc94 <vPortFree>
				vPortFree( pxTCB );
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f001 f8a1 	bl	800cc94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb52:	e019      	b.n	800bb88 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d103      	bne.n	800bb66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f001 f898 	bl	800cc94 <vPortFree>
	}
 800bb64:	e010      	b.n	800bb88 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d00b      	beq.n	800bb88 <prvDeleteTCB+0x58>
	__asm volatile
 800bb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb74:	f383 8811 	msr	BASEPRI, r3
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	60fb      	str	r3, [r7, #12]
}
 800bb82:	bf00      	nop
 800bb84:	bf00      	nop
 800bb86:	e7fd      	b.n	800bb84 <prvDeleteTCB+0x54>
	}
 800bb88:	bf00      	nop
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb96:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc8 <prvResetNextTaskUnblockTime+0x38>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d104      	bne.n	800bbaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bba0:	4b0a      	ldr	r3, [pc, #40]	@ (800bbcc <prvResetNextTaskUnblockTime+0x3c>)
 800bba2:	f04f 32ff 	mov.w	r2, #4294967295
 800bba6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bba8:	e008      	b.n	800bbbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbaa:	4b07      	ldr	r3, [pc, #28]	@ (800bbc8 <prvResetNextTaskUnblockTime+0x38>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	4a04      	ldr	r2, [pc, #16]	@ (800bbcc <prvResetNextTaskUnblockTime+0x3c>)
 800bbba:	6013      	str	r3, [r2, #0]
}
 800bbbc:	bf00      	nop
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr
 800bbc8:	20000bb0 	.word	0x20000bb0
 800bbcc:	20000c18 	.word	0x20000c18

0800bbd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bbd6:	4b0b      	ldr	r3, [pc, #44]	@ (800bc04 <xTaskGetSchedulerState+0x34>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d102      	bne.n	800bbe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	607b      	str	r3, [r7, #4]
 800bbe2:	e008      	b.n	800bbf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbe4:	4b08      	ldr	r3, [pc, #32]	@ (800bc08 <xTaskGetSchedulerState+0x38>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d102      	bne.n	800bbf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bbec:	2302      	movs	r3, #2
 800bbee:	607b      	str	r3, [r7, #4]
 800bbf0:	e001      	b.n	800bbf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbf6:	687b      	ldr	r3, [r7, #4]
	}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	20000c04 	.word	0x20000c04
 800bc08:	20000c20 	.word	0x20000c20

0800bc0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d051      	beq.n	800bcc6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc26:	4b2a      	ldr	r3, [pc, #168]	@ (800bcd0 <xTaskPriorityInherit+0xc4>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d241      	bcs.n	800bcb4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	db06      	blt.n	800bc46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc38:	4b25      	ldr	r3, [pc, #148]	@ (800bcd0 <xTaskPriorityInherit+0xc4>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	6959      	ldr	r1, [r3, #20]
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc4e:	4613      	mov	r3, r2
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	4413      	add	r3, r2
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4a1f      	ldr	r2, [pc, #124]	@ (800bcd4 <xTaskPriorityInherit+0xc8>)
 800bc58:	4413      	add	r3, r2
 800bc5a:	4299      	cmp	r1, r3
 800bc5c:	d122      	bne.n	800bca4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	3304      	adds	r3, #4
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe f92a 	bl	8009ebc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc68:	4b19      	ldr	r3, [pc, #100]	@ (800bcd0 <xTaskPriorityInherit+0xc4>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc76:	4b18      	ldr	r3, [pc, #96]	@ (800bcd8 <xTaskPriorityInherit+0xcc>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d903      	bls.n	800bc86 <xTaskPriorityInherit+0x7a>
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc82:	4a15      	ldr	r2, [pc, #84]	@ (800bcd8 <xTaskPriorityInherit+0xcc>)
 800bc84:	6013      	str	r3, [r2, #0]
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4a10      	ldr	r2, [pc, #64]	@ (800bcd4 <xTaskPriorityInherit+0xc8>)
 800bc94:	441a      	add	r2, r3
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	3304      	adds	r3, #4
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	4610      	mov	r0, r2
 800bc9e:	f7fe f8b0 	bl	8009e02 <vListInsertEnd>
 800bca2:	e004      	b.n	800bcae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bca4:	4b0a      	ldr	r3, [pc, #40]	@ (800bcd0 <xTaskPriorityInherit+0xc4>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	60fb      	str	r3, [r7, #12]
 800bcb2:	e008      	b.n	800bcc6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bcb8:	4b05      	ldr	r3, [pc, #20]	@ (800bcd0 <xTaskPriorityInherit+0xc4>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d201      	bcs.n	800bcc6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
	}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	20000724 	.word	0x20000724
 800bcd4:	20000728 	.word	0x20000728
 800bcd8:	20000c00 	.word	0x20000c00

0800bcdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bce8:	2300      	movs	r3, #0
 800bcea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d058      	beq.n	800bda4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcf2:	4b2f      	ldr	r3, [pc, #188]	@ (800bdb0 <xTaskPriorityDisinherit+0xd4>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	693a      	ldr	r2, [r7, #16]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d00b      	beq.n	800bd14 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bcfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd00:	f383 8811 	msr	BASEPRI, r3
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	60fb      	str	r3, [r7, #12]
}
 800bd0e:	bf00      	nop
 800bd10:	bf00      	nop
 800bd12:	e7fd      	b.n	800bd10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d10b      	bne.n	800bd34 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bd1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	60bb      	str	r3, [r7, #8]
}
 800bd2e:	bf00      	nop
 800bd30:	bf00      	nop
 800bd32:	e7fd      	b.n	800bd30 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd38:	1e5a      	subs	r2, r3, #1
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d02c      	beq.n	800bda4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d128      	bne.n	800bda4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	3304      	adds	r3, #4
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fe f8b0 	bl	8009ebc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd74:	4b0f      	ldr	r3, [pc, #60]	@ (800bdb4 <xTaskPriorityDisinherit+0xd8>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d903      	bls.n	800bd84 <xTaskPriorityDisinherit+0xa8>
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd80:	4a0c      	ldr	r2, [pc, #48]	@ (800bdb4 <xTaskPriorityDisinherit+0xd8>)
 800bd82:	6013      	str	r3, [r2, #0]
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd88:	4613      	mov	r3, r2
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	4413      	add	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4a09      	ldr	r2, [pc, #36]	@ (800bdb8 <xTaskPriorityDisinherit+0xdc>)
 800bd92:	441a      	add	r2, r3
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	3304      	adds	r3, #4
 800bd98:	4619      	mov	r1, r3
 800bd9a:	4610      	mov	r0, r2
 800bd9c:	f7fe f831 	bl	8009e02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bda0:	2301      	movs	r3, #1
 800bda2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bda4:	697b      	ldr	r3, [r7, #20]
	}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3718      	adds	r7, #24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	20000724 	.word	0x20000724
 800bdb4:	20000c00 	.word	0x20000c00
 800bdb8:	20000728 	.word	0x20000728

0800bdbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b088      	sub	sp, #32
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d06c      	beq.n	800beae <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10b      	bne.n	800bdf4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	60fb      	str	r3, [r7, #12]
}
 800bdee:	bf00      	nop
 800bdf0:	bf00      	nop
 800bdf2:	e7fd      	b.n	800bdf0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdf8:	683a      	ldr	r2, [r7, #0]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d902      	bls.n	800be04 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	61fb      	str	r3, [r7, #28]
 800be02:	e002      	b.n	800be0a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be08:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0e:	69fa      	ldr	r2, [r7, #28]
 800be10:	429a      	cmp	r2, r3
 800be12:	d04c      	beq.n	800beae <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be18:	697a      	ldr	r2, [r7, #20]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d147      	bne.n	800beae <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800be1e:	4b26      	ldr	r3, [pc, #152]	@ (800beb8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	69ba      	ldr	r2, [r7, #24]
 800be24:	429a      	cmp	r2, r3
 800be26:	d10b      	bne.n	800be40 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800be28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	60bb      	str	r3, [r7, #8]
}
 800be3a:	bf00      	nop
 800be3c:	bf00      	nop
 800be3e:	e7fd      	b.n	800be3c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be44:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	69fa      	ldr	r2, [r7, #28]
 800be4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	2b00      	cmp	r3, #0
 800be52:	db04      	blt.n	800be5e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	6959      	ldr	r1, [r3, #20]
 800be62:	693a      	ldr	r2, [r7, #16]
 800be64:	4613      	mov	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4413      	add	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4a13      	ldr	r2, [pc, #76]	@ (800bebc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800be6e:	4413      	add	r3, r2
 800be70:	4299      	cmp	r1, r3
 800be72:	d11c      	bne.n	800beae <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	3304      	adds	r3, #4
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fe f81f 	bl	8009ebc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be82:	4b0f      	ldr	r3, [pc, #60]	@ (800bec0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	429a      	cmp	r2, r3
 800be88:	d903      	bls.n	800be92 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be8e:	4a0c      	ldr	r2, [pc, #48]	@ (800bec0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800be90:	6013      	str	r3, [r2, #0]
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be96:	4613      	mov	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	4413      	add	r3, r2
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	4a07      	ldr	r2, [pc, #28]	@ (800bebc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bea0:	441a      	add	r2, r3
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	3304      	adds	r3, #4
 800bea6:	4619      	mov	r1, r3
 800bea8:	4610      	mov	r0, r2
 800beaa:	f7fd ffaa 	bl	8009e02 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800beae:	bf00      	nop
 800beb0:	3720      	adds	r7, #32
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	20000724 	.word	0x20000724
 800bebc:	20000728 	.word	0x20000728
 800bec0:	20000c00 	.word	0x20000c00

0800bec4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bec4:	b480      	push	{r7}
 800bec6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bec8:	4b07      	ldr	r3, [pc, #28]	@ (800bee8 <pvTaskIncrementMutexHeldCount+0x24>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d004      	beq.n	800beda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bed0:	4b05      	ldr	r3, [pc, #20]	@ (800bee8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bed6:	3201      	adds	r2, #1
 800bed8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800beda:	4b03      	ldr	r3, [pc, #12]	@ (800bee8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bedc:	681b      	ldr	r3, [r3, #0]
	}
 800bede:	4618      	mov	r0, r3
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr
 800bee8:	20000724 	.word	0x20000724

0800beec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bef6:	4b21      	ldr	r3, [pc, #132]	@ (800bf7c <prvAddCurrentTaskToDelayedList+0x90>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800befc:	4b20      	ldr	r3, [pc, #128]	@ (800bf80 <prvAddCurrentTaskToDelayedList+0x94>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	3304      	adds	r3, #4
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fd ffda 	bl	8009ebc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0e:	d10a      	bne.n	800bf26 <prvAddCurrentTaskToDelayedList+0x3a>
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d007      	beq.n	800bf26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf16:	4b1a      	ldr	r3, [pc, #104]	@ (800bf80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	4819      	ldr	r0, [pc, #100]	@ (800bf84 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf20:	f7fd ff6f 	bl	8009e02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf24:	e026      	b.n	800bf74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf2e:	4b14      	ldr	r3, [pc, #80]	@ (800bf80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d209      	bcs.n	800bf52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf3e:	4b12      	ldr	r3, [pc, #72]	@ (800bf88 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	4b0f      	ldr	r3, [pc, #60]	@ (800bf80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	3304      	adds	r3, #4
 800bf48:	4619      	mov	r1, r3
 800bf4a:	4610      	mov	r0, r2
 800bf4c:	f7fd ff7d 	bl	8009e4a <vListInsert>
}
 800bf50:	e010      	b.n	800bf74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf52:	4b0e      	ldr	r3, [pc, #56]	@ (800bf8c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	4b0a      	ldr	r3, [pc, #40]	@ (800bf80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	4610      	mov	r0, r2
 800bf60:	f7fd ff73 	bl	8009e4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf64:	4b0a      	ldr	r3, [pc, #40]	@ (800bf90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d202      	bcs.n	800bf74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf6e:	4a08      	ldr	r2, [pc, #32]	@ (800bf90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	6013      	str	r3, [r2, #0]
}
 800bf74:	bf00      	nop
 800bf76:	3710      	adds	r7, #16
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	20000bfc 	.word	0x20000bfc
 800bf80:	20000724 	.word	0x20000724
 800bf84:	20000be4 	.word	0x20000be4
 800bf88:	20000bb4 	.word	0x20000bb4
 800bf8c:	20000bb0 	.word	0x20000bb0
 800bf90:	20000c18 	.word	0x20000c18

0800bf94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b08a      	sub	sp, #40	@ 0x28
 800bf98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf9e:	f000 fb13 	bl	800c5c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bfa2:	4b1d      	ldr	r3, [pc, #116]	@ (800c018 <xTimerCreateTimerTask+0x84>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d021      	beq.n	800bfee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bfb2:	1d3a      	adds	r2, r7, #4
 800bfb4:	f107 0108 	add.w	r1, r7, #8
 800bfb8:	f107 030c 	add.w	r3, r7, #12
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7fd fed9 	bl	8009d74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bfc2:	6879      	ldr	r1, [r7, #4]
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	9202      	str	r2, [sp, #8]
 800bfca:	9301      	str	r3, [sp, #4]
 800bfcc:	2302      	movs	r3, #2
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	460a      	mov	r2, r1
 800bfd4:	4911      	ldr	r1, [pc, #68]	@ (800c01c <xTimerCreateTimerTask+0x88>)
 800bfd6:	4812      	ldr	r0, [pc, #72]	@ (800c020 <xTimerCreateTimerTask+0x8c>)
 800bfd8:	f7fe ffc0 	bl	800af5c <xTaskCreateStatic>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	4a11      	ldr	r2, [pc, #68]	@ (800c024 <xTimerCreateTimerTask+0x90>)
 800bfe0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bfe2:	4b10      	ldr	r3, [pc, #64]	@ (800c024 <xTimerCreateTimerTask+0x90>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d001      	beq.n	800bfee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bfea:	2301      	movs	r3, #1
 800bfec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10b      	bne.n	800c00c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	613b      	str	r3, [r7, #16]
}
 800c006:	bf00      	nop
 800c008:	bf00      	nop
 800c00a:	e7fd      	b.n	800c008 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c00c:	697b      	ldr	r3, [r7, #20]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3718      	adds	r7, #24
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	20000c54 	.word	0x20000c54
 800c01c:	0800f120 	.word	0x0800f120
 800c020:	0800c161 	.word	0x0800c161
 800c024:	20000c58 	.word	0x20000c58

0800c028 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b08a      	sub	sp, #40	@ 0x28
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
 800c034:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c036:	2300      	movs	r3, #0
 800c038:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10b      	bne.n	800c058 <xTimerGenericCommand+0x30>
	__asm volatile
 800c040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c044:	f383 8811 	msr	BASEPRI, r3
 800c048:	f3bf 8f6f 	isb	sy
 800c04c:	f3bf 8f4f 	dsb	sy
 800c050:	623b      	str	r3, [r7, #32]
}
 800c052:	bf00      	nop
 800c054:	bf00      	nop
 800c056:	e7fd      	b.n	800c054 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c058:	4b19      	ldr	r3, [pc, #100]	@ (800c0c0 <xTimerGenericCommand+0x98>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d02a      	beq.n	800c0b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	2b05      	cmp	r3, #5
 800c070:	dc18      	bgt.n	800c0a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c072:	f7ff fdad 	bl	800bbd0 <xTaskGetSchedulerState>
 800c076:	4603      	mov	r3, r0
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d109      	bne.n	800c090 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c07c:	4b10      	ldr	r3, [pc, #64]	@ (800c0c0 <xTimerGenericCommand+0x98>)
 800c07e:	6818      	ldr	r0, [r3, #0]
 800c080:	f107 0110 	add.w	r1, r7, #16
 800c084:	2300      	movs	r3, #0
 800c086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c088:	f7fe f942 	bl	800a310 <xQueueGenericSend>
 800c08c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c08e:	e012      	b.n	800c0b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c090:	4b0b      	ldr	r3, [pc, #44]	@ (800c0c0 <xTimerGenericCommand+0x98>)
 800c092:	6818      	ldr	r0, [r3, #0]
 800c094:	f107 0110 	add.w	r1, r7, #16
 800c098:	2300      	movs	r3, #0
 800c09a:	2200      	movs	r2, #0
 800c09c:	f7fe f938 	bl	800a310 <xQueueGenericSend>
 800c0a0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c0a2:	e008      	b.n	800c0b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c0a4:	4b06      	ldr	r3, [pc, #24]	@ (800c0c0 <xTimerGenericCommand+0x98>)
 800c0a6:	6818      	ldr	r0, [r3, #0]
 800c0a8:	f107 0110 	add.w	r1, r7, #16
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	683a      	ldr	r2, [r7, #0]
 800c0b0:	f7fe fa30 	bl	800a514 <xQueueGenericSendFromISR>
 800c0b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3728      	adds	r7, #40	@ 0x28
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	20000c54 	.word	0x20000c54

0800c0c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b088      	sub	sp, #32
 800c0c8:	af02      	add	r7, sp, #8
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ce:	4b23      	ldr	r3, [pc, #140]	@ (800c15c <prvProcessExpiredTimer+0x98>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fd feed 	bl	8009ebc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0e8:	f003 0304 	and.w	r3, r3, #4
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d023      	beq.n	800c138 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	699a      	ldr	r2, [r3, #24]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	18d1      	adds	r1, r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	6978      	ldr	r0, [r7, #20]
 800c0fe:	f000 f8d5 	bl	800c2ac <prvInsertTimerInActiveList>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d020      	beq.n	800c14a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c108:	2300      	movs	r3, #0
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	2300      	movs	r3, #0
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	2100      	movs	r1, #0
 800c112:	6978      	ldr	r0, [r7, #20]
 800c114:	f7ff ff88 	bl	800c028 <xTimerGenericCommand>
 800c118:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d114      	bne.n	800c14a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c124:	f383 8811 	msr	BASEPRI, r3
 800c128:	f3bf 8f6f 	isb	sy
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	60fb      	str	r3, [r7, #12]
}
 800c132:	bf00      	nop
 800c134:	bf00      	nop
 800c136:	e7fd      	b.n	800c134 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c13e:	f023 0301 	bic.w	r3, r3, #1
 800c142:	b2da      	uxtb	r2, r3
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	6a1b      	ldr	r3, [r3, #32]
 800c14e:	6978      	ldr	r0, [r7, #20]
 800c150:	4798      	blx	r3
}
 800c152:	bf00      	nop
 800c154:	3718      	adds	r7, #24
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	20000c4c 	.word	0x20000c4c

0800c160 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c168:	f107 0308 	add.w	r3, r7, #8
 800c16c:	4618      	mov	r0, r3
 800c16e:	f000 f859 	bl	800c224 <prvGetNextExpireTime>
 800c172:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	4619      	mov	r1, r3
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f000 f805 	bl	800c188 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c17e:	f000 f8d7 	bl	800c330 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c182:	bf00      	nop
 800c184:	e7f0      	b.n	800c168 <prvTimerTask+0x8>
	...

0800c188 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c192:	f7ff f927 	bl	800b3e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c196:	f107 0308 	add.w	r3, r7, #8
 800c19a:	4618      	mov	r0, r3
 800c19c:	f000 f866 	bl	800c26c <prvSampleTimeNow>
 800c1a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d130      	bne.n	800c20a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d10a      	bne.n	800c1c4 <prvProcessTimerOrBlockTask+0x3c>
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d806      	bhi.n	800c1c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c1b6:	f7ff f923 	bl	800b400 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c1ba:	68f9      	ldr	r1, [r7, #12]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7ff ff81 	bl	800c0c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c1c2:	e024      	b.n	800c20e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d008      	beq.n	800c1dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c1ca:	4b13      	ldr	r3, [pc, #76]	@ (800c218 <prvProcessTimerOrBlockTask+0x90>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d101      	bne.n	800c1d8 <prvProcessTimerOrBlockTask+0x50>
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e000      	b.n	800c1da <prvProcessTimerOrBlockTask+0x52>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c1dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c21c <prvProcessTimerOrBlockTask+0x94>)
 800c1de:	6818      	ldr	r0, [r3, #0]
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	1ad3      	subs	r3, r2, r3
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	f7fe fe83 	bl	800aef4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c1ee:	f7ff f907 	bl	800b400 <xTaskResumeAll>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d10a      	bne.n	800c20e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c1f8:	4b09      	ldr	r3, [pc, #36]	@ (800c220 <prvProcessTimerOrBlockTask+0x98>)
 800c1fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1fe:	601a      	str	r2, [r3, #0]
 800c200:	f3bf 8f4f 	dsb	sy
 800c204:	f3bf 8f6f 	isb	sy
}
 800c208:	e001      	b.n	800c20e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c20a:	f7ff f8f9 	bl	800b400 <xTaskResumeAll>
}
 800c20e:	bf00      	nop
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	20000c50 	.word	0x20000c50
 800c21c:	20000c54 	.word	0x20000c54
 800c220:	e000ed04 	.word	0xe000ed04

0800c224 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c22c:	4b0e      	ldr	r3, [pc, #56]	@ (800c268 <prvGetNextExpireTime+0x44>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d101      	bne.n	800c23a <prvGetNextExpireTime+0x16>
 800c236:	2201      	movs	r2, #1
 800c238:	e000      	b.n	800c23c <prvGetNextExpireTime+0x18>
 800c23a:	2200      	movs	r2, #0
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d105      	bne.n	800c254 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c248:	4b07      	ldr	r3, [pc, #28]	@ (800c268 <prvGetNextExpireTime+0x44>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	60fb      	str	r3, [r7, #12]
 800c252:	e001      	b.n	800c258 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c254:	2300      	movs	r3, #0
 800c256:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c258:	68fb      	ldr	r3, [r7, #12]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3714      	adds	r7, #20
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	20000c4c 	.word	0x20000c4c

0800c26c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c274:	f7ff f962 	bl	800b53c <xTaskGetTickCount>
 800c278:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c27a:	4b0b      	ldr	r3, [pc, #44]	@ (800c2a8 <prvSampleTimeNow+0x3c>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	429a      	cmp	r2, r3
 800c282:	d205      	bcs.n	800c290 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c284:	f000 f93a 	bl	800c4fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	e002      	b.n	800c296 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c296:	4a04      	ldr	r2, [pc, #16]	@ (800c2a8 <prvSampleTimeNow+0x3c>)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c29c:	68fb      	ldr	r3, [r7, #12]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	20000c5c 	.word	0x20000c5c

0800c2ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b086      	sub	sp, #24
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	607a      	str	r2, [r7, #4]
 800c2b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c2ca:	68ba      	ldr	r2, [r7, #8]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d812      	bhi.n	800c2f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	1ad2      	subs	r2, r2, r3
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	699b      	ldr	r3, [r3, #24]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d302      	bcc.n	800c2e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	617b      	str	r3, [r7, #20]
 800c2e4:	e01b      	b.n	800c31e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c2e6:	4b10      	ldr	r3, [pc, #64]	@ (800c328 <prvInsertTimerInActiveList+0x7c>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	f7fd fdaa 	bl	8009e4a <vListInsert>
 800c2f6:	e012      	b.n	800c31e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d206      	bcs.n	800c30e <prvInsertTimerInActiveList+0x62>
 800c300:	68ba      	ldr	r2, [r7, #8]
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	429a      	cmp	r2, r3
 800c306:	d302      	bcc.n	800c30e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c308:	2301      	movs	r3, #1
 800c30a:	617b      	str	r3, [r7, #20]
 800c30c:	e007      	b.n	800c31e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c30e:	4b07      	ldr	r3, [pc, #28]	@ (800c32c <prvInsertTimerInActiveList+0x80>)
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	3304      	adds	r3, #4
 800c316:	4619      	mov	r1, r3
 800c318:	4610      	mov	r0, r2
 800c31a:	f7fd fd96 	bl	8009e4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c31e:	697b      	ldr	r3, [r7, #20]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3718      	adds	r7, #24
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	20000c50 	.word	0x20000c50
 800c32c:	20000c4c 	.word	0x20000c4c

0800c330 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b08e      	sub	sp, #56	@ 0x38
 800c334:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c336:	e0ce      	b.n	800c4d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	da19      	bge.n	800c372 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c33e:	1d3b      	adds	r3, r7, #4
 800c340:	3304      	adds	r3, #4
 800c342:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10b      	bne.n	800c362 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	61fb      	str	r3, [r7, #28]
}
 800c35c:	bf00      	nop
 800c35e:	bf00      	nop
 800c360:	e7fd      	b.n	800c35e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c368:	6850      	ldr	r0, [r2, #4]
 800c36a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c36c:	6892      	ldr	r2, [r2, #8]
 800c36e:	4611      	mov	r1, r2
 800c370:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	f2c0 80ae 	blt.w	800c4d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d004      	beq.n	800c390 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c388:	3304      	adds	r3, #4
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7fd fd96 	bl	8009ebc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c390:	463b      	mov	r3, r7
 800c392:	4618      	mov	r0, r3
 800c394:	f7ff ff6a 	bl	800c26c <prvSampleTimeNow>
 800c398:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2b09      	cmp	r3, #9
 800c39e:	f200 8097 	bhi.w	800c4d0 <prvProcessReceivedCommands+0x1a0>
 800c3a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3a8 <prvProcessReceivedCommands+0x78>)
 800c3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a8:	0800c3d1 	.word	0x0800c3d1
 800c3ac:	0800c3d1 	.word	0x0800c3d1
 800c3b0:	0800c3d1 	.word	0x0800c3d1
 800c3b4:	0800c447 	.word	0x0800c447
 800c3b8:	0800c45b 	.word	0x0800c45b
 800c3bc:	0800c4a7 	.word	0x0800c4a7
 800c3c0:	0800c3d1 	.word	0x0800c3d1
 800c3c4:	0800c3d1 	.word	0x0800c3d1
 800c3c8:	0800c447 	.word	0x0800c447
 800c3cc:	0800c45b 	.word	0x0800c45b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3d6:	f043 0301 	orr.w	r3, r3, #1
 800c3da:	b2da      	uxtb	r2, r3
 800c3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	18d1      	adds	r1, r2, r3
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3f0:	f7ff ff5c 	bl	800c2ac <prvInsertTimerInActiveList>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d06c      	beq.n	800c4d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fc:	6a1b      	ldr	r3, [r3, #32]
 800c3fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c400:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c408:	f003 0304 	and.w	r3, r3, #4
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d061      	beq.n	800c4d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	441a      	add	r2, r3
 800c418:	2300      	movs	r3, #0
 800c41a:	9300      	str	r3, [sp, #0]
 800c41c:	2300      	movs	r3, #0
 800c41e:	2100      	movs	r1, #0
 800c420:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c422:	f7ff fe01 	bl	800c028 <xTimerGenericCommand>
 800c426:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c428:	6a3b      	ldr	r3, [r7, #32]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d152      	bne.n	800c4d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c432:	f383 8811 	msr	BASEPRI, r3
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	61bb      	str	r3, [r7, #24]
}
 800c440:	bf00      	nop
 800c442:	bf00      	nop
 800c444:	e7fd      	b.n	800c442 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c448:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c44c:	f023 0301 	bic.w	r3, r3, #1
 800c450:	b2da      	uxtb	r2, r3
 800c452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c454:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c458:	e03d      	b.n	800c4d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c460:	f043 0301 	orr.w	r3, r3, #1
 800c464:	b2da      	uxtb	r2, r3
 800c466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c468:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c470:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d10b      	bne.n	800c492 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47e:	f383 8811 	msr	BASEPRI, r3
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	f3bf 8f4f 	dsb	sy
 800c48a:	617b      	str	r3, [r7, #20]
}
 800c48c:	bf00      	nop
 800c48e:	bf00      	nop
 800c490:	e7fd      	b.n	800c48e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c494:	699a      	ldr	r2, [r3, #24]
 800c496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c498:	18d1      	adds	r1, r2, r3
 800c49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c49c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c49e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4a0:	f7ff ff04 	bl	800c2ac <prvInsertTimerInActiveList>
					break;
 800c4a4:	e017      	b.n	800c4d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4ac:	f003 0302 	and.w	r3, r3, #2
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d103      	bne.n	800c4bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c4b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4b6:	f000 fbed 	bl	800cc94 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c4ba:	e00c      	b.n	800c4d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4c2:	f023 0301 	bic.w	r3, r3, #1
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c4ce:	e002      	b.n	800c4d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c4d0:	bf00      	nop
 800c4d2:	e000      	b.n	800c4d6 <prvProcessReceivedCommands+0x1a6>
					break;
 800c4d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4d6:	4b08      	ldr	r3, [pc, #32]	@ (800c4f8 <prvProcessReceivedCommands+0x1c8>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	1d39      	adds	r1, r7, #4
 800c4dc:	2200      	movs	r2, #0
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fe f8b6 	bl	800a650 <xQueueReceive>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f47f af26 	bne.w	800c338 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c4ec:	bf00      	nop
 800c4ee:	bf00      	nop
 800c4f0:	3730      	adds	r7, #48	@ 0x30
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20000c54 	.word	0x20000c54

0800c4fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b088      	sub	sp, #32
 800c500:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c502:	e049      	b.n	800c598 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c504:	4b2e      	ldr	r3, [pc, #184]	@ (800c5c0 <prvSwitchTimerLists+0xc4>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c50e:	4b2c      	ldr	r3, [pc, #176]	@ (800c5c0 <prvSwitchTimerLists+0xc4>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	3304      	adds	r3, #4
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fd fccd 	bl	8009ebc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c530:	f003 0304 	and.w	r3, r3, #4
 800c534:	2b00      	cmp	r3, #0
 800c536:	d02f      	beq.n	800c598 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	699b      	ldr	r3, [r3, #24]
 800c53c:	693a      	ldr	r2, [r7, #16]
 800c53e:	4413      	add	r3, r2
 800c540:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c542:	68ba      	ldr	r2, [r7, #8]
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	429a      	cmp	r2, r3
 800c548:	d90e      	bls.n	800c568 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	68ba      	ldr	r2, [r7, #8]
 800c54e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c556:	4b1a      	ldr	r3, [pc, #104]	@ (800c5c0 <prvSwitchTimerLists+0xc4>)
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	3304      	adds	r3, #4
 800c55e:	4619      	mov	r1, r3
 800c560:	4610      	mov	r0, r2
 800c562:	f7fd fc72 	bl	8009e4a <vListInsert>
 800c566:	e017      	b.n	800c598 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c568:	2300      	movs	r3, #0
 800c56a:	9300      	str	r3, [sp, #0]
 800c56c:	2300      	movs	r3, #0
 800c56e:	693a      	ldr	r2, [r7, #16]
 800c570:	2100      	movs	r1, #0
 800c572:	68f8      	ldr	r0, [r7, #12]
 800c574:	f7ff fd58 	bl	800c028 <xTimerGenericCommand>
 800c578:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d10b      	bne.n	800c598 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	603b      	str	r3, [r7, #0]
}
 800c592:	bf00      	nop
 800c594:	bf00      	nop
 800c596:	e7fd      	b.n	800c594 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c598:	4b09      	ldr	r3, [pc, #36]	@ (800c5c0 <prvSwitchTimerLists+0xc4>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1b0      	bne.n	800c504 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c5a2:	4b07      	ldr	r3, [pc, #28]	@ (800c5c0 <prvSwitchTimerLists+0xc4>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c5a8:	4b06      	ldr	r3, [pc, #24]	@ (800c5c4 <prvSwitchTimerLists+0xc8>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a04      	ldr	r2, [pc, #16]	@ (800c5c0 <prvSwitchTimerLists+0xc4>)
 800c5ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c5b0:	4a04      	ldr	r2, [pc, #16]	@ (800c5c4 <prvSwitchTimerLists+0xc8>)
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	6013      	str	r3, [r2, #0]
}
 800c5b6:	bf00      	nop
 800c5b8:	3718      	adds	r7, #24
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	20000c4c 	.word	0x20000c4c
 800c5c4:	20000c50 	.word	0x20000c50

0800c5c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c5ce:	f000 f96b 	bl	800c8a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c5d2:	4b15      	ldr	r3, [pc, #84]	@ (800c628 <prvCheckForValidListAndQueue+0x60>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d120      	bne.n	800c61c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c5da:	4814      	ldr	r0, [pc, #80]	@ (800c62c <prvCheckForValidListAndQueue+0x64>)
 800c5dc:	f7fd fbe4 	bl	8009da8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c5e0:	4813      	ldr	r0, [pc, #76]	@ (800c630 <prvCheckForValidListAndQueue+0x68>)
 800c5e2:	f7fd fbe1 	bl	8009da8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c5e6:	4b13      	ldr	r3, [pc, #76]	@ (800c634 <prvCheckForValidListAndQueue+0x6c>)
 800c5e8:	4a10      	ldr	r2, [pc, #64]	@ (800c62c <prvCheckForValidListAndQueue+0x64>)
 800c5ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c5ec:	4b12      	ldr	r3, [pc, #72]	@ (800c638 <prvCheckForValidListAndQueue+0x70>)
 800c5ee:	4a10      	ldr	r2, [pc, #64]	@ (800c630 <prvCheckForValidListAndQueue+0x68>)
 800c5f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	9300      	str	r3, [sp, #0]
 800c5f6:	4b11      	ldr	r3, [pc, #68]	@ (800c63c <prvCheckForValidListAndQueue+0x74>)
 800c5f8:	4a11      	ldr	r2, [pc, #68]	@ (800c640 <prvCheckForValidListAndQueue+0x78>)
 800c5fa:	2110      	movs	r1, #16
 800c5fc:	200a      	movs	r0, #10
 800c5fe:	f7fd fcf1 	bl	8009fe4 <xQueueGenericCreateStatic>
 800c602:	4603      	mov	r3, r0
 800c604:	4a08      	ldr	r2, [pc, #32]	@ (800c628 <prvCheckForValidListAndQueue+0x60>)
 800c606:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c608:	4b07      	ldr	r3, [pc, #28]	@ (800c628 <prvCheckForValidListAndQueue+0x60>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d005      	beq.n	800c61c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c610:	4b05      	ldr	r3, [pc, #20]	@ (800c628 <prvCheckForValidListAndQueue+0x60>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	490b      	ldr	r1, [pc, #44]	@ (800c644 <prvCheckForValidListAndQueue+0x7c>)
 800c616:	4618      	mov	r0, r3
 800c618:	f7fe fc18 	bl	800ae4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c61c:	f000 f976 	bl	800c90c <vPortExitCritical>
}
 800c620:	bf00      	nop
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	20000c54 	.word	0x20000c54
 800c62c:	20000c24 	.word	0x20000c24
 800c630:	20000c38 	.word	0x20000c38
 800c634:	20000c4c 	.word	0x20000c4c
 800c638:	20000c50 	.word	0x20000c50
 800c63c:	20000d00 	.word	0x20000d00
 800c640:	20000c60 	.word	0x20000c60
 800c644:	0800f128 	.word	0x0800f128

0800c648 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	3b04      	subs	r3, #4
 800c658:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	3b04      	subs	r3, #4
 800c666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	f023 0201 	bic.w	r2, r3, #1
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	3b04      	subs	r3, #4
 800c676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c678:	4a0c      	ldr	r2, [pc, #48]	@ (800c6ac <pxPortInitialiseStack+0x64>)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	3b14      	subs	r3, #20
 800c682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	3b04      	subs	r3, #4
 800c68e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f06f 0202 	mvn.w	r2, #2
 800c696:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	3b20      	subs	r3, #32
 800c69c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c69e:	68fb      	ldr	r3, [r7, #12]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3714      	adds	r7, #20
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr
 800c6ac:	0800c6b1 	.word	0x0800c6b1

0800c6b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c6ba:	4b13      	ldr	r3, [pc, #76]	@ (800c708 <prvTaskExitError+0x58>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6c2:	d00b      	beq.n	800c6dc <prvTaskExitError+0x2c>
	__asm volatile
 800c6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c8:	f383 8811 	msr	BASEPRI, r3
 800c6cc:	f3bf 8f6f 	isb	sy
 800c6d0:	f3bf 8f4f 	dsb	sy
 800c6d4:	60fb      	str	r3, [r7, #12]
}
 800c6d6:	bf00      	nop
 800c6d8:	bf00      	nop
 800c6da:	e7fd      	b.n	800c6d8 <prvTaskExitError+0x28>
	__asm volatile
 800c6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e0:	f383 8811 	msr	BASEPRI, r3
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	60bb      	str	r3, [r7, #8]
}
 800c6ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6f0:	bf00      	nop
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d0fc      	beq.n	800c6f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6f8:	bf00      	nop
 800c6fa:	bf00      	nop
 800c6fc:	3714      	adds	r7, #20
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop
 800c708:	2000011c 	.word	0x2000011c
 800c70c:	00000000 	.word	0x00000000

0800c710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c710:	4b07      	ldr	r3, [pc, #28]	@ (800c730 <pxCurrentTCBConst2>)
 800c712:	6819      	ldr	r1, [r3, #0]
 800c714:	6808      	ldr	r0, [r1, #0]
 800c716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71a:	f380 8809 	msr	PSP, r0
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f04f 0000 	mov.w	r0, #0
 800c726:	f380 8811 	msr	BASEPRI, r0
 800c72a:	4770      	bx	lr
 800c72c:	f3af 8000 	nop.w

0800c730 <pxCurrentTCBConst2>:
 800c730:	20000724 	.word	0x20000724
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c734:	bf00      	nop
 800c736:	bf00      	nop

0800c738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c738:	4808      	ldr	r0, [pc, #32]	@ (800c75c <prvPortStartFirstTask+0x24>)
 800c73a:	6800      	ldr	r0, [r0, #0]
 800c73c:	6800      	ldr	r0, [r0, #0]
 800c73e:	f380 8808 	msr	MSP, r0
 800c742:	f04f 0000 	mov.w	r0, #0
 800c746:	f380 8814 	msr	CONTROL, r0
 800c74a:	b662      	cpsie	i
 800c74c:	b661      	cpsie	f
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	df00      	svc	0
 800c758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c75a:	bf00      	nop
 800c75c:	e000ed08 	.word	0xe000ed08

0800c760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c766:	4b47      	ldr	r3, [pc, #284]	@ (800c884 <xPortStartScheduler+0x124>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a47      	ldr	r2, [pc, #284]	@ (800c888 <xPortStartScheduler+0x128>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d10b      	bne.n	800c788 <xPortStartScheduler+0x28>
	__asm volatile
 800c770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c774:	f383 8811 	msr	BASEPRI, r3
 800c778:	f3bf 8f6f 	isb	sy
 800c77c:	f3bf 8f4f 	dsb	sy
 800c780:	613b      	str	r3, [r7, #16]
}
 800c782:	bf00      	nop
 800c784:	bf00      	nop
 800c786:	e7fd      	b.n	800c784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c788:	4b3e      	ldr	r3, [pc, #248]	@ (800c884 <xPortStartScheduler+0x124>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a3f      	ldr	r2, [pc, #252]	@ (800c88c <xPortStartScheduler+0x12c>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d10b      	bne.n	800c7aa <xPortStartScheduler+0x4a>
	__asm volatile
 800c792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	60fb      	str	r3, [r7, #12]
}
 800c7a4:	bf00      	nop
 800c7a6:	bf00      	nop
 800c7a8:	e7fd      	b.n	800c7a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c7aa:	4b39      	ldr	r3, [pc, #228]	@ (800c890 <xPortStartScheduler+0x130>)
 800c7ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	22ff      	movs	r2, #255	@ 0xff
 800c7ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c7c4:	78fb      	ldrb	r3, [r7, #3]
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c7cc:	b2da      	uxtb	r2, r3
 800c7ce:	4b31      	ldr	r3, [pc, #196]	@ (800c894 <xPortStartScheduler+0x134>)
 800c7d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c7d2:	4b31      	ldr	r3, [pc, #196]	@ (800c898 <xPortStartScheduler+0x138>)
 800c7d4:	2207      	movs	r2, #7
 800c7d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7d8:	e009      	b.n	800c7ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c7da:	4b2f      	ldr	r3, [pc, #188]	@ (800c898 <xPortStartScheduler+0x138>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	4a2d      	ldr	r2, [pc, #180]	@ (800c898 <xPortStartScheduler+0x138>)
 800c7e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7e4:	78fb      	ldrb	r3, [r7, #3]
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7ee:	78fb      	ldrb	r3, [r7, #3]
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7f6:	2b80      	cmp	r3, #128	@ 0x80
 800c7f8:	d0ef      	beq.n	800c7da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7fa:	4b27      	ldr	r3, [pc, #156]	@ (800c898 <xPortStartScheduler+0x138>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f1c3 0307 	rsb	r3, r3, #7
 800c802:	2b04      	cmp	r3, #4
 800c804:	d00b      	beq.n	800c81e <xPortStartScheduler+0xbe>
	__asm volatile
 800c806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	60bb      	str	r3, [r7, #8]
}
 800c818:	bf00      	nop
 800c81a:	bf00      	nop
 800c81c:	e7fd      	b.n	800c81a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c81e:	4b1e      	ldr	r3, [pc, #120]	@ (800c898 <xPortStartScheduler+0x138>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	021b      	lsls	r3, r3, #8
 800c824:	4a1c      	ldr	r2, [pc, #112]	@ (800c898 <xPortStartScheduler+0x138>)
 800c826:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c828:	4b1b      	ldr	r3, [pc, #108]	@ (800c898 <xPortStartScheduler+0x138>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c830:	4a19      	ldr	r2, [pc, #100]	@ (800c898 <xPortStartScheduler+0x138>)
 800c832:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	b2da      	uxtb	r2, r3
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c83c:	4b17      	ldr	r3, [pc, #92]	@ (800c89c <xPortStartScheduler+0x13c>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a16      	ldr	r2, [pc, #88]	@ (800c89c <xPortStartScheduler+0x13c>)
 800c842:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c846:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c848:	4b14      	ldr	r3, [pc, #80]	@ (800c89c <xPortStartScheduler+0x13c>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a13      	ldr	r2, [pc, #76]	@ (800c89c <xPortStartScheduler+0x13c>)
 800c84e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c852:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c854:	f000 f8da 	bl	800ca0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c858:	4b11      	ldr	r3, [pc, #68]	@ (800c8a0 <xPortStartScheduler+0x140>)
 800c85a:	2200      	movs	r2, #0
 800c85c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c85e:	f000 f8f9 	bl	800ca54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c862:	4b10      	ldr	r3, [pc, #64]	@ (800c8a4 <xPortStartScheduler+0x144>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a0f      	ldr	r2, [pc, #60]	@ (800c8a4 <xPortStartScheduler+0x144>)
 800c868:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c86c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c86e:	f7ff ff63 	bl	800c738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c872:	f7fe ff2d 	bl	800b6d0 <vTaskSwitchContext>
	prvTaskExitError();
 800c876:	f7ff ff1b 	bl	800c6b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c87a:	2300      	movs	r3, #0
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3718      	adds	r7, #24
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	e000ed00 	.word	0xe000ed00
 800c888:	410fc271 	.word	0x410fc271
 800c88c:	410fc270 	.word	0x410fc270
 800c890:	e000e400 	.word	0xe000e400
 800c894:	20000d50 	.word	0x20000d50
 800c898:	20000d54 	.word	0x20000d54
 800c89c:	e000ed20 	.word	0xe000ed20
 800c8a0:	2000011c 	.word	0x2000011c
 800c8a4:	e000ef34 	.word	0xe000ef34

0800c8a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b2:	f383 8811 	msr	BASEPRI, r3
 800c8b6:	f3bf 8f6f 	isb	sy
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	607b      	str	r3, [r7, #4]
}
 800c8c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c8c2:	4b10      	ldr	r3, [pc, #64]	@ (800c904 <vPortEnterCritical+0x5c>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	4a0e      	ldr	r2, [pc, #56]	@ (800c904 <vPortEnterCritical+0x5c>)
 800c8ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c8cc:	4b0d      	ldr	r3, [pc, #52]	@ (800c904 <vPortEnterCritical+0x5c>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d110      	bne.n	800c8f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c8d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c908 <vPortEnterCritical+0x60>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d00b      	beq.n	800c8f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	603b      	str	r3, [r7, #0]
}
 800c8f0:	bf00      	nop
 800c8f2:	bf00      	nop
 800c8f4:	e7fd      	b.n	800c8f2 <vPortEnterCritical+0x4a>
	}
}
 800c8f6:	bf00      	nop
 800c8f8:	370c      	adds	r7, #12
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	2000011c 	.word	0x2000011c
 800c908:	e000ed04 	.word	0xe000ed04

0800c90c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c912:	4b12      	ldr	r3, [pc, #72]	@ (800c95c <vPortExitCritical+0x50>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d10b      	bne.n	800c932 <vPortExitCritical+0x26>
	__asm volatile
 800c91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c91e:	f383 8811 	msr	BASEPRI, r3
 800c922:	f3bf 8f6f 	isb	sy
 800c926:	f3bf 8f4f 	dsb	sy
 800c92a:	607b      	str	r3, [r7, #4]
}
 800c92c:	bf00      	nop
 800c92e:	bf00      	nop
 800c930:	e7fd      	b.n	800c92e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c932:	4b0a      	ldr	r3, [pc, #40]	@ (800c95c <vPortExitCritical+0x50>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3b01      	subs	r3, #1
 800c938:	4a08      	ldr	r2, [pc, #32]	@ (800c95c <vPortExitCritical+0x50>)
 800c93a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c93c:	4b07      	ldr	r3, [pc, #28]	@ (800c95c <vPortExitCritical+0x50>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d105      	bne.n	800c950 <vPortExitCritical+0x44>
 800c944:	2300      	movs	r3, #0
 800c946:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	f383 8811 	msr	BASEPRI, r3
}
 800c94e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c950:	bf00      	nop
 800c952:	370c      	adds	r7, #12
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr
 800c95c:	2000011c 	.word	0x2000011c

0800c960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c960:	f3ef 8009 	mrs	r0, PSP
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	4b15      	ldr	r3, [pc, #84]	@ (800c9c0 <pxCurrentTCBConst>)
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	f01e 0f10 	tst.w	lr, #16
 800c970:	bf08      	it	eq
 800c972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97a:	6010      	str	r0, [r2, #0]
 800c97c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c980:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c984:	f380 8811 	msr	BASEPRI, r0
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	f3bf 8f6f 	isb	sy
 800c990:	f7fe fe9e 	bl	800b6d0 <vTaskSwitchContext>
 800c994:	f04f 0000 	mov.w	r0, #0
 800c998:	f380 8811 	msr	BASEPRI, r0
 800c99c:	bc09      	pop	{r0, r3}
 800c99e:	6819      	ldr	r1, [r3, #0]
 800c9a0:	6808      	ldr	r0, [r1, #0]
 800c9a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a6:	f01e 0f10 	tst.w	lr, #16
 800c9aa:	bf08      	it	eq
 800c9ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c9b0:	f380 8809 	msr	PSP, r0
 800c9b4:	f3bf 8f6f 	isb	sy
 800c9b8:	4770      	bx	lr
 800c9ba:	bf00      	nop
 800c9bc:	f3af 8000 	nop.w

0800c9c0 <pxCurrentTCBConst>:
 800c9c0:	20000724 	.word	0x20000724
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c9c4:	bf00      	nop
 800c9c6:	bf00      	nop

0800c9c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	607b      	str	r3, [r7, #4]
}
 800c9e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9e2:	f7fe fdbb 	bl	800b55c <xTaskIncrementTick>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d003      	beq.n	800c9f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9ec:	4b06      	ldr	r3, [pc, #24]	@ (800ca08 <xPortSysTickHandler+0x40>)
 800c9ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9f2:	601a      	str	r2, [r3, #0]
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	f383 8811 	msr	BASEPRI, r3
}
 800c9fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca00:	bf00      	nop
 800ca02:	3708      	adds	r7, #8
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	e000ed04 	.word	0xe000ed04

0800ca0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca10:	4b0b      	ldr	r3, [pc, #44]	@ (800ca40 <vPortSetupTimerInterrupt+0x34>)
 800ca12:	2200      	movs	r2, #0
 800ca14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca16:	4b0b      	ldr	r3, [pc, #44]	@ (800ca44 <vPortSetupTimerInterrupt+0x38>)
 800ca18:	2200      	movs	r2, #0
 800ca1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca48 <vPortSetupTimerInterrupt+0x3c>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a0a      	ldr	r2, [pc, #40]	@ (800ca4c <vPortSetupTimerInterrupt+0x40>)
 800ca22:	fba2 2303 	umull	r2, r3, r2, r3
 800ca26:	099b      	lsrs	r3, r3, #6
 800ca28:	4a09      	ldr	r2, [pc, #36]	@ (800ca50 <vPortSetupTimerInterrupt+0x44>)
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca2e:	4b04      	ldr	r3, [pc, #16]	@ (800ca40 <vPortSetupTimerInterrupt+0x34>)
 800ca30:	2207      	movs	r2, #7
 800ca32:	601a      	str	r2, [r3, #0]
}
 800ca34:	bf00      	nop
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	e000e010 	.word	0xe000e010
 800ca44:	e000e018 	.word	0xe000e018
 800ca48:	20000000 	.word	0x20000000
 800ca4c:	10624dd3 	.word	0x10624dd3
 800ca50:	e000e014 	.word	0xe000e014

0800ca54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ca64 <vPortEnableVFP+0x10>
 800ca58:	6801      	ldr	r1, [r0, #0]
 800ca5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ca5e:	6001      	str	r1, [r0, #0]
 800ca60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca62:	bf00      	nop
 800ca64:	e000ed88 	.word	0xe000ed88

0800ca68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca68:	b480      	push	{r7}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca6e:	f3ef 8305 	mrs	r3, IPSR
 800ca72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2b0f      	cmp	r3, #15
 800ca78:	d915      	bls.n	800caa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca7a:	4a18      	ldr	r2, [pc, #96]	@ (800cadc <vPortValidateInterruptPriority+0x74>)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	4413      	add	r3, r2
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca84:	4b16      	ldr	r3, [pc, #88]	@ (800cae0 <vPortValidateInterruptPriority+0x78>)
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	7afa      	ldrb	r2, [r7, #11]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d20b      	bcs.n	800caa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ca8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	607b      	str	r3, [r7, #4]
}
 800caa0:	bf00      	nop
 800caa2:	bf00      	nop
 800caa4:	e7fd      	b.n	800caa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800caa6:	4b0f      	ldr	r3, [pc, #60]	@ (800cae4 <vPortValidateInterruptPriority+0x7c>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800caae:	4b0e      	ldr	r3, [pc, #56]	@ (800cae8 <vPortValidateInterruptPriority+0x80>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d90b      	bls.n	800cace <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caba:	f383 8811 	msr	BASEPRI, r3
 800cabe:	f3bf 8f6f 	isb	sy
 800cac2:	f3bf 8f4f 	dsb	sy
 800cac6:	603b      	str	r3, [r7, #0]
}
 800cac8:	bf00      	nop
 800caca:	bf00      	nop
 800cacc:	e7fd      	b.n	800caca <vPortValidateInterruptPriority+0x62>
	}
 800cace:	bf00      	nop
 800cad0:	3714      	adds	r7, #20
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	e000e3f0 	.word	0xe000e3f0
 800cae0:	20000d50 	.word	0x20000d50
 800cae4:	e000ed0c 	.word	0xe000ed0c
 800cae8:	20000d54 	.word	0x20000d54

0800caec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b08a      	sub	sp, #40	@ 0x28
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800caf4:	2300      	movs	r3, #0
 800caf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800caf8:	f7fe fc74 	bl	800b3e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cafc:	4b5f      	ldr	r3, [pc, #380]	@ (800cc7c <pvPortMalloc+0x190>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d101      	bne.n	800cb08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb04:	f000 f92a 	bl	800cd5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb08:	4b5d      	ldr	r3, [pc, #372]	@ (800cc80 <pvPortMalloc+0x194>)
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4013      	ands	r3, r2
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f040 8095 	bne.w	800cc40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d01e      	beq.n	800cb5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cb1c:	2208      	movs	r2, #8
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4413      	add	r3, r2
 800cb22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f003 0307 	and.w	r3, r3, #7
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d015      	beq.n	800cb5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f023 0307 	bic.w	r3, r3, #7
 800cb34:	3308      	adds	r3, #8
 800cb36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f003 0307 	and.w	r3, r3, #7
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00b      	beq.n	800cb5a <pvPortMalloc+0x6e>
	__asm volatile
 800cb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	617b      	str	r3, [r7, #20]
}
 800cb54:	bf00      	nop
 800cb56:	bf00      	nop
 800cb58:	e7fd      	b.n	800cb56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d06f      	beq.n	800cc40 <pvPortMalloc+0x154>
 800cb60:	4b48      	ldr	r3, [pc, #288]	@ (800cc84 <pvPortMalloc+0x198>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d86a      	bhi.n	800cc40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb6a:	4b47      	ldr	r3, [pc, #284]	@ (800cc88 <pvPortMalloc+0x19c>)
 800cb6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb6e:	4b46      	ldr	r3, [pc, #280]	@ (800cc88 <pvPortMalloc+0x19c>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb74:	e004      	b.n	800cb80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d903      	bls.n	800cb92 <pvPortMalloc+0xa6>
 800cb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d1f1      	bne.n	800cb76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb92:	4b3a      	ldr	r3, [pc, #232]	@ (800cc7c <pvPortMalloc+0x190>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d051      	beq.n	800cc40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb9c:	6a3b      	ldr	r3, [r7, #32]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2208      	movs	r2, #8
 800cba2:	4413      	add	r3, r2
 800cba4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	6a3b      	ldr	r3, [r7, #32]
 800cbac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb0:	685a      	ldr	r2, [r3, #4]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	1ad2      	subs	r2, r2, r3
 800cbb6:	2308      	movs	r3, #8
 800cbb8:	005b      	lsls	r3, r3, #1
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d920      	bls.n	800cc00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cbbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	f003 0307 	and.w	r3, r3, #7
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00b      	beq.n	800cbe8 <pvPortMalloc+0xfc>
	__asm volatile
 800cbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	613b      	str	r3, [r7, #16]
}
 800cbe2:	bf00      	nop
 800cbe4:	bf00      	nop
 800cbe6:	e7fd      	b.n	800cbe4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cbe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbea:	685a      	ldr	r2, [r3, #4]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	1ad2      	subs	r2, r2, r3
 800cbf0:	69bb      	ldr	r3, [r7, #24]
 800cbf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbfa:	69b8      	ldr	r0, [r7, #24]
 800cbfc:	f000 f910 	bl	800ce20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc00:	4b20      	ldr	r3, [pc, #128]	@ (800cc84 <pvPortMalloc+0x198>)
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	1ad3      	subs	r3, r2, r3
 800cc0a:	4a1e      	ldr	r2, [pc, #120]	@ (800cc84 <pvPortMalloc+0x198>)
 800cc0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc0e:	4b1d      	ldr	r3, [pc, #116]	@ (800cc84 <pvPortMalloc+0x198>)
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	4b1e      	ldr	r3, [pc, #120]	@ (800cc8c <pvPortMalloc+0x1a0>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d203      	bcs.n	800cc22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc1a:	4b1a      	ldr	r3, [pc, #104]	@ (800cc84 <pvPortMalloc+0x198>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4a1b      	ldr	r2, [pc, #108]	@ (800cc8c <pvPortMalloc+0x1a0>)
 800cc20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc24:	685a      	ldr	r2, [r3, #4]
 800cc26:	4b16      	ldr	r3, [pc, #88]	@ (800cc80 <pvPortMalloc+0x194>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	431a      	orrs	r2, r3
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc32:	2200      	movs	r2, #0
 800cc34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cc36:	4b16      	ldr	r3, [pc, #88]	@ (800cc90 <pvPortMalloc+0x1a4>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	4a14      	ldr	r2, [pc, #80]	@ (800cc90 <pvPortMalloc+0x1a4>)
 800cc3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc40:	f7fe fbde 	bl	800b400 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d101      	bne.n	800cc4e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800cc4a:	f7f3 fb73 	bl	8000334 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	f003 0307 	and.w	r3, r3, #7
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00b      	beq.n	800cc70 <pvPortMalloc+0x184>
	__asm volatile
 800cc58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc5c:	f383 8811 	msr	BASEPRI, r3
 800cc60:	f3bf 8f6f 	isb	sy
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	60fb      	str	r3, [r7, #12]
}
 800cc6a:	bf00      	nop
 800cc6c:	bf00      	nop
 800cc6e:	e7fd      	b.n	800cc6c <pvPortMalloc+0x180>
	return pvReturn;
 800cc70:	69fb      	ldr	r3, [r7, #28]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3728      	adds	r7, #40	@ 0x28
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	20001960 	.word	0x20001960
 800cc80:	20001974 	.word	0x20001974
 800cc84:	20001964 	.word	0x20001964
 800cc88:	20001958 	.word	0x20001958
 800cc8c:	20001968 	.word	0x20001968
 800cc90:	2000196c 	.word	0x2000196c

0800cc94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d04f      	beq.n	800cd46 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cca6:	2308      	movs	r3, #8
 800cca8:	425b      	negs	r3, r3
 800ccaa:	697a      	ldr	r2, [r7, #20]
 800ccac:	4413      	add	r3, r2
 800ccae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	685a      	ldr	r2, [r3, #4]
 800ccb8:	4b25      	ldr	r3, [pc, #148]	@ (800cd50 <vPortFree+0xbc>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4013      	ands	r3, r2
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10b      	bne.n	800ccda <vPortFree+0x46>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc6:	f383 8811 	msr	BASEPRI, r3
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	60fb      	str	r3, [r7, #12]
}
 800ccd4:	bf00      	nop
 800ccd6:	bf00      	nop
 800ccd8:	e7fd      	b.n	800ccd6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00b      	beq.n	800ccfa <vPortFree+0x66>
	__asm volatile
 800cce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce6:	f383 8811 	msr	BASEPRI, r3
 800ccea:	f3bf 8f6f 	isb	sy
 800ccee:	f3bf 8f4f 	dsb	sy
 800ccf2:	60bb      	str	r3, [r7, #8]
}
 800ccf4:	bf00      	nop
 800ccf6:	bf00      	nop
 800ccf8:	e7fd      	b.n	800ccf6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	685a      	ldr	r2, [r3, #4]
 800ccfe:	4b14      	ldr	r3, [pc, #80]	@ (800cd50 <vPortFree+0xbc>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4013      	ands	r3, r2
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d01e      	beq.n	800cd46 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d11a      	bne.n	800cd46 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	685a      	ldr	r2, [r3, #4]
 800cd14:	4b0e      	ldr	r3, [pc, #56]	@ (800cd50 <vPortFree+0xbc>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	43db      	mvns	r3, r3
 800cd1a:	401a      	ands	r2, r3
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd20:	f7fe fb60 	bl	800b3e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	685a      	ldr	r2, [r3, #4]
 800cd28:	4b0a      	ldr	r3, [pc, #40]	@ (800cd54 <vPortFree+0xc0>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	4a09      	ldr	r2, [pc, #36]	@ (800cd54 <vPortFree+0xc0>)
 800cd30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd32:	6938      	ldr	r0, [r7, #16]
 800cd34:	f000 f874 	bl	800ce20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cd38:	4b07      	ldr	r3, [pc, #28]	@ (800cd58 <vPortFree+0xc4>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	4a06      	ldr	r2, [pc, #24]	@ (800cd58 <vPortFree+0xc4>)
 800cd40:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cd42:	f7fe fb5d 	bl	800b400 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd46:	bf00      	nop
 800cd48:	3718      	adds	r7, #24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	20001974 	.word	0x20001974
 800cd54:	20001964 	.word	0x20001964
 800cd58:	20001970 	.word	0x20001970

0800cd5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd62:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800cd66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd68:	4b27      	ldr	r3, [pc, #156]	@ (800ce08 <prvHeapInit+0xac>)
 800cd6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f003 0307 	and.w	r3, r3, #7
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00c      	beq.n	800cd90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	3307      	adds	r3, #7
 800cd7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f023 0307 	bic.w	r3, r3, #7
 800cd82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	4a1f      	ldr	r2, [pc, #124]	@ (800ce08 <prvHeapInit+0xac>)
 800cd8c:	4413      	add	r3, r2
 800cd8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd94:	4a1d      	ldr	r2, [pc, #116]	@ (800ce0c <prvHeapInit+0xb0>)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd9a:	4b1c      	ldr	r3, [pc, #112]	@ (800ce0c <prvHeapInit+0xb0>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	4413      	add	r3, r2
 800cda6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cda8:	2208      	movs	r2, #8
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	1a9b      	subs	r3, r3, r2
 800cdae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f023 0307 	bic.w	r3, r3, #7
 800cdb6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	4a15      	ldr	r2, [pc, #84]	@ (800ce10 <prvHeapInit+0xb4>)
 800cdbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cdbe:	4b14      	ldr	r3, [pc, #80]	@ (800ce10 <prvHeapInit+0xb4>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cdc6:	4b12      	ldr	r3, [pc, #72]	@ (800ce10 <prvHeapInit+0xb4>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	1ad2      	subs	r2, r2, r3
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cddc:	4b0c      	ldr	r3, [pc, #48]	@ (800ce10 <prvHeapInit+0xb4>)
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	4a0a      	ldr	r2, [pc, #40]	@ (800ce14 <prvHeapInit+0xb8>)
 800cdea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	4a09      	ldr	r2, [pc, #36]	@ (800ce18 <prvHeapInit+0xbc>)
 800cdf2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cdf4:	4b09      	ldr	r3, [pc, #36]	@ (800ce1c <prvHeapInit+0xc0>)
 800cdf6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cdfa:	601a      	str	r2, [r3, #0]
}
 800cdfc:	bf00      	nop
 800cdfe:	3714      	adds	r7, #20
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr
 800ce08:	20000d58 	.word	0x20000d58
 800ce0c:	20001958 	.word	0x20001958
 800ce10:	20001960 	.word	0x20001960
 800ce14:	20001968 	.word	0x20001968
 800ce18:	20001964 	.word	0x20001964
 800ce1c:	20001974 	.word	0x20001974

0800ce20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce28:	4b28      	ldr	r3, [pc, #160]	@ (800cecc <prvInsertBlockIntoFreeList+0xac>)
 800ce2a:	60fb      	str	r3, [r7, #12]
 800ce2c:	e002      	b.n	800ce34 <prvInsertBlockIntoFreeList+0x14>
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	60fb      	str	r3, [r7, #12]
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d8f7      	bhi.n	800ce2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	4413      	add	r3, r2
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d108      	bne.n	800ce62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	685a      	ldr	r2, [r3, #4]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	441a      	add	r2, r3
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	68ba      	ldr	r2, [r7, #8]
 800ce6c:	441a      	add	r2, r3
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d118      	bne.n	800cea8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	4b15      	ldr	r3, [pc, #84]	@ (800ced0 <prvInsertBlockIntoFreeList+0xb0>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d00d      	beq.n	800ce9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	685a      	ldr	r2, [r3, #4]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	441a      	add	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	601a      	str	r2, [r3, #0]
 800ce9c:	e008      	b.n	800ceb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce9e:	4b0c      	ldr	r3, [pc, #48]	@ (800ced0 <prvInsertBlockIntoFreeList+0xb0>)
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	601a      	str	r2, [r3, #0]
 800cea6:	e003      	b.n	800ceb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d002      	beq.n	800cebe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cebe:	bf00      	nop
 800cec0:	3714      	adds	r7, #20
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	20001958 	.word	0x20001958
 800ced0:	20001960 	.word	0x20001960

0800ced4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ced8:	2200      	movs	r2, #0
 800ceda:	4912      	ldr	r1, [pc, #72]	@ (800cf24 <MX_USB_Device_Init+0x50>)
 800cedc:	4812      	ldr	r0, [pc, #72]	@ (800cf28 <MX_USB_Device_Init+0x54>)
 800cede:	f7fb fa73 	bl	80083c8 <USBD_Init>
 800cee2:	4603      	mov	r3, r0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d001      	beq.n	800ceec <MX_USB_Device_Init+0x18>
    Error_Handler();
 800cee8:	f7f3 feec 	bl	8000cc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ceec:	490f      	ldr	r1, [pc, #60]	@ (800cf2c <MX_USB_Device_Init+0x58>)
 800ceee:	480e      	ldr	r0, [pc, #56]	@ (800cf28 <MX_USB_Device_Init+0x54>)
 800cef0:	f7fb fa9a 	bl	8008428 <USBD_RegisterClass>
 800cef4:	4603      	mov	r3, r0
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d001      	beq.n	800cefe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800cefa:	f7f3 fee3 	bl	8000cc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800cefe:	490c      	ldr	r1, [pc, #48]	@ (800cf30 <MX_USB_Device_Init+0x5c>)
 800cf00:	4809      	ldr	r0, [pc, #36]	@ (800cf28 <MX_USB_Device_Init+0x54>)
 800cf02:	f7fb f9bb 	bl	800827c <USBD_CDC_RegisterInterface>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d001      	beq.n	800cf10 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800cf0c:	f7f3 feda 	bl	8000cc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800cf10:	4805      	ldr	r0, [pc, #20]	@ (800cf28 <MX_USB_Device_Init+0x54>)
 800cf12:	f7fb fab0 	bl	8008476 <USBD_Start>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d001      	beq.n	800cf20 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800cf1c:	f7f3 fed2 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800cf20:	bf00      	nop
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	20000134 	.word	0x20000134
 800cf28:	20001978 	.word	0x20001978
 800cf2c:	20000018 	.word	0x20000018
 800cf30:	20000120 	.word	0x20000120

0800cf34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cf38:	2200      	movs	r2, #0
 800cf3a:	4905      	ldr	r1, [pc, #20]	@ (800cf50 <CDC_Init_FS+0x1c>)
 800cf3c:	4805      	ldr	r0, [pc, #20]	@ (800cf54 <CDC_Init_FS+0x20>)
 800cf3e:	f7fb f9b2 	bl	80082a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cf42:	4905      	ldr	r1, [pc, #20]	@ (800cf58 <CDC_Init_FS+0x24>)
 800cf44:	4803      	ldr	r0, [pc, #12]	@ (800cf54 <CDC_Init_FS+0x20>)
 800cf46:	f7fb f9cc 	bl	80082e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cf4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	20002048 	.word	0x20002048
 800cf54:	20001978 	.word	0x20001978
 800cf58:	20001c48 	.word	0x20001c48

0800cf5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cf60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr

0800cf6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	4603      	mov	r3, r0
 800cf74:	6039      	str	r1, [r7, #0]
 800cf76:	71fb      	strb	r3, [r7, #7]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	2b23      	cmp	r3, #35	@ 0x23
 800cf80:	d84a      	bhi.n	800d018 <CDC_Control_FS+0xac>
 800cf82:	a201      	add	r2, pc, #4	@ (adr r2, 800cf88 <CDC_Control_FS+0x1c>)
 800cf84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf88:	0800d019 	.word	0x0800d019
 800cf8c:	0800d019 	.word	0x0800d019
 800cf90:	0800d019 	.word	0x0800d019
 800cf94:	0800d019 	.word	0x0800d019
 800cf98:	0800d019 	.word	0x0800d019
 800cf9c:	0800d019 	.word	0x0800d019
 800cfa0:	0800d019 	.word	0x0800d019
 800cfa4:	0800d019 	.word	0x0800d019
 800cfa8:	0800d019 	.word	0x0800d019
 800cfac:	0800d019 	.word	0x0800d019
 800cfb0:	0800d019 	.word	0x0800d019
 800cfb4:	0800d019 	.word	0x0800d019
 800cfb8:	0800d019 	.word	0x0800d019
 800cfbc:	0800d019 	.word	0x0800d019
 800cfc0:	0800d019 	.word	0x0800d019
 800cfc4:	0800d019 	.word	0x0800d019
 800cfc8:	0800d019 	.word	0x0800d019
 800cfcc:	0800d019 	.word	0x0800d019
 800cfd0:	0800d019 	.word	0x0800d019
 800cfd4:	0800d019 	.word	0x0800d019
 800cfd8:	0800d019 	.word	0x0800d019
 800cfdc:	0800d019 	.word	0x0800d019
 800cfe0:	0800d019 	.word	0x0800d019
 800cfe4:	0800d019 	.word	0x0800d019
 800cfe8:	0800d019 	.word	0x0800d019
 800cfec:	0800d019 	.word	0x0800d019
 800cff0:	0800d019 	.word	0x0800d019
 800cff4:	0800d019 	.word	0x0800d019
 800cff8:	0800d019 	.word	0x0800d019
 800cffc:	0800d019 	.word	0x0800d019
 800d000:	0800d019 	.word	0x0800d019
 800d004:	0800d019 	.word	0x0800d019
 800d008:	0800d019 	.word	0x0800d019
 800d00c:	0800d019 	.word	0x0800d019
 800d010:	0800d019 	.word	0x0800d019
 800d014:	0800d019 	.word	0x0800d019
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d018:	bf00      	nop
  }

  return (USBD_OK);
 800d01a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d032:	6879      	ldr	r1, [r7, #4]
 800d034:	4810      	ldr	r0, [pc, #64]	@ (800d078 <CDC_Receive_FS+0x50>)
 800d036:	f7fb f954 	bl	80082e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d03a:	480f      	ldr	r0, [pc, #60]	@ (800d078 <CDC_Receive_FS+0x50>)
 800d03c:	f7fb f99a 	bl	8008374 <USBD_CDC_ReceivePacket>


  memset (Raw_VCP_Data, '\0', 64);  // clear the buffer
 800d040:	2240      	movs	r2, #64	@ 0x40
 800d042:	2100      	movs	r1, #0
 800d044:	480d      	ldr	r0, [pc, #52]	@ (800d07c <CDC_Receive_FS+0x54>)
 800d046:	f000 ff25 	bl	800de94 <memset>
  uint8_t len = (uint8_t)*Len;
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	73fb      	strb	r3, [r7, #15]
  memcpy(Raw_VCP_Data, Buf, len);  // copy the data to the buffer
 800d050:	7bfb      	ldrb	r3, [r7, #15]
 800d052:	461a      	mov	r2, r3
 800d054:	6879      	ldr	r1, [r7, #4]
 800d056:	4809      	ldr	r0, [pc, #36]	@ (800d07c <CDC_Receive_FS+0x54>)
 800d058:	f000 fff3 	bl	800e042 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800d05c:	7bfb      	ldrb	r3, [r7, #15]
 800d05e:	461a      	mov	r2, r3
 800d060:	2100      	movs	r1, #0
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 ff16 	bl	800de94 <memset>
  Vcp_Data_Available = 1;
 800d068:	4b05      	ldr	r3, [pc, #20]	@ (800d080 <CDC_Receive_FS+0x58>)
 800d06a:	2201      	movs	r2, #1
 800d06c:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800d06e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d070:	4618      	mov	r0, r3
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	20001978 	.word	0x20001978
 800d07c:	20000278 	.word	0x20000278
 800d080:	200002b8 	.word	0x200002b8

0800d084 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	460b      	mov	r3, r1
 800d08e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d090:	2300      	movs	r3, #0
 800d092:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d094:	4b0d      	ldr	r3, [pc, #52]	@ (800d0cc <CDC_Transmit_FS+0x48>)
 800d096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d09a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d001      	beq.n	800d0aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	e00b      	b.n	800d0c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d0aa:	887b      	ldrh	r3, [r7, #2]
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	6879      	ldr	r1, [r7, #4]
 800d0b0:	4806      	ldr	r0, [pc, #24]	@ (800d0cc <CDC_Transmit_FS+0x48>)
 800d0b2:	f7fb f8f8 	bl	80082a6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d0b6:	4805      	ldr	r0, [pc, #20]	@ (800d0cc <CDC_Transmit_FS+0x48>)
 800d0b8:	f7fb f92c 	bl	8008314 <USBD_CDC_TransmitPacket>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	20001978 	.word	0x20001978

0800d0d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b087      	sub	sp, #28
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	60b9      	str	r1, [r7, #8]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d0e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	371c      	adds	r7, #28
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
	...

0800d0f4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	6039      	str	r1, [r7, #0]
 800d0fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	2212      	movs	r2, #18
 800d104:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d106:	4b03      	ldr	r3, [pc, #12]	@ (800d114 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d108:	4618      	mov	r0, r3
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	20000154 	.word	0x20000154

0800d118 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	4603      	mov	r3, r0
 800d120:	6039      	str	r1, [r7, #0]
 800d122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	2204      	movs	r2, #4
 800d128:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d12a:	4b03      	ldr	r3, [pc, #12]	@ (800d138 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr
 800d138:	20000168 	.word	0x20000168

0800d13c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	4603      	mov	r3, r0
 800d144:	6039      	str	r1, [r7, #0]
 800d146:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d148:	79fb      	ldrb	r3, [r7, #7]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d105      	bne.n	800d15a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d14e:	683a      	ldr	r2, [r7, #0]
 800d150:	4907      	ldr	r1, [pc, #28]	@ (800d170 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d152:	4808      	ldr	r0, [pc, #32]	@ (800d174 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d154:	f7fc f977 	bl	8009446 <USBD_GetString>
 800d158:	e004      	b.n	800d164 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d15a:	683a      	ldr	r2, [r7, #0]
 800d15c:	4904      	ldr	r1, [pc, #16]	@ (800d170 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d15e:	4805      	ldr	r0, [pc, #20]	@ (800d174 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d160:	f7fc f971 	bl	8009446 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d164:	4b02      	ldr	r3, [pc, #8]	@ (800d170 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d166:	4618      	mov	r0, r3
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	20002448 	.word	0x20002448
 800d174:	0800f130 	.word	0x0800f130

0800d178 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	4603      	mov	r3, r0
 800d180:	6039      	str	r1, [r7, #0]
 800d182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d184:	683a      	ldr	r2, [r7, #0]
 800d186:	4904      	ldr	r1, [pc, #16]	@ (800d198 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d188:	4804      	ldr	r0, [pc, #16]	@ (800d19c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d18a:	f7fc f95c 	bl	8009446 <USBD_GetString>
  return USBD_StrDesc;
 800d18e:	4b02      	ldr	r3, [pc, #8]	@ (800d198 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d190:	4618      	mov	r0, r3
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	20002448 	.word	0x20002448
 800d19c:	0800f13c 	.word	0x0800f13c

0800d1a0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	6039      	str	r1, [r7, #0]
 800d1aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	221a      	movs	r2, #26
 800d1b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d1b2:	f000 f843 	bl	800d23c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d1b6:	4b02      	ldr	r3, [pc, #8]	@ (800d1c0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	2000016c 	.word	0x2000016c

0800d1c4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	6039      	str	r1, [r7, #0]
 800d1ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d1d0:	79fb      	ldrb	r3, [r7, #7]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d105      	bne.n	800d1e2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d1d6:	683a      	ldr	r2, [r7, #0]
 800d1d8:	4907      	ldr	r1, [pc, #28]	@ (800d1f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d1da:	4808      	ldr	r0, [pc, #32]	@ (800d1fc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d1dc:	f7fc f933 	bl	8009446 <USBD_GetString>
 800d1e0:	e004      	b.n	800d1ec <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d1e2:	683a      	ldr	r2, [r7, #0]
 800d1e4:	4904      	ldr	r1, [pc, #16]	@ (800d1f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d1e6:	4805      	ldr	r0, [pc, #20]	@ (800d1fc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d1e8:	f7fc f92d 	bl	8009446 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1ec:	4b02      	ldr	r3, [pc, #8]	@ (800d1f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3708      	adds	r7, #8
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	20002448 	.word	0x20002448
 800d1fc:	0800f150 	.word	0x0800f150

0800d200 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	4603      	mov	r3, r0
 800d208:	6039      	str	r1, [r7, #0]
 800d20a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d20c:	79fb      	ldrb	r3, [r7, #7]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d105      	bne.n	800d21e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	4907      	ldr	r1, [pc, #28]	@ (800d234 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d216:	4808      	ldr	r0, [pc, #32]	@ (800d238 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d218:	f7fc f915 	bl	8009446 <USBD_GetString>
 800d21c:	e004      	b.n	800d228 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d21e:	683a      	ldr	r2, [r7, #0]
 800d220:	4904      	ldr	r1, [pc, #16]	@ (800d234 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d222:	4805      	ldr	r0, [pc, #20]	@ (800d238 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d224:	f7fc f90f 	bl	8009446 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d228:	4b02      	ldr	r3, [pc, #8]	@ (800d234 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3708      	adds	r7, #8
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	20002448 	.word	0x20002448
 800d238:	0800f15c 	.word	0x0800f15c

0800d23c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d242:	4b0f      	ldr	r3, [pc, #60]	@ (800d280 <Get_SerialNum+0x44>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d248:	4b0e      	ldr	r3, [pc, #56]	@ (800d284 <Get_SerialNum+0x48>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d24e:	4b0e      	ldr	r3, [pc, #56]	@ (800d288 <Get_SerialNum+0x4c>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	4413      	add	r3, r2
 800d25a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d009      	beq.n	800d276 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d262:	2208      	movs	r2, #8
 800d264:	4909      	ldr	r1, [pc, #36]	@ (800d28c <Get_SerialNum+0x50>)
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f000 f814 	bl	800d294 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d26c:	2204      	movs	r2, #4
 800d26e:	4908      	ldr	r1, [pc, #32]	@ (800d290 <Get_SerialNum+0x54>)
 800d270:	68b8      	ldr	r0, [r7, #8]
 800d272:	f000 f80f 	bl	800d294 <IntToUnicode>
  }
}
 800d276:	bf00      	nop
 800d278:	3710      	adds	r7, #16
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	1fff7590 	.word	0x1fff7590
 800d284:	1fff7594 	.word	0x1fff7594
 800d288:	1fff7598 	.word	0x1fff7598
 800d28c:	2000016e 	.word	0x2000016e
 800d290:	2000017e 	.word	0x2000017e

0800d294 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d294:	b480      	push	{r7}
 800d296:	b087      	sub	sp, #28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	4613      	mov	r3, r2
 800d2a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	75fb      	strb	r3, [r7, #23]
 800d2aa:	e027      	b.n	800d2fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	0f1b      	lsrs	r3, r3, #28
 800d2b0:	2b09      	cmp	r3, #9
 800d2b2:	d80b      	bhi.n	800d2cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	0f1b      	lsrs	r3, r3, #28
 800d2b8:	b2da      	uxtb	r2, r3
 800d2ba:	7dfb      	ldrb	r3, [r7, #23]
 800d2bc:	005b      	lsls	r3, r3, #1
 800d2be:	4619      	mov	r1, r3
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	440b      	add	r3, r1
 800d2c4:	3230      	adds	r2, #48	@ 0x30
 800d2c6:	b2d2      	uxtb	r2, r2
 800d2c8:	701a      	strb	r2, [r3, #0]
 800d2ca:	e00a      	b.n	800d2e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	0f1b      	lsrs	r3, r3, #28
 800d2d0:	b2da      	uxtb	r2, r3
 800d2d2:	7dfb      	ldrb	r3, [r7, #23]
 800d2d4:	005b      	lsls	r3, r3, #1
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	440b      	add	r3, r1
 800d2dc:	3237      	adds	r2, #55	@ 0x37
 800d2de:	b2d2      	uxtb	r2, r2
 800d2e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	011b      	lsls	r3, r3, #4
 800d2e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d2e8:	7dfb      	ldrb	r3, [r7, #23]
 800d2ea:	005b      	lsls	r3, r3, #1
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	68ba      	ldr	r2, [r7, #8]
 800d2f0:	4413      	add	r3, r2
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d2f6:	7dfb      	ldrb	r3, [r7, #23]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	75fb      	strb	r3, [r7, #23]
 800d2fc:	7dfa      	ldrb	r2, [r7, #23]
 800d2fe:	79fb      	ldrb	r3, [r7, #7]
 800d300:	429a      	cmp	r2, r3
 800d302:	d3d3      	bcc.n	800d2ac <IntToUnicode+0x18>
  }
}
 800d304:	bf00      	nop
 800d306:	bf00      	nop
 800d308:	371c      	adds	r7, #28
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr
	...

0800d314 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b094      	sub	sp, #80	@ 0x50
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d31c:	f107 030c 	add.w	r3, r7, #12
 800d320:	2244      	movs	r2, #68	@ 0x44
 800d322:	2100      	movs	r1, #0
 800d324:	4618      	mov	r0, r3
 800d326:	f000 fdb5 	bl	800de94 <memset>
  if(pcdHandle->Instance==USB)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4a19      	ldr	r2, [pc, #100]	@ (800d394 <HAL_PCD_MspInit+0x80>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d12a      	bne.n	800d38a <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d334:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d338:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d33a:	2300      	movs	r3, #0
 800d33c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d33e:	f107 030c 	add.w	r3, r7, #12
 800d342:	4618      	mov	r0, r3
 800d344:	f7f6 fcec 	bl	8003d20 <HAL_RCCEx_PeriphCLKConfig>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d001      	beq.n	800d352 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d34e:	f7f3 fcb9 	bl	8000cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d352:	4b11      	ldr	r3, [pc, #68]	@ (800d398 <HAL_PCD_MspInit+0x84>)
 800d354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d356:	4a10      	ldr	r2, [pc, #64]	@ (800d398 <HAL_PCD_MspInit+0x84>)
 800d358:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d35c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d35e:	4b0e      	ldr	r3, [pc, #56]	@ (800d398 <HAL_PCD_MspInit+0x84>)
 800d360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d362:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d366:	60bb      	str	r3, [r7, #8]
 800d368:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 5, 0);
 800d36a:	2200      	movs	r2, #0
 800d36c:	2105      	movs	r1, #5
 800d36e:	2013      	movs	r0, #19
 800d370:	f7f3 ffe2 	bl	8001338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800d374:	2013      	movs	r0, #19
 800d376:	f7f3 fff9 	bl	800136c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800d37a:	2200      	movs	r2, #0
 800d37c:	2105      	movs	r1, #5
 800d37e:	2014      	movs	r0, #20
 800d380:	f7f3 ffda 	bl	8001338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d384:	2014      	movs	r0, #20
 800d386:	f7f3 fff1 	bl	800136c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d38a:	bf00      	nop
 800d38c:	3750      	adds	r7, #80	@ 0x50
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	40005c00 	.word	0x40005c00
 800d398:	40021000 	.word	0x40021000

0800d39c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	4610      	mov	r0, r2
 800d3b4:	f7fb f8aa 	bl	800850c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d3b8:	bf00      	nop
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800d3d2:	78fa      	ldrb	r2, [r7, #3]
 800d3d4:	6879      	ldr	r1, [r7, #4]
 800d3d6:	4613      	mov	r3, r2
 800d3d8:	009b      	lsls	r3, r3, #2
 800d3da:	4413      	add	r3, r2
 800d3dc:	00db      	lsls	r3, r3, #3
 800d3de:	440b      	add	r3, r1
 800d3e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	78fb      	ldrb	r3, [r7, #3]
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	f7fb f8e4 	bl	80085b6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d3ee:	bf00      	nop
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b082      	sub	sp, #8
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
 800d3fe:	460b      	mov	r3, r1
 800d400:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800d408:	78fa      	ldrb	r2, [r7, #3]
 800d40a:	6879      	ldr	r1, [r7, #4]
 800d40c:	4613      	mov	r3, r2
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	4413      	add	r3, r2
 800d412:	00db      	lsls	r3, r3, #3
 800d414:	440b      	add	r3, r1
 800d416:	3324      	adds	r3, #36	@ 0x24
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	78fb      	ldrb	r3, [r7, #3]
 800d41c:	4619      	mov	r1, r3
 800d41e:	f7fb f92d 	bl	800867c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d422:	bf00      	nop
 800d424:	3708      	adds	r7, #8
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b082      	sub	sp, #8
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d438:	4618      	mov	r0, r3
 800d43a:	f7fb fa41 	bl	80088c0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d43e:	bf00      	nop
 800d440:	3708      	adds	r7, #8
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d446:	b580      	push	{r7, lr}
 800d448:	b084      	sub	sp, #16
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d44e:	2301      	movs	r3, #1
 800d450:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	795b      	ldrb	r3, [r3, #5]
 800d456:	2b02      	cmp	r3, #2
 800d458:	d001      	beq.n	800d45e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d45a:	f7f3 fc33 	bl	8000cc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d464:	7bfa      	ldrb	r2, [r7, #15]
 800d466:	4611      	mov	r1, r2
 800d468:	4618      	mov	r0, r3
 800d46a:	f7fb f9eb 	bl	8008844 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d474:	4618      	mov	r0, r3
 800d476:	f7fb f997 	bl	80087a8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d47a:	bf00      	nop
 800d47c:	3710      	adds	r7, #16
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
	...

0800d484 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d492:	4618      	mov	r0, r3
 800d494:	f7fb f9e6 	bl	8008864 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	7a5b      	ldrb	r3, [r3, #9]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d005      	beq.n	800d4ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d4a0:	4b04      	ldr	r3, [pc, #16]	@ (800d4b4 <HAL_PCD_SuspendCallback+0x30>)
 800d4a2:	691b      	ldr	r3, [r3, #16]
 800d4a4:	4a03      	ldr	r2, [pc, #12]	@ (800d4b4 <HAL_PCD_SuspendCallback+0x30>)
 800d4a6:	f043 0306 	orr.w	r3, r3, #6
 800d4aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d4ac:	bf00      	nop
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	e000ed00 	.word	0xe000ed00

0800d4b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	7a5b      	ldrb	r3, [r3, #9]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d007      	beq.n	800d4d8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d4c8:	4b08      	ldr	r3, [pc, #32]	@ (800d4ec <HAL_PCD_ResumeCallback+0x34>)
 800d4ca:	691b      	ldr	r3, [r3, #16]
 800d4cc:	4a07      	ldr	r2, [pc, #28]	@ (800d4ec <HAL_PCD_ResumeCallback+0x34>)
 800d4ce:	f023 0306 	bic.w	r3, r3, #6
 800d4d2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d4d4:	f000 f9f8 	bl	800d8c8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7fb f9d6 	bl	8008890 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d4e4:	bf00      	nop
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	e000ed00 	.word	0xe000ed00

0800d4f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d4f8:	4a2b      	ldr	r2, [pc, #172]	@ (800d5a8 <USBD_LL_Init+0xb8>)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	4a29      	ldr	r2, [pc, #164]	@ (800d5a8 <USBD_LL_Init+0xb8>)
 800d504:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d508:	4b27      	ldr	r3, [pc, #156]	@ (800d5a8 <USBD_LL_Init+0xb8>)
 800d50a:	4a28      	ldr	r2, [pc, #160]	@ (800d5ac <USBD_LL_Init+0xbc>)
 800d50c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d50e:	4b26      	ldr	r3, [pc, #152]	@ (800d5a8 <USBD_LL_Init+0xb8>)
 800d510:	2208      	movs	r2, #8
 800d512:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d514:	4b24      	ldr	r3, [pc, #144]	@ (800d5a8 <USBD_LL_Init+0xb8>)
 800d516:	2202      	movs	r2, #2
 800d518:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d51a:	4b23      	ldr	r3, [pc, #140]	@ (800d5a8 <USBD_LL_Init+0xb8>)
 800d51c:	2202      	movs	r2, #2
 800d51e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d520:	4b21      	ldr	r3, [pc, #132]	@ (800d5a8 <USBD_LL_Init+0xb8>)
 800d522:	2200      	movs	r2, #0
 800d524:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d526:	4b20      	ldr	r3, [pc, #128]	@ (800d5a8 <USBD_LL_Init+0xb8>)
 800d528:	2200      	movs	r2, #0
 800d52a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d52c:	4b1e      	ldr	r3, [pc, #120]	@ (800d5a8 <USBD_LL_Init+0xb8>)
 800d52e:	2200      	movs	r2, #0
 800d530:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d532:	4b1d      	ldr	r3, [pc, #116]	@ (800d5a8 <USBD_LL_Init+0xb8>)
 800d534:	2200      	movs	r2, #0
 800d536:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d538:	481b      	ldr	r0, [pc, #108]	@ (800d5a8 <USBD_LL_Init+0xb8>)
 800d53a:	f7f4 f8bf 	bl	80016bc <HAL_PCD_Init>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	d001      	beq.n	800d548 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d544:	f7f3 fbbe 	bl	8000cc4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d54e:	2318      	movs	r3, #24
 800d550:	2200      	movs	r2, #0
 800d552:	2100      	movs	r1, #0
 800d554:	f7f5 fd78 	bl	8003048 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d55e:	2358      	movs	r3, #88	@ 0x58
 800d560:	2200      	movs	r2, #0
 800d562:	2180      	movs	r1, #128	@ 0x80
 800d564:	f7f5 fd70 	bl	8003048 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d56e:	23c0      	movs	r3, #192	@ 0xc0
 800d570:	2200      	movs	r2, #0
 800d572:	2181      	movs	r1, #129	@ 0x81
 800d574:	f7f5 fd68 	bl	8003048 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d57e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d582:	2200      	movs	r2, #0
 800d584:	2101      	movs	r1, #1
 800d586:	f7f5 fd5f 	bl	8003048 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d590:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d594:	2200      	movs	r2, #0
 800d596:	2182      	movs	r1, #130	@ 0x82
 800d598:	f7f5 fd56 	bl	8003048 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	20002648 	.word	0x20002648
 800d5ac:	40005c00 	.word	0x40005c00

0800d5b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7f4 f946 	bl	8001858 <HAL_PCD_Start>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5d0:	7bfb      	ldrb	r3, [r7, #15]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f000 f97e 	bl	800d8d4 <USBD_Get_USB_Status>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3710      	adds	r7, #16
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b084      	sub	sp, #16
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	4608      	mov	r0, r1
 800d5f0:	4611      	mov	r1, r2
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	70fb      	strb	r3, [r7, #3]
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	70bb      	strb	r3, [r7, #2]
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d600:	2300      	movs	r3, #0
 800d602:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d604:	2300      	movs	r3, #0
 800d606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d60e:	78bb      	ldrb	r3, [r7, #2]
 800d610:	883a      	ldrh	r2, [r7, #0]
 800d612:	78f9      	ldrb	r1, [r7, #3]
 800d614:	f7f4 fa8d 	bl	8001b32 <HAL_PCD_EP_Open>
 800d618:	4603      	mov	r3, r0
 800d61a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d61c:	7bfb      	ldrb	r3, [r7, #15]
 800d61e:	4618      	mov	r0, r3
 800d620:	f000 f958 	bl	800d8d4 <USBD_Get_USB_Status>
 800d624:	4603      	mov	r3, r0
 800d626:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d628:	7bbb      	ldrb	r3, [r7, #14]
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d632:	b580      	push	{r7, lr}
 800d634:	b084      	sub	sp, #16
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
 800d63a:	460b      	mov	r3, r1
 800d63c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d63e:	2300      	movs	r3, #0
 800d640:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d642:	2300      	movs	r3, #0
 800d644:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d64c:	78fa      	ldrb	r2, [r7, #3]
 800d64e:	4611      	mov	r1, r2
 800d650:	4618      	mov	r0, r3
 800d652:	f7f4 facb 	bl	8001bec <HAL_PCD_EP_Close>
 800d656:	4603      	mov	r3, r0
 800d658:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d65a:	7bfb      	ldrb	r3, [r7, #15]
 800d65c:	4618      	mov	r0, r3
 800d65e:	f000 f939 	bl	800d8d4 <USBD_Get_USB_Status>
 800d662:	4603      	mov	r3, r0
 800d664:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d666:	7bbb      	ldrb	r3, [r7, #14]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3710      	adds	r7, #16
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	460b      	mov	r3, r1
 800d67a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d67c:	2300      	movs	r3, #0
 800d67e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d680:	2300      	movs	r3, #0
 800d682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d68a:	78fa      	ldrb	r2, [r7, #3]
 800d68c:	4611      	mov	r1, r2
 800d68e:	4618      	mov	r0, r3
 800d690:	f7f4 fb74 	bl	8001d7c <HAL_PCD_EP_SetStall>
 800d694:	4603      	mov	r3, r0
 800d696:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d698:	7bfb      	ldrb	r3, [r7, #15]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f000 f91a 	bl	800d8d4 <USBD_Get_USB_Status>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3710      	adds	r7, #16
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b084      	sub	sp, #16
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d6c8:	78fa      	ldrb	r2, [r7, #3]
 800d6ca:	4611      	mov	r1, r2
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7f4 fba7 	bl	8001e20 <HAL_PCD_EP_ClrStall>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6d6:	7bfb      	ldrb	r3, [r7, #15]
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f000 f8fb 	bl	800d8d4 <USBD_Get_USB_Status>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3710      	adds	r7, #16
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d6fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d704:	2b00      	cmp	r3, #0
 800d706:	da0b      	bge.n	800d720 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d708:	78fb      	ldrb	r3, [r7, #3]
 800d70a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d70e:	68f9      	ldr	r1, [r7, #12]
 800d710:	4613      	mov	r3, r2
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	4413      	add	r3, r2
 800d716:	00db      	lsls	r3, r3, #3
 800d718:	440b      	add	r3, r1
 800d71a:	3312      	adds	r3, #18
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	e00b      	b.n	800d738 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d720:	78fb      	ldrb	r3, [r7, #3]
 800d722:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d726:	68f9      	ldr	r1, [r7, #12]
 800d728:	4613      	mov	r3, r2
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	4413      	add	r3, r2
 800d72e:	00db      	lsls	r3, r3, #3
 800d730:	440b      	add	r3, r1
 800d732:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d736:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3714      	adds	r7, #20
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	460b      	mov	r3, r1
 800d74e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d750:	2300      	movs	r3, #0
 800d752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d754:	2300      	movs	r3, #0
 800d756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d75e:	78fa      	ldrb	r2, [r7, #3]
 800d760:	4611      	mov	r1, r2
 800d762:	4618      	mov	r0, r3
 800d764:	f7f4 f9c1 	bl	8001aea <HAL_PCD_SetAddress>
 800d768:	4603      	mov	r3, r0
 800d76a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d76c:	7bfb      	ldrb	r3, [r7, #15]
 800d76e:	4618      	mov	r0, r3
 800d770:	f000 f8b0 	bl	800d8d4 <USBD_Get_USB_Status>
 800d774:	4603      	mov	r3, r0
 800d776:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d778:	7bbb      	ldrb	r3, [r7, #14]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3710      	adds	r7, #16
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}

0800d782 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d782:	b580      	push	{r7, lr}
 800d784:	b086      	sub	sp, #24
 800d786:	af00      	add	r7, sp, #0
 800d788:	60f8      	str	r0, [r7, #12]
 800d78a:	607a      	str	r2, [r7, #4]
 800d78c:	603b      	str	r3, [r7, #0]
 800d78e:	460b      	mov	r3, r1
 800d790:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d792:	2300      	movs	r3, #0
 800d794:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d796:	2300      	movs	r3, #0
 800d798:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d7a0:	7af9      	ldrb	r1, [r7, #11]
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	f7f4 fab2 	bl	8001d0e <HAL_PCD_EP_Transmit>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7ae:	7dfb      	ldrb	r3, [r7, #23]
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f000 f88f 	bl	800d8d4 <USBD_Get_USB_Status>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3718      	adds	r7, #24
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b086      	sub	sp, #24
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	607a      	str	r2, [r7, #4]
 800d7ce:	603b      	str	r3, [r7, #0]
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d7e2:	7af9      	ldrb	r1, [r7, #11]
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	f7f4 fa48 	bl	8001c7c <HAL_PCD_EP_Receive>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7f0:	7dfb      	ldrb	r3, [r7, #23]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f000 f86e 	bl	800d8d4 <USBD_Get_USB_Status>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3718      	adds	r7, #24
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b082      	sub	sp, #8
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
 800d80e:	460b      	mov	r3, r1
 800d810:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d818:	78fa      	ldrb	r2, [r7, #3]
 800d81a:	4611      	mov	r1, r2
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7f4 fa5e 	bl	8001cde <HAL_PCD_EP_GetRxCount>
 800d822:	4603      	mov	r3, r0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	460b      	mov	r3, r1
 800d836:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d838:	78fb      	ldrb	r3, [r7, #3]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d002      	beq.n	800d844 <HAL_PCDEx_LPM_Callback+0x18>
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d013      	beq.n	800d86a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d842:	e023      	b.n	800d88c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	7a5b      	ldrb	r3, [r3, #9]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d007      	beq.n	800d85c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d84c:	f000 f83c 	bl	800d8c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d850:	4b10      	ldr	r3, [pc, #64]	@ (800d894 <HAL_PCDEx_LPM_Callback+0x68>)
 800d852:	691b      	ldr	r3, [r3, #16]
 800d854:	4a0f      	ldr	r2, [pc, #60]	@ (800d894 <HAL_PCDEx_LPM_Callback+0x68>)
 800d856:	f023 0306 	bic.w	r3, r3, #6
 800d85a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d862:	4618      	mov	r0, r3
 800d864:	f7fb f814 	bl	8008890 <USBD_LL_Resume>
    break;
 800d868:	e010      	b.n	800d88c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d870:	4618      	mov	r0, r3
 800d872:	f7fa fff7 	bl	8008864 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	7a5b      	ldrb	r3, [r3, #9]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d005      	beq.n	800d88a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d87e:	4b05      	ldr	r3, [pc, #20]	@ (800d894 <HAL_PCDEx_LPM_Callback+0x68>)
 800d880:	691b      	ldr	r3, [r3, #16]
 800d882:	4a04      	ldr	r2, [pc, #16]	@ (800d894 <HAL_PCDEx_LPM_Callback+0x68>)
 800d884:	f043 0306 	orr.w	r3, r3, #6
 800d888:	6113      	str	r3, [r2, #16]
    break;
 800d88a:	bf00      	nop
}
 800d88c:	bf00      	nop
 800d88e:	3708      	adds	r7, #8
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	e000ed00 	.word	0xe000ed00

0800d898 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d898:	b480      	push	{r7}
 800d89a:	b083      	sub	sp, #12
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d8a0:	4b03      	ldr	r3, [pc, #12]	@ (800d8b0 <USBD_static_malloc+0x18>)
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	370c      	adds	r7, #12
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	20002924 	.word	0x20002924

0800d8b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]

}
 800d8bc:	bf00      	nop
 800d8be:	370c      	adds	r7, #12
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d8cc:	f7f2 fdd8 	bl	8000480 <SystemClock_Config>
}
 800d8d0:	bf00      	nop
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	4603      	mov	r3, r0
 800d8dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d8e2:	79fb      	ldrb	r3, [r7, #7]
 800d8e4:	2b03      	cmp	r3, #3
 800d8e6:	d817      	bhi.n	800d918 <USBD_Get_USB_Status+0x44>
 800d8e8:	a201      	add	r2, pc, #4	@ (adr r2, 800d8f0 <USBD_Get_USB_Status+0x1c>)
 800d8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ee:	bf00      	nop
 800d8f0:	0800d901 	.word	0x0800d901
 800d8f4:	0800d907 	.word	0x0800d907
 800d8f8:	0800d90d 	.word	0x0800d90d
 800d8fc:	0800d913 	.word	0x0800d913
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d900:	2300      	movs	r3, #0
 800d902:	73fb      	strb	r3, [r7, #15]
    break;
 800d904:	e00b      	b.n	800d91e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d906:	2303      	movs	r3, #3
 800d908:	73fb      	strb	r3, [r7, #15]
    break;
 800d90a:	e008      	b.n	800d91e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d90c:	2301      	movs	r3, #1
 800d90e:	73fb      	strb	r3, [r7, #15]
    break;
 800d910:	e005      	b.n	800d91e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d912:	2303      	movs	r3, #3
 800d914:	73fb      	strb	r3, [r7, #15]
    break;
 800d916:	e002      	b.n	800d91e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d918:	2303      	movs	r3, #3
 800d91a:	73fb      	strb	r3, [r7, #15]
    break;
 800d91c:	bf00      	nop
  }
  return usb_status;
 800d91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3714      	adds	r7, #20
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <atoi>:
 800d92c:	220a      	movs	r2, #10
 800d92e:	2100      	movs	r1, #0
 800d930:	f000 b87a 	b.w	800da28 <strtol>

0800d934 <_strtol_l.constprop.0>:
 800d934:	2b24      	cmp	r3, #36	@ 0x24
 800d936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d93a:	4686      	mov	lr, r0
 800d93c:	4690      	mov	r8, r2
 800d93e:	d801      	bhi.n	800d944 <_strtol_l.constprop.0+0x10>
 800d940:	2b01      	cmp	r3, #1
 800d942:	d106      	bne.n	800d952 <_strtol_l.constprop.0+0x1e>
 800d944:	f000 fb50 	bl	800dfe8 <__errno>
 800d948:	2316      	movs	r3, #22
 800d94a:	6003      	str	r3, [r0, #0]
 800d94c:	2000      	movs	r0, #0
 800d94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d952:	4834      	ldr	r0, [pc, #208]	@ (800da24 <_strtol_l.constprop.0+0xf0>)
 800d954:	460d      	mov	r5, r1
 800d956:	462a      	mov	r2, r5
 800d958:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d95c:	5d06      	ldrb	r6, [r0, r4]
 800d95e:	f016 0608 	ands.w	r6, r6, #8
 800d962:	d1f8      	bne.n	800d956 <_strtol_l.constprop.0+0x22>
 800d964:	2c2d      	cmp	r4, #45	@ 0x2d
 800d966:	d12d      	bne.n	800d9c4 <_strtol_l.constprop.0+0x90>
 800d968:	782c      	ldrb	r4, [r5, #0]
 800d96a:	2601      	movs	r6, #1
 800d96c:	1c95      	adds	r5, r2, #2
 800d96e:	f033 0210 	bics.w	r2, r3, #16
 800d972:	d109      	bne.n	800d988 <_strtol_l.constprop.0+0x54>
 800d974:	2c30      	cmp	r4, #48	@ 0x30
 800d976:	d12a      	bne.n	800d9ce <_strtol_l.constprop.0+0x9a>
 800d978:	782a      	ldrb	r2, [r5, #0]
 800d97a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d97e:	2a58      	cmp	r2, #88	@ 0x58
 800d980:	d125      	bne.n	800d9ce <_strtol_l.constprop.0+0x9a>
 800d982:	786c      	ldrb	r4, [r5, #1]
 800d984:	2310      	movs	r3, #16
 800d986:	3502      	adds	r5, #2
 800d988:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d98c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d990:	2200      	movs	r2, #0
 800d992:	fbbc f9f3 	udiv	r9, ip, r3
 800d996:	4610      	mov	r0, r2
 800d998:	fb03 ca19 	mls	sl, r3, r9, ip
 800d99c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d9a0:	2f09      	cmp	r7, #9
 800d9a2:	d81b      	bhi.n	800d9dc <_strtol_l.constprop.0+0xa8>
 800d9a4:	463c      	mov	r4, r7
 800d9a6:	42a3      	cmp	r3, r4
 800d9a8:	dd27      	ble.n	800d9fa <_strtol_l.constprop.0+0xc6>
 800d9aa:	1c57      	adds	r7, r2, #1
 800d9ac:	d007      	beq.n	800d9be <_strtol_l.constprop.0+0x8a>
 800d9ae:	4581      	cmp	r9, r0
 800d9b0:	d320      	bcc.n	800d9f4 <_strtol_l.constprop.0+0xc0>
 800d9b2:	d101      	bne.n	800d9b8 <_strtol_l.constprop.0+0x84>
 800d9b4:	45a2      	cmp	sl, r4
 800d9b6:	db1d      	blt.n	800d9f4 <_strtol_l.constprop.0+0xc0>
 800d9b8:	fb00 4003 	mla	r0, r0, r3, r4
 800d9bc:	2201      	movs	r2, #1
 800d9be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d9c2:	e7eb      	b.n	800d99c <_strtol_l.constprop.0+0x68>
 800d9c4:	2c2b      	cmp	r4, #43	@ 0x2b
 800d9c6:	bf04      	itt	eq
 800d9c8:	782c      	ldrbeq	r4, [r5, #0]
 800d9ca:	1c95      	addeq	r5, r2, #2
 800d9cc:	e7cf      	b.n	800d96e <_strtol_l.constprop.0+0x3a>
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1da      	bne.n	800d988 <_strtol_l.constprop.0+0x54>
 800d9d2:	2c30      	cmp	r4, #48	@ 0x30
 800d9d4:	bf0c      	ite	eq
 800d9d6:	2308      	moveq	r3, #8
 800d9d8:	230a      	movne	r3, #10
 800d9da:	e7d5      	b.n	800d988 <_strtol_l.constprop.0+0x54>
 800d9dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d9e0:	2f19      	cmp	r7, #25
 800d9e2:	d801      	bhi.n	800d9e8 <_strtol_l.constprop.0+0xb4>
 800d9e4:	3c37      	subs	r4, #55	@ 0x37
 800d9e6:	e7de      	b.n	800d9a6 <_strtol_l.constprop.0+0x72>
 800d9e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d9ec:	2f19      	cmp	r7, #25
 800d9ee:	d804      	bhi.n	800d9fa <_strtol_l.constprop.0+0xc6>
 800d9f0:	3c57      	subs	r4, #87	@ 0x57
 800d9f2:	e7d8      	b.n	800d9a6 <_strtol_l.constprop.0+0x72>
 800d9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9f8:	e7e1      	b.n	800d9be <_strtol_l.constprop.0+0x8a>
 800d9fa:	1c53      	adds	r3, r2, #1
 800d9fc:	d108      	bne.n	800da10 <_strtol_l.constprop.0+0xdc>
 800d9fe:	2322      	movs	r3, #34	@ 0x22
 800da00:	f8ce 3000 	str.w	r3, [lr]
 800da04:	4660      	mov	r0, ip
 800da06:	f1b8 0f00 	cmp.w	r8, #0
 800da0a:	d0a0      	beq.n	800d94e <_strtol_l.constprop.0+0x1a>
 800da0c:	1e69      	subs	r1, r5, #1
 800da0e:	e006      	b.n	800da1e <_strtol_l.constprop.0+0xea>
 800da10:	b106      	cbz	r6, 800da14 <_strtol_l.constprop.0+0xe0>
 800da12:	4240      	negs	r0, r0
 800da14:	f1b8 0f00 	cmp.w	r8, #0
 800da18:	d099      	beq.n	800d94e <_strtol_l.constprop.0+0x1a>
 800da1a:	2a00      	cmp	r2, #0
 800da1c:	d1f6      	bne.n	800da0c <_strtol_l.constprop.0+0xd8>
 800da1e:	f8c8 1000 	str.w	r1, [r8]
 800da22:	e794      	b.n	800d94e <_strtol_l.constprop.0+0x1a>
 800da24:	0800f2b9 	.word	0x0800f2b9

0800da28 <strtol>:
 800da28:	4613      	mov	r3, r2
 800da2a:	460a      	mov	r2, r1
 800da2c:	4601      	mov	r1, r0
 800da2e:	4802      	ldr	r0, [pc, #8]	@ (800da38 <strtol+0x10>)
 800da30:	6800      	ldr	r0, [r0, #0]
 800da32:	f7ff bf7f 	b.w	800d934 <_strtol_l.constprop.0>
 800da36:	bf00      	nop
 800da38:	20000194 	.word	0x20000194

0800da3c <std>:
 800da3c:	2300      	movs	r3, #0
 800da3e:	b510      	push	{r4, lr}
 800da40:	4604      	mov	r4, r0
 800da42:	e9c0 3300 	strd	r3, r3, [r0]
 800da46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da4a:	6083      	str	r3, [r0, #8]
 800da4c:	8181      	strh	r1, [r0, #12]
 800da4e:	6643      	str	r3, [r0, #100]	@ 0x64
 800da50:	81c2      	strh	r2, [r0, #14]
 800da52:	6183      	str	r3, [r0, #24]
 800da54:	4619      	mov	r1, r3
 800da56:	2208      	movs	r2, #8
 800da58:	305c      	adds	r0, #92	@ 0x5c
 800da5a:	f000 fa1b 	bl	800de94 <memset>
 800da5e:	4b0d      	ldr	r3, [pc, #52]	@ (800da94 <std+0x58>)
 800da60:	6263      	str	r3, [r4, #36]	@ 0x24
 800da62:	4b0d      	ldr	r3, [pc, #52]	@ (800da98 <std+0x5c>)
 800da64:	62a3      	str	r3, [r4, #40]	@ 0x28
 800da66:	4b0d      	ldr	r3, [pc, #52]	@ (800da9c <std+0x60>)
 800da68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800da6a:	4b0d      	ldr	r3, [pc, #52]	@ (800daa0 <std+0x64>)
 800da6c:	6323      	str	r3, [r4, #48]	@ 0x30
 800da6e:	4b0d      	ldr	r3, [pc, #52]	@ (800daa4 <std+0x68>)
 800da70:	6224      	str	r4, [r4, #32]
 800da72:	429c      	cmp	r4, r3
 800da74:	d006      	beq.n	800da84 <std+0x48>
 800da76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800da7a:	4294      	cmp	r4, r2
 800da7c:	d002      	beq.n	800da84 <std+0x48>
 800da7e:	33d0      	adds	r3, #208	@ 0xd0
 800da80:	429c      	cmp	r4, r3
 800da82:	d105      	bne.n	800da90 <std+0x54>
 800da84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800da88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da8c:	f000 bad6 	b.w	800e03c <__retarget_lock_init_recursive>
 800da90:	bd10      	pop	{r4, pc}
 800da92:	bf00      	nop
 800da94:	0800dce5 	.word	0x0800dce5
 800da98:	0800dd07 	.word	0x0800dd07
 800da9c:	0800dd3f 	.word	0x0800dd3f
 800daa0:	0800dd63 	.word	0x0800dd63
 800daa4:	20002b44 	.word	0x20002b44

0800daa8 <stdio_exit_handler>:
 800daa8:	4a02      	ldr	r2, [pc, #8]	@ (800dab4 <stdio_exit_handler+0xc>)
 800daaa:	4903      	ldr	r1, [pc, #12]	@ (800dab8 <stdio_exit_handler+0x10>)
 800daac:	4803      	ldr	r0, [pc, #12]	@ (800dabc <stdio_exit_handler+0x14>)
 800daae:	f000 b869 	b.w	800db84 <_fwalk_sglue>
 800dab2:	bf00      	nop
 800dab4:	20000188 	.word	0x20000188
 800dab8:	0800e971 	.word	0x0800e971
 800dabc:	20000198 	.word	0x20000198

0800dac0 <cleanup_stdio>:
 800dac0:	6841      	ldr	r1, [r0, #4]
 800dac2:	4b0c      	ldr	r3, [pc, #48]	@ (800daf4 <cleanup_stdio+0x34>)
 800dac4:	4299      	cmp	r1, r3
 800dac6:	b510      	push	{r4, lr}
 800dac8:	4604      	mov	r4, r0
 800daca:	d001      	beq.n	800dad0 <cleanup_stdio+0x10>
 800dacc:	f000 ff50 	bl	800e970 <_fflush_r>
 800dad0:	68a1      	ldr	r1, [r4, #8]
 800dad2:	4b09      	ldr	r3, [pc, #36]	@ (800daf8 <cleanup_stdio+0x38>)
 800dad4:	4299      	cmp	r1, r3
 800dad6:	d002      	beq.n	800dade <cleanup_stdio+0x1e>
 800dad8:	4620      	mov	r0, r4
 800dada:	f000 ff49 	bl	800e970 <_fflush_r>
 800dade:	68e1      	ldr	r1, [r4, #12]
 800dae0:	4b06      	ldr	r3, [pc, #24]	@ (800dafc <cleanup_stdio+0x3c>)
 800dae2:	4299      	cmp	r1, r3
 800dae4:	d004      	beq.n	800daf0 <cleanup_stdio+0x30>
 800dae6:	4620      	mov	r0, r4
 800dae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daec:	f000 bf40 	b.w	800e970 <_fflush_r>
 800daf0:	bd10      	pop	{r4, pc}
 800daf2:	bf00      	nop
 800daf4:	20002b44 	.word	0x20002b44
 800daf8:	20002bac 	.word	0x20002bac
 800dafc:	20002c14 	.word	0x20002c14

0800db00 <global_stdio_init.part.0>:
 800db00:	b510      	push	{r4, lr}
 800db02:	4b0b      	ldr	r3, [pc, #44]	@ (800db30 <global_stdio_init.part.0+0x30>)
 800db04:	4c0b      	ldr	r4, [pc, #44]	@ (800db34 <global_stdio_init.part.0+0x34>)
 800db06:	4a0c      	ldr	r2, [pc, #48]	@ (800db38 <global_stdio_init.part.0+0x38>)
 800db08:	601a      	str	r2, [r3, #0]
 800db0a:	4620      	mov	r0, r4
 800db0c:	2200      	movs	r2, #0
 800db0e:	2104      	movs	r1, #4
 800db10:	f7ff ff94 	bl	800da3c <std>
 800db14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800db18:	2201      	movs	r2, #1
 800db1a:	2109      	movs	r1, #9
 800db1c:	f7ff ff8e 	bl	800da3c <std>
 800db20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800db24:	2202      	movs	r2, #2
 800db26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db2a:	2112      	movs	r1, #18
 800db2c:	f7ff bf86 	b.w	800da3c <std>
 800db30:	20002c7c 	.word	0x20002c7c
 800db34:	20002b44 	.word	0x20002b44
 800db38:	0800daa9 	.word	0x0800daa9

0800db3c <__sfp_lock_acquire>:
 800db3c:	4801      	ldr	r0, [pc, #4]	@ (800db44 <__sfp_lock_acquire+0x8>)
 800db3e:	f000 ba7e 	b.w	800e03e <__retarget_lock_acquire_recursive>
 800db42:	bf00      	nop
 800db44:	20002c85 	.word	0x20002c85

0800db48 <__sfp_lock_release>:
 800db48:	4801      	ldr	r0, [pc, #4]	@ (800db50 <__sfp_lock_release+0x8>)
 800db4a:	f000 ba79 	b.w	800e040 <__retarget_lock_release_recursive>
 800db4e:	bf00      	nop
 800db50:	20002c85 	.word	0x20002c85

0800db54 <__sinit>:
 800db54:	b510      	push	{r4, lr}
 800db56:	4604      	mov	r4, r0
 800db58:	f7ff fff0 	bl	800db3c <__sfp_lock_acquire>
 800db5c:	6a23      	ldr	r3, [r4, #32]
 800db5e:	b11b      	cbz	r3, 800db68 <__sinit+0x14>
 800db60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db64:	f7ff bff0 	b.w	800db48 <__sfp_lock_release>
 800db68:	4b04      	ldr	r3, [pc, #16]	@ (800db7c <__sinit+0x28>)
 800db6a:	6223      	str	r3, [r4, #32]
 800db6c:	4b04      	ldr	r3, [pc, #16]	@ (800db80 <__sinit+0x2c>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d1f5      	bne.n	800db60 <__sinit+0xc>
 800db74:	f7ff ffc4 	bl	800db00 <global_stdio_init.part.0>
 800db78:	e7f2      	b.n	800db60 <__sinit+0xc>
 800db7a:	bf00      	nop
 800db7c:	0800dac1 	.word	0x0800dac1
 800db80:	20002c7c 	.word	0x20002c7c

0800db84 <_fwalk_sglue>:
 800db84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db88:	4607      	mov	r7, r0
 800db8a:	4688      	mov	r8, r1
 800db8c:	4614      	mov	r4, r2
 800db8e:	2600      	movs	r6, #0
 800db90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db94:	f1b9 0901 	subs.w	r9, r9, #1
 800db98:	d505      	bpl.n	800dba6 <_fwalk_sglue+0x22>
 800db9a:	6824      	ldr	r4, [r4, #0]
 800db9c:	2c00      	cmp	r4, #0
 800db9e:	d1f7      	bne.n	800db90 <_fwalk_sglue+0xc>
 800dba0:	4630      	mov	r0, r6
 800dba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dba6:	89ab      	ldrh	r3, [r5, #12]
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	d907      	bls.n	800dbbc <_fwalk_sglue+0x38>
 800dbac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	d003      	beq.n	800dbbc <_fwalk_sglue+0x38>
 800dbb4:	4629      	mov	r1, r5
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	47c0      	blx	r8
 800dbba:	4306      	orrs	r6, r0
 800dbbc:	3568      	adds	r5, #104	@ 0x68
 800dbbe:	e7e9      	b.n	800db94 <_fwalk_sglue+0x10>

0800dbc0 <_puts_r>:
 800dbc0:	6a03      	ldr	r3, [r0, #32]
 800dbc2:	b570      	push	{r4, r5, r6, lr}
 800dbc4:	6884      	ldr	r4, [r0, #8]
 800dbc6:	4605      	mov	r5, r0
 800dbc8:	460e      	mov	r6, r1
 800dbca:	b90b      	cbnz	r3, 800dbd0 <_puts_r+0x10>
 800dbcc:	f7ff ffc2 	bl	800db54 <__sinit>
 800dbd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbd2:	07db      	lsls	r3, r3, #31
 800dbd4:	d405      	bmi.n	800dbe2 <_puts_r+0x22>
 800dbd6:	89a3      	ldrh	r3, [r4, #12]
 800dbd8:	0598      	lsls	r0, r3, #22
 800dbda:	d402      	bmi.n	800dbe2 <_puts_r+0x22>
 800dbdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbde:	f000 fa2e 	bl	800e03e <__retarget_lock_acquire_recursive>
 800dbe2:	89a3      	ldrh	r3, [r4, #12]
 800dbe4:	0719      	lsls	r1, r3, #28
 800dbe6:	d502      	bpl.n	800dbee <_puts_r+0x2e>
 800dbe8:	6923      	ldr	r3, [r4, #16]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d135      	bne.n	800dc5a <_puts_r+0x9a>
 800dbee:	4621      	mov	r1, r4
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	f000 f8f9 	bl	800dde8 <__swsetup_r>
 800dbf6:	b380      	cbz	r0, 800dc5a <_puts_r+0x9a>
 800dbf8:	f04f 35ff 	mov.w	r5, #4294967295
 800dbfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbfe:	07da      	lsls	r2, r3, #31
 800dc00:	d405      	bmi.n	800dc0e <_puts_r+0x4e>
 800dc02:	89a3      	ldrh	r3, [r4, #12]
 800dc04:	059b      	lsls	r3, r3, #22
 800dc06:	d402      	bmi.n	800dc0e <_puts_r+0x4e>
 800dc08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc0a:	f000 fa19 	bl	800e040 <__retarget_lock_release_recursive>
 800dc0e:	4628      	mov	r0, r5
 800dc10:	bd70      	pop	{r4, r5, r6, pc}
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	da04      	bge.n	800dc20 <_puts_r+0x60>
 800dc16:	69a2      	ldr	r2, [r4, #24]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	dc17      	bgt.n	800dc4c <_puts_r+0x8c>
 800dc1c:	290a      	cmp	r1, #10
 800dc1e:	d015      	beq.n	800dc4c <_puts_r+0x8c>
 800dc20:	6823      	ldr	r3, [r4, #0]
 800dc22:	1c5a      	adds	r2, r3, #1
 800dc24:	6022      	str	r2, [r4, #0]
 800dc26:	7019      	strb	r1, [r3, #0]
 800dc28:	68a3      	ldr	r3, [r4, #8]
 800dc2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dc2e:	3b01      	subs	r3, #1
 800dc30:	60a3      	str	r3, [r4, #8]
 800dc32:	2900      	cmp	r1, #0
 800dc34:	d1ed      	bne.n	800dc12 <_puts_r+0x52>
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	da11      	bge.n	800dc5e <_puts_r+0x9e>
 800dc3a:	4622      	mov	r2, r4
 800dc3c:	210a      	movs	r1, #10
 800dc3e:	4628      	mov	r0, r5
 800dc40:	f000 f893 	bl	800dd6a <__swbuf_r>
 800dc44:	3001      	adds	r0, #1
 800dc46:	d0d7      	beq.n	800dbf8 <_puts_r+0x38>
 800dc48:	250a      	movs	r5, #10
 800dc4a:	e7d7      	b.n	800dbfc <_puts_r+0x3c>
 800dc4c:	4622      	mov	r2, r4
 800dc4e:	4628      	mov	r0, r5
 800dc50:	f000 f88b 	bl	800dd6a <__swbuf_r>
 800dc54:	3001      	adds	r0, #1
 800dc56:	d1e7      	bne.n	800dc28 <_puts_r+0x68>
 800dc58:	e7ce      	b.n	800dbf8 <_puts_r+0x38>
 800dc5a:	3e01      	subs	r6, #1
 800dc5c:	e7e4      	b.n	800dc28 <_puts_r+0x68>
 800dc5e:	6823      	ldr	r3, [r4, #0]
 800dc60:	1c5a      	adds	r2, r3, #1
 800dc62:	6022      	str	r2, [r4, #0]
 800dc64:	220a      	movs	r2, #10
 800dc66:	701a      	strb	r2, [r3, #0]
 800dc68:	e7ee      	b.n	800dc48 <_puts_r+0x88>
	...

0800dc6c <puts>:
 800dc6c:	4b02      	ldr	r3, [pc, #8]	@ (800dc78 <puts+0xc>)
 800dc6e:	4601      	mov	r1, r0
 800dc70:	6818      	ldr	r0, [r3, #0]
 800dc72:	f7ff bfa5 	b.w	800dbc0 <_puts_r>
 800dc76:	bf00      	nop
 800dc78:	20000194 	.word	0x20000194

0800dc7c <sniprintf>:
 800dc7c:	b40c      	push	{r2, r3}
 800dc7e:	b530      	push	{r4, r5, lr}
 800dc80:	4b17      	ldr	r3, [pc, #92]	@ (800dce0 <sniprintf+0x64>)
 800dc82:	1e0c      	subs	r4, r1, #0
 800dc84:	681d      	ldr	r5, [r3, #0]
 800dc86:	b09d      	sub	sp, #116	@ 0x74
 800dc88:	da08      	bge.n	800dc9c <sniprintf+0x20>
 800dc8a:	238b      	movs	r3, #139	@ 0x8b
 800dc8c:	602b      	str	r3, [r5, #0]
 800dc8e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc92:	b01d      	add	sp, #116	@ 0x74
 800dc94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc98:	b002      	add	sp, #8
 800dc9a:	4770      	bx	lr
 800dc9c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dca0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dca4:	bf14      	ite	ne
 800dca6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dcaa:	4623      	moveq	r3, r4
 800dcac:	9304      	str	r3, [sp, #16]
 800dcae:	9307      	str	r3, [sp, #28]
 800dcb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dcb4:	9002      	str	r0, [sp, #8]
 800dcb6:	9006      	str	r0, [sp, #24]
 800dcb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dcbc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dcbe:	ab21      	add	r3, sp, #132	@ 0x84
 800dcc0:	a902      	add	r1, sp, #8
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	9301      	str	r3, [sp, #4]
 800dcc6:	f000 fb45 	bl	800e354 <_svfiprintf_r>
 800dcca:	1c43      	adds	r3, r0, #1
 800dccc:	bfbc      	itt	lt
 800dcce:	238b      	movlt	r3, #139	@ 0x8b
 800dcd0:	602b      	strlt	r3, [r5, #0]
 800dcd2:	2c00      	cmp	r4, #0
 800dcd4:	d0dd      	beq.n	800dc92 <sniprintf+0x16>
 800dcd6:	9b02      	ldr	r3, [sp, #8]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	701a      	strb	r2, [r3, #0]
 800dcdc:	e7d9      	b.n	800dc92 <sniprintf+0x16>
 800dcde:	bf00      	nop
 800dce0:	20000194 	.word	0x20000194

0800dce4 <__sread>:
 800dce4:	b510      	push	{r4, lr}
 800dce6:	460c      	mov	r4, r1
 800dce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcec:	f000 f958 	bl	800dfa0 <_read_r>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	bfab      	itete	ge
 800dcf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dcf6:	89a3      	ldrhlt	r3, [r4, #12]
 800dcf8:	181b      	addge	r3, r3, r0
 800dcfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dcfe:	bfac      	ite	ge
 800dd00:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dd02:	81a3      	strhlt	r3, [r4, #12]
 800dd04:	bd10      	pop	{r4, pc}

0800dd06 <__swrite>:
 800dd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0a:	461f      	mov	r7, r3
 800dd0c:	898b      	ldrh	r3, [r1, #12]
 800dd0e:	05db      	lsls	r3, r3, #23
 800dd10:	4605      	mov	r5, r0
 800dd12:	460c      	mov	r4, r1
 800dd14:	4616      	mov	r6, r2
 800dd16:	d505      	bpl.n	800dd24 <__swrite+0x1e>
 800dd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f000 f92c 	bl	800df7c <_lseek_r>
 800dd24:	89a3      	ldrh	r3, [r4, #12]
 800dd26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd2e:	81a3      	strh	r3, [r4, #12]
 800dd30:	4632      	mov	r2, r6
 800dd32:	463b      	mov	r3, r7
 800dd34:	4628      	mov	r0, r5
 800dd36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3a:	f000 b943 	b.w	800dfc4 <_write_r>

0800dd3e <__sseek>:
 800dd3e:	b510      	push	{r4, lr}
 800dd40:	460c      	mov	r4, r1
 800dd42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd46:	f000 f919 	bl	800df7c <_lseek_r>
 800dd4a:	1c43      	adds	r3, r0, #1
 800dd4c:	89a3      	ldrh	r3, [r4, #12]
 800dd4e:	bf15      	itete	ne
 800dd50:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dd52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dd56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dd5a:	81a3      	strheq	r3, [r4, #12]
 800dd5c:	bf18      	it	ne
 800dd5e:	81a3      	strhne	r3, [r4, #12]
 800dd60:	bd10      	pop	{r4, pc}

0800dd62 <__sclose>:
 800dd62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd66:	f000 b8f9 	b.w	800df5c <_close_r>

0800dd6a <__swbuf_r>:
 800dd6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6c:	460e      	mov	r6, r1
 800dd6e:	4614      	mov	r4, r2
 800dd70:	4605      	mov	r5, r0
 800dd72:	b118      	cbz	r0, 800dd7c <__swbuf_r+0x12>
 800dd74:	6a03      	ldr	r3, [r0, #32]
 800dd76:	b90b      	cbnz	r3, 800dd7c <__swbuf_r+0x12>
 800dd78:	f7ff feec 	bl	800db54 <__sinit>
 800dd7c:	69a3      	ldr	r3, [r4, #24]
 800dd7e:	60a3      	str	r3, [r4, #8]
 800dd80:	89a3      	ldrh	r3, [r4, #12]
 800dd82:	071a      	lsls	r2, r3, #28
 800dd84:	d501      	bpl.n	800dd8a <__swbuf_r+0x20>
 800dd86:	6923      	ldr	r3, [r4, #16]
 800dd88:	b943      	cbnz	r3, 800dd9c <__swbuf_r+0x32>
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	f000 f82b 	bl	800dde8 <__swsetup_r>
 800dd92:	b118      	cbz	r0, 800dd9c <__swbuf_r+0x32>
 800dd94:	f04f 37ff 	mov.w	r7, #4294967295
 800dd98:	4638      	mov	r0, r7
 800dd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd9c:	6823      	ldr	r3, [r4, #0]
 800dd9e:	6922      	ldr	r2, [r4, #16]
 800dda0:	1a98      	subs	r0, r3, r2
 800dda2:	6963      	ldr	r3, [r4, #20]
 800dda4:	b2f6      	uxtb	r6, r6
 800dda6:	4283      	cmp	r3, r0
 800dda8:	4637      	mov	r7, r6
 800ddaa:	dc05      	bgt.n	800ddb8 <__swbuf_r+0x4e>
 800ddac:	4621      	mov	r1, r4
 800ddae:	4628      	mov	r0, r5
 800ddb0:	f000 fdde 	bl	800e970 <_fflush_r>
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	d1ed      	bne.n	800dd94 <__swbuf_r+0x2a>
 800ddb8:	68a3      	ldr	r3, [r4, #8]
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	60a3      	str	r3, [r4, #8]
 800ddbe:	6823      	ldr	r3, [r4, #0]
 800ddc0:	1c5a      	adds	r2, r3, #1
 800ddc2:	6022      	str	r2, [r4, #0]
 800ddc4:	701e      	strb	r6, [r3, #0]
 800ddc6:	6962      	ldr	r2, [r4, #20]
 800ddc8:	1c43      	adds	r3, r0, #1
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d004      	beq.n	800ddd8 <__swbuf_r+0x6e>
 800ddce:	89a3      	ldrh	r3, [r4, #12]
 800ddd0:	07db      	lsls	r3, r3, #31
 800ddd2:	d5e1      	bpl.n	800dd98 <__swbuf_r+0x2e>
 800ddd4:	2e0a      	cmp	r6, #10
 800ddd6:	d1df      	bne.n	800dd98 <__swbuf_r+0x2e>
 800ddd8:	4621      	mov	r1, r4
 800ddda:	4628      	mov	r0, r5
 800dddc:	f000 fdc8 	bl	800e970 <_fflush_r>
 800dde0:	2800      	cmp	r0, #0
 800dde2:	d0d9      	beq.n	800dd98 <__swbuf_r+0x2e>
 800dde4:	e7d6      	b.n	800dd94 <__swbuf_r+0x2a>
	...

0800dde8 <__swsetup_r>:
 800dde8:	b538      	push	{r3, r4, r5, lr}
 800ddea:	4b29      	ldr	r3, [pc, #164]	@ (800de90 <__swsetup_r+0xa8>)
 800ddec:	4605      	mov	r5, r0
 800ddee:	6818      	ldr	r0, [r3, #0]
 800ddf0:	460c      	mov	r4, r1
 800ddf2:	b118      	cbz	r0, 800ddfc <__swsetup_r+0x14>
 800ddf4:	6a03      	ldr	r3, [r0, #32]
 800ddf6:	b90b      	cbnz	r3, 800ddfc <__swsetup_r+0x14>
 800ddf8:	f7ff feac 	bl	800db54 <__sinit>
 800ddfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de00:	0719      	lsls	r1, r3, #28
 800de02:	d422      	bmi.n	800de4a <__swsetup_r+0x62>
 800de04:	06da      	lsls	r2, r3, #27
 800de06:	d407      	bmi.n	800de18 <__swsetup_r+0x30>
 800de08:	2209      	movs	r2, #9
 800de0a:	602a      	str	r2, [r5, #0]
 800de0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de10:	81a3      	strh	r3, [r4, #12]
 800de12:	f04f 30ff 	mov.w	r0, #4294967295
 800de16:	e033      	b.n	800de80 <__swsetup_r+0x98>
 800de18:	0758      	lsls	r0, r3, #29
 800de1a:	d512      	bpl.n	800de42 <__swsetup_r+0x5a>
 800de1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de1e:	b141      	cbz	r1, 800de32 <__swsetup_r+0x4a>
 800de20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de24:	4299      	cmp	r1, r3
 800de26:	d002      	beq.n	800de2e <__swsetup_r+0x46>
 800de28:	4628      	mov	r0, r5
 800de2a:	f000 f937 	bl	800e09c <_free_r>
 800de2e:	2300      	movs	r3, #0
 800de30:	6363      	str	r3, [r4, #52]	@ 0x34
 800de32:	89a3      	ldrh	r3, [r4, #12]
 800de34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800de38:	81a3      	strh	r3, [r4, #12]
 800de3a:	2300      	movs	r3, #0
 800de3c:	6063      	str	r3, [r4, #4]
 800de3e:	6923      	ldr	r3, [r4, #16]
 800de40:	6023      	str	r3, [r4, #0]
 800de42:	89a3      	ldrh	r3, [r4, #12]
 800de44:	f043 0308 	orr.w	r3, r3, #8
 800de48:	81a3      	strh	r3, [r4, #12]
 800de4a:	6923      	ldr	r3, [r4, #16]
 800de4c:	b94b      	cbnz	r3, 800de62 <__swsetup_r+0x7a>
 800de4e:	89a3      	ldrh	r3, [r4, #12]
 800de50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800de54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de58:	d003      	beq.n	800de62 <__swsetup_r+0x7a>
 800de5a:	4621      	mov	r1, r4
 800de5c:	4628      	mov	r0, r5
 800de5e:	f000 fde7 	bl	800ea30 <__smakebuf_r>
 800de62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de66:	f013 0201 	ands.w	r2, r3, #1
 800de6a:	d00a      	beq.n	800de82 <__swsetup_r+0x9a>
 800de6c:	2200      	movs	r2, #0
 800de6e:	60a2      	str	r2, [r4, #8]
 800de70:	6962      	ldr	r2, [r4, #20]
 800de72:	4252      	negs	r2, r2
 800de74:	61a2      	str	r2, [r4, #24]
 800de76:	6922      	ldr	r2, [r4, #16]
 800de78:	b942      	cbnz	r2, 800de8c <__swsetup_r+0xa4>
 800de7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800de7e:	d1c5      	bne.n	800de0c <__swsetup_r+0x24>
 800de80:	bd38      	pop	{r3, r4, r5, pc}
 800de82:	0799      	lsls	r1, r3, #30
 800de84:	bf58      	it	pl
 800de86:	6962      	ldrpl	r2, [r4, #20]
 800de88:	60a2      	str	r2, [r4, #8]
 800de8a:	e7f4      	b.n	800de76 <__swsetup_r+0x8e>
 800de8c:	2000      	movs	r0, #0
 800de8e:	e7f7      	b.n	800de80 <__swsetup_r+0x98>
 800de90:	20000194 	.word	0x20000194

0800de94 <memset>:
 800de94:	4402      	add	r2, r0
 800de96:	4603      	mov	r3, r0
 800de98:	4293      	cmp	r3, r2
 800de9a:	d100      	bne.n	800de9e <memset+0xa>
 800de9c:	4770      	bx	lr
 800de9e:	f803 1b01 	strb.w	r1, [r3], #1
 800dea2:	e7f9      	b.n	800de98 <memset+0x4>

0800dea4 <strtok>:
 800dea4:	4b16      	ldr	r3, [pc, #88]	@ (800df00 <strtok+0x5c>)
 800dea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deaa:	681f      	ldr	r7, [r3, #0]
 800deac:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800deae:	4605      	mov	r5, r0
 800deb0:	460e      	mov	r6, r1
 800deb2:	b9ec      	cbnz	r4, 800def0 <strtok+0x4c>
 800deb4:	2050      	movs	r0, #80	@ 0x50
 800deb6:	f000 f93b 	bl	800e130 <malloc>
 800deba:	4602      	mov	r2, r0
 800debc:	6478      	str	r0, [r7, #68]	@ 0x44
 800debe:	b920      	cbnz	r0, 800deca <strtok+0x26>
 800dec0:	4b10      	ldr	r3, [pc, #64]	@ (800df04 <strtok+0x60>)
 800dec2:	4811      	ldr	r0, [pc, #68]	@ (800df08 <strtok+0x64>)
 800dec4:	215b      	movs	r1, #91	@ 0x5b
 800dec6:	f000 f8cb 	bl	800e060 <__assert_func>
 800deca:	e9c0 4400 	strd	r4, r4, [r0]
 800dece:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ded2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ded6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800deda:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800dede:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800dee2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800dee6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800deea:	6184      	str	r4, [r0, #24]
 800deec:	7704      	strb	r4, [r0, #28]
 800deee:	6244      	str	r4, [r0, #36]	@ 0x24
 800def0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800def2:	4631      	mov	r1, r6
 800def4:	4628      	mov	r0, r5
 800def6:	2301      	movs	r3, #1
 800def8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800defc:	f000 b806 	b.w	800df0c <__strtok_r>
 800df00:	20000194 	.word	0x20000194
 800df04:	0800f3b9 	.word	0x0800f3b9
 800df08:	0800f3d0 	.word	0x0800f3d0

0800df0c <__strtok_r>:
 800df0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df0e:	4604      	mov	r4, r0
 800df10:	b908      	cbnz	r0, 800df16 <__strtok_r+0xa>
 800df12:	6814      	ldr	r4, [r2, #0]
 800df14:	b144      	cbz	r4, 800df28 <__strtok_r+0x1c>
 800df16:	4620      	mov	r0, r4
 800df18:	f814 5b01 	ldrb.w	r5, [r4], #1
 800df1c:	460f      	mov	r7, r1
 800df1e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800df22:	b91e      	cbnz	r6, 800df2c <__strtok_r+0x20>
 800df24:	b965      	cbnz	r5, 800df40 <__strtok_r+0x34>
 800df26:	6015      	str	r5, [r2, #0]
 800df28:	2000      	movs	r0, #0
 800df2a:	e005      	b.n	800df38 <__strtok_r+0x2c>
 800df2c:	42b5      	cmp	r5, r6
 800df2e:	d1f6      	bne.n	800df1e <__strtok_r+0x12>
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1f0      	bne.n	800df16 <__strtok_r+0xa>
 800df34:	6014      	str	r4, [r2, #0]
 800df36:	7003      	strb	r3, [r0, #0]
 800df38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df3a:	461c      	mov	r4, r3
 800df3c:	e00c      	b.n	800df58 <__strtok_r+0x4c>
 800df3e:	b915      	cbnz	r5, 800df46 <__strtok_r+0x3a>
 800df40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800df44:	460e      	mov	r6, r1
 800df46:	f816 5b01 	ldrb.w	r5, [r6], #1
 800df4a:	42ab      	cmp	r3, r5
 800df4c:	d1f7      	bne.n	800df3e <__strtok_r+0x32>
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d0f3      	beq.n	800df3a <__strtok_r+0x2e>
 800df52:	2300      	movs	r3, #0
 800df54:	f804 3c01 	strb.w	r3, [r4, #-1]
 800df58:	6014      	str	r4, [r2, #0]
 800df5a:	e7ed      	b.n	800df38 <__strtok_r+0x2c>

0800df5c <_close_r>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4d06      	ldr	r5, [pc, #24]	@ (800df78 <_close_r+0x1c>)
 800df60:	2300      	movs	r3, #0
 800df62:	4604      	mov	r4, r0
 800df64:	4608      	mov	r0, r1
 800df66:	602b      	str	r3, [r5, #0]
 800df68:	f7f3 f830 	bl	8000fcc <_close>
 800df6c:	1c43      	adds	r3, r0, #1
 800df6e:	d102      	bne.n	800df76 <_close_r+0x1a>
 800df70:	682b      	ldr	r3, [r5, #0]
 800df72:	b103      	cbz	r3, 800df76 <_close_r+0x1a>
 800df74:	6023      	str	r3, [r4, #0]
 800df76:	bd38      	pop	{r3, r4, r5, pc}
 800df78:	20002c80 	.word	0x20002c80

0800df7c <_lseek_r>:
 800df7c:	b538      	push	{r3, r4, r5, lr}
 800df7e:	4d07      	ldr	r5, [pc, #28]	@ (800df9c <_lseek_r+0x20>)
 800df80:	4604      	mov	r4, r0
 800df82:	4608      	mov	r0, r1
 800df84:	4611      	mov	r1, r2
 800df86:	2200      	movs	r2, #0
 800df88:	602a      	str	r2, [r5, #0]
 800df8a:	461a      	mov	r2, r3
 800df8c:	f7f3 f845 	bl	800101a <_lseek>
 800df90:	1c43      	adds	r3, r0, #1
 800df92:	d102      	bne.n	800df9a <_lseek_r+0x1e>
 800df94:	682b      	ldr	r3, [r5, #0]
 800df96:	b103      	cbz	r3, 800df9a <_lseek_r+0x1e>
 800df98:	6023      	str	r3, [r4, #0]
 800df9a:	bd38      	pop	{r3, r4, r5, pc}
 800df9c:	20002c80 	.word	0x20002c80

0800dfa0 <_read_r>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	4d07      	ldr	r5, [pc, #28]	@ (800dfc0 <_read_r+0x20>)
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	4608      	mov	r0, r1
 800dfa8:	4611      	mov	r1, r2
 800dfaa:	2200      	movs	r2, #0
 800dfac:	602a      	str	r2, [r5, #0]
 800dfae:	461a      	mov	r2, r3
 800dfb0:	f7f2 ffd3 	bl	8000f5a <_read>
 800dfb4:	1c43      	adds	r3, r0, #1
 800dfb6:	d102      	bne.n	800dfbe <_read_r+0x1e>
 800dfb8:	682b      	ldr	r3, [r5, #0]
 800dfba:	b103      	cbz	r3, 800dfbe <_read_r+0x1e>
 800dfbc:	6023      	str	r3, [r4, #0]
 800dfbe:	bd38      	pop	{r3, r4, r5, pc}
 800dfc0:	20002c80 	.word	0x20002c80

0800dfc4 <_write_r>:
 800dfc4:	b538      	push	{r3, r4, r5, lr}
 800dfc6:	4d07      	ldr	r5, [pc, #28]	@ (800dfe4 <_write_r+0x20>)
 800dfc8:	4604      	mov	r4, r0
 800dfca:	4608      	mov	r0, r1
 800dfcc:	4611      	mov	r1, r2
 800dfce:	2200      	movs	r2, #0
 800dfd0:	602a      	str	r2, [r5, #0]
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	f7f2 ffde 	bl	8000f94 <_write>
 800dfd8:	1c43      	adds	r3, r0, #1
 800dfda:	d102      	bne.n	800dfe2 <_write_r+0x1e>
 800dfdc:	682b      	ldr	r3, [r5, #0]
 800dfde:	b103      	cbz	r3, 800dfe2 <_write_r+0x1e>
 800dfe0:	6023      	str	r3, [r4, #0]
 800dfe2:	bd38      	pop	{r3, r4, r5, pc}
 800dfe4:	20002c80 	.word	0x20002c80

0800dfe8 <__errno>:
 800dfe8:	4b01      	ldr	r3, [pc, #4]	@ (800dff0 <__errno+0x8>)
 800dfea:	6818      	ldr	r0, [r3, #0]
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	20000194 	.word	0x20000194

0800dff4 <__libc_init_array>:
 800dff4:	b570      	push	{r4, r5, r6, lr}
 800dff6:	4d0d      	ldr	r5, [pc, #52]	@ (800e02c <__libc_init_array+0x38>)
 800dff8:	4c0d      	ldr	r4, [pc, #52]	@ (800e030 <__libc_init_array+0x3c>)
 800dffa:	1b64      	subs	r4, r4, r5
 800dffc:	10a4      	asrs	r4, r4, #2
 800dffe:	2600      	movs	r6, #0
 800e000:	42a6      	cmp	r6, r4
 800e002:	d109      	bne.n	800e018 <__libc_init_array+0x24>
 800e004:	4d0b      	ldr	r5, [pc, #44]	@ (800e034 <__libc_init_array+0x40>)
 800e006:	4c0c      	ldr	r4, [pc, #48]	@ (800e038 <__libc_init_array+0x44>)
 800e008:	f000 ff5c 	bl	800eec4 <_init>
 800e00c:	1b64      	subs	r4, r4, r5
 800e00e:	10a4      	asrs	r4, r4, #2
 800e010:	2600      	movs	r6, #0
 800e012:	42a6      	cmp	r6, r4
 800e014:	d105      	bne.n	800e022 <__libc_init_array+0x2e>
 800e016:	bd70      	pop	{r4, r5, r6, pc}
 800e018:	f855 3b04 	ldr.w	r3, [r5], #4
 800e01c:	4798      	blx	r3
 800e01e:	3601      	adds	r6, #1
 800e020:	e7ee      	b.n	800e000 <__libc_init_array+0xc>
 800e022:	f855 3b04 	ldr.w	r3, [r5], #4
 800e026:	4798      	blx	r3
 800e028:	3601      	adds	r6, #1
 800e02a:	e7f2      	b.n	800e012 <__libc_init_array+0x1e>
 800e02c:	0800f4a4 	.word	0x0800f4a4
 800e030:	0800f4a4 	.word	0x0800f4a4
 800e034:	0800f4a4 	.word	0x0800f4a4
 800e038:	0800f4a8 	.word	0x0800f4a8

0800e03c <__retarget_lock_init_recursive>:
 800e03c:	4770      	bx	lr

0800e03e <__retarget_lock_acquire_recursive>:
 800e03e:	4770      	bx	lr

0800e040 <__retarget_lock_release_recursive>:
 800e040:	4770      	bx	lr

0800e042 <memcpy>:
 800e042:	440a      	add	r2, r1
 800e044:	4291      	cmp	r1, r2
 800e046:	f100 33ff 	add.w	r3, r0, #4294967295
 800e04a:	d100      	bne.n	800e04e <memcpy+0xc>
 800e04c:	4770      	bx	lr
 800e04e:	b510      	push	{r4, lr}
 800e050:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e054:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e058:	4291      	cmp	r1, r2
 800e05a:	d1f9      	bne.n	800e050 <memcpy+0xe>
 800e05c:	bd10      	pop	{r4, pc}
	...

0800e060 <__assert_func>:
 800e060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e062:	4614      	mov	r4, r2
 800e064:	461a      	mov	r2, r3
 800e066:	4b09      	ldr	r3, [pc, #36]	@ (800e08c <__assert_func+0x2c>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4605      	mov	r5, r0
 800e06c:	68d8      	ldr	r0, [r3, #12]
 800e06e:	b954      	cbnz	r4, 800e086 <__assert_func+0x26>
 800e070:	4b07      	ldr	r3, [pc, #28]	@ (800e090 <__assert_func+0x30>)
 800e072:	461c      	mov	r4, r3
 800e074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e078:	9100      	str	r1, [sp, #0]
 800e07a:	462b      	mov	r3, r5
 800e07c:	4905      	ldr	r1, [pc, #20]	@ (800e094 <__assert_func+0x34>)
 800e07e:	f000 fc9f 	bl	800e9c0 <fiprintf>
 800e082:	f000 fd5d 	bl	800eb40 <abort>
 800e086:	4b04      	ldr	r3, [pc, #16]	@ (800e098 <__assert_func+0x38>)
 800e088:	e7f4      	b.n	800e074 <__assert_func+0x14>
 800e08a:	bf00      	nop
 800e08c:	20000194 	.word	0x20000194
 800e090:	0800f465 	.word	0x0800f465
 800e094:	0800f437 	.word	0x0800f437
 800e098:	0800f42a 	.word	0x0800f42a

0800e09c <_free_r>:
 800e09c:	b538      	push	{r3, r4, r5, lr}
 800e09e:	4605      	mov	r5, r0
 800e0a0:	2900      	cmp	r1, #0
 800e0a2:	d041      	beq.n	800e128 <_free_r+0x8c>
 800e0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0a8:	1f0c      	subs	r4, r1, #4
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	bfb8      	it	lt
 800e0ae:	18e4      	addlt	r4, r4, r3
 800e0b0:	f000 f8e8 	bl	800e284 <__malloc_lock>
 800e0b4:	4a1d      	ldr	r2, [pc, #116]	@ (800e12c <_free_r+0x90>)
 800e0b6:	6813      	ldr	r3, [r2, #0]
 800e0b8:	b933      	cbnz	r3, 800e0c8 <_free_r+0x2c>
 800e0ba:	6063      	str	r3, [r4, #4]
 800e0bc:	6014      	str	r4, [r2, #0]
 800e0be:	4628      	mov	r0, r5
 800e0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0c4:	f000 b8e4 	b.w	800e290 <__malloc_unlock>
 800e0c8:	42a3      	cmp	r3, r4
 800e0ca:	d908      	bls.n	800e0de <_free_r+0x42>
 800e0cc:	6820      	ldr	r0, [r4, #0]
 800e0ce:	1821      	adds	r1, r4, r0
 800e0d0:	428b      	cmp	r3, r1
 800e0d2:	bf01      	itttt	eq
 800e0d4:	6819      	ldreq	r1, [r3, #0]
 800e0d6:	685b      	ldreq	r3, [r3, #4]
 800e0d8:	1809      	addeq	r1, r1, r0
 800e0da:	6021      	streq	r1, [r4, #0]
 800e0dc:	e7ed      	b.n	800e0ba <_free_r+0x1e>
 800e0de:	461a      	mov	r2, r3
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	b10b      	cbz	r3, 800e0e8 <_free_r+0x4c>
 800e0e4:	42a3      	cmp	r3, r4
 800e0e6:	d9fa      	bls.n	800e0de <_free_r+0x42>
 800e0e8:	6811      	ldr	r1, [r2, #0]
 800e0ea:	1850      	adds	r0, r2, r1
 800e0ec:	42a0      	cmp	r0, r4
 800e0ee:	d10b      	bne.n	800e108 <_free_r+0x6c>
 800e0f0:	6820      	ldr	r0, [r4, #0]
 800e0f2:	4401      	add	r1, r0
 800e0f4:	1850      	adds	r0, r2, r1
 800e0f6:	4283      	cmp	r3, r0
 800e0f8:	6011      	str	r1, [r2, #0]
 800e0fa:	d1e0      	bne.n	800e0be <_free_r+0x22>
 800e0fc:	6818      	ldr	r0, [r3, #0]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	6053      	str	r3, [r2, #4]
 800e102:	4408      	add	r0, r1
 800e104:	6010      	str	r0, [r2, #0]
 800e106:	e7da      	b.n	800e0be <_free_r+0x22>
 800e108:	d902      	bls.n	800e110 <_free_r+0x74>
 800e10a:	230c      	movs	r3, #12
 800e10c:	602b      	str	r3, [r5, #0]
 800e10e:	e7d6      	b.n	800e0be <_free_r+0x22>
 800e110:	6820      	ldr	r0, [r4, #0]
 800e112:	1821      	adds	r1, r4, r0
 800e114:	428b      	cmp	r3, r1
 800e116:	bf04      	itt	eq
 800e118:	6819      	ldreq	r1, [r3, #0]
 800e11a:	685b      	ldreq	r3, [r3, #4]
 800e11c:	6063      	str	r3, [r4, #4]
 800e11e:	bf04      	itt	eq
 800e120:	1809      	addeq	r1, r1, r0
 800e122:	6021      	streq	r1, [r4, #0]
 800e124:	6054      	str	r4, [r2, #4]
 800e126:	e7ca      	b.n	800e0be <_free_r+0x22>
 800e128:	bd38      	pop	{r3, r4, r5, pc}
 800e12a:	bf00      	nop
 800e12c:	20002c8c 	.word	0x20002c8c

0800e130 <malloc>:
 800e130:	4b02      	ldr	r3, [pc, #8]	@ (800e13c <malloc+0xc>)
 800e132:	4601      	mov	r1, r0
 800e134:	6818      	ldr	r0, [r3, #0]
 800e136:	f000 b825 	b.w	800e184 <_malloc_r>
 800e13a:	bf00      	nop
 800e13c:	20000194 	.word	0x20000194

0800e140 <sbrk_aligned>:
 800e140:	b570      	push	{r4, r5, r6, lr}
 800e142:	4e0f      	ldr	r6, [pc, #60]	@ (800e180 <sbrk_aligned+0x40>)
 800e144:	460c      	mov	r4, r1
 800e146:	6831      	ldr	r1, [r6, #0]
 800e148:	4605      	mov	r5, r0
 800e14a:	b911      	cbnz	r1, 800e152 <sbrk_aligned+0x12>
 800e14c:	f000 fce8 	bl	800eb20 <_sbrk_r>
 800e150:	6030      	str	r0, [r6, #0]
 800e152:	4621      	mov	r1, r4
 800e154:	4628      	mov	r0, r5
 800e156:	f000 fce3 	bl	800eb20 <_sbrk_r>
 800e15a:	1c43      	adds	r3, r0, #1
 800e15c:	d103      	bne.n	800e166 <sbrk_aligned+0x26>
 800e15e:	f04f 34ff 	mov.w	r4, #4294967295
 800e162:	4620      	mov	r0, r4
 800e164:	bd70      	pop	{r4, r5, r6, pc}
 800e166:	1cc4      	adds	r4, r0, #3
 800e168:	f024 0403 	bic.w	r4, r4, #3
 800e16c:	42a0      	cmp	r0, r4
 800e16e:	d0f8      	beq.n	800e162 <sbrk_aligned+0x22>
 800e170:	1a21      	subs	r1, r4, r0
 800e172:	4628      	mov	r0, r5
 800e174:	f000 fcd4 	bl	800eb20 <_sbrk_r>
 800e178:	3001      	adds	r0, #1
 800e17a:	d1f2      	bne.n	800e162 <sbrk_aligned+0x22>
 800e17c:	e7ef      	b.n	800e15e <sbrk_aligned+0x1e>
 800e17e:	bf00      	nop
 800e180:	20002c88 	.word	0x20002c88

0800e184 <_malloc_r>:
 800e184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e188:	1ccd      	adds	r5, r1, #3
 800e18a:	f025 0503 	bic.w	r5, r5, #3
 800e18e:	3508      	adds	r5, #8
 800e190:	2d0c      	cmp	r5, #12
 800e192:	bf38      	it	cc
 800e194:	250c      	movcc	r5, #12
 800e196:	2d00      	cmp	r5, #0
 800e198:	4606      	mov	r6, r0
 800e19a:	db01      	blt.n	800e1a0 <_malloc_r+0x1c>
 800e19c:	42a9      	cmp	r1, r5
 800e19e:	d904      	bls.n	800e1aa <_malloc_r+0x26>
 800e1a0:	230c      	movs	r3, #12
 800e1a2:	6033      	str	r3, [r6, #0]
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e280 <_malloc_r+0xfc>
 800e1ae:	f000 f869 	bl	800e284 <__malloc_lock>
 800e1b2:	f8d8 3000 	ldr.w	r3, [r8]
 800e1b6:	461c      	mov	r4, r3
 800e1b8:	bb44      	cbnz	r4, 800e20c <_malloc_r+0x88>
 800e1ba:	4629      	mov	r1, r5
 800e1bc:	4630      	mov	r0, r6
 800e1be:	f7ff ffbf 	bl	800e140 <sbrk_aligned>
 800e1c2:	1c43      	adds	r3, r0, #1
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	d158      	bne.n	800e27a <_malloc_r+0xf6>
 800e1c8:	f8d8 4000 	ldr.w	r4, [r8]
 800e1cc:	4627      	mov	r7, r4
 800e1ce:	2f00      	cmp	r7, #0
 800e1d0:	d143      	bne.n	800e25a <_malloc_r+0xd6>
 800e1d2:	2c00      	cmp	r4, #0
 800e1d4:	d04b      	beq.n	800e26e <_malloc_r+0xea>
 800e1d6:	6823      	ldr	r3, [r4, #0]
 800e1d8:	4639      	mov	r1, r7
 800e1da:	4630      	mov	r0, r6
 800e1dc:	eb04 0903 	add.w	r9, r4, r3
 800e1e0:	f000 fc9e 	bl	800eb20 <_sbrk_r>
 800e1e4:	4581      	cmp	r9, r0
 800e1e6:	d142      	bne.n	800e26e <_malloc_r+0xea>
 800e1e8:	6821      	ldr	r1, [r4, #0]
 800e1ea:	1a6d      	subs	r5, r5, r1
 800e1ec:	4629      	mov	r1, r5
 800e1ee:	4630      	mov	r0, r6
 800e1f0:	f7ff ffa6 	bl	800e140 <sbrk_aligned>
 800e1f4:	3001      	adds	r0, #1
 800e1f6:	d03a      	beq.n	800e26e <_malloc_r+0xea>
 800e1f8:	6823      	ldr	r3, [r4, #0]
 800e1fa:	442b      	add	r3, r5
 800e1fc:	6023      	str	r3, [r4, #0]
 800e1fe:	f8d8 3000 	ldr.w	r3, [r8]
 800e202:	685a      	ldr	r2, [r3, #4]
 800e204:	bb62      	cbnz	r2, 800e260 <_malloc_r+0xdc>
 800e206:	f8c8 7000 	str.w	r7, [r8]
 800e20a:	e00f      	b.n	800e22c <_malloc_r+0xa8>
 800e20c:	6822      	ldr	r2, [r4, #0]
 800e20e:	1b52      	subs	r2, r2, r5
 800e210:	d420      	bmi.n	800e254 <_malloc_r+0xd0>
 800e212:	2a0b      	cmp	r2, #11
 800e214:	d917      	bls.n	800e246 <_malloc_r+0xc2>
 800e216:	1961      	adds	r1, r4, r5
 800e218:	42a3      	cmp	r3, r4
 800e21a:	6025      	str	r5, [r4, #0]
 800e21c:	bf18      	it	ne
 800e21e:	6059      	strne	r1, [r3, #4]
 800e220:	6863      	ldr	r3, [r4, #4]
 800e222:	bf08      	it	eq
 800e224:	f8c8 1000 	streq.w	r1, [r8]
 800e228:	5162      	str	r2, [r4, r5]
 800e22a:	604b      	str	r3, [r1, #4]
 800e22c:	4630      	mov	r0, r6
 800e22e:	f000 f82f 	bl	800e290 <__malloc_unlock>
 800e232:	f104 000b 	add.w	r0, r4, #11
 800e236:	1d23      	adds	r3, r4, #4
 800e238:	f020 0007 	bic.w	r0, r0, #7
 800e23c:	1ac2      	subs	r2, r0, r3
 800e23e:	bf1c      	itt	ne
 800e240:	1a1b      	subne	r3, r3, r0
 800e242:	50a3      	strne	r3, [r4, r2]
 800e244:	e7af      	b.n	800e1a6 <_malloc_r+0x22>
 800e246:	6862      	ldr	r2, [r4, #4]
 800e248:	42a3      	cmp	r3, r4
 800e24a:	bf0c      	ite	eq
 800e24c:	f8c8 2000 	streq.w	r2, [r8]
 800e250:	605a      	strne	r2, [r3, #4]
 800e252:	e7eb      	b.n	800e22c <_malloc_r+0xa8>
 800e254:	4623      	mov	r3, r4
 800e256:	6864      	ldr	r4, [r4, #4]
 800e258:	e7ae      	b.n	800e1b8 <_malloc_r+0x34>
 800e25a:	463c      	mov	r4, r7
 800e25c:	687f      	ldr	r7, [r7, #4]
 800e25e:	e7b6      	b.n	800e1ce <_malloc_r+0x4a>
 800e260:	461a      	mov	r2, r3
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	42a3      	cmp	r3, r4
 800e266:	d1fb      	bne.n	800e260 <_malloc_r+0xdc>
 800e268:	2300      	movs	r3, #0
 800e26a:	6053      	str	r3, [r2, #4]
 800e26c:	e7de      	b.n	800e22c <_malloc_r+0xa8>
 800e26e:	230c      	movs	r3, #12
 800e270:	6033      	str	r3, [r6, #0]
 800e272:	4630      	mov	r0, r6
 800e274:	f000 f80c 	bl	800e290 <__malloc_unlock>
 800e278:	e794      	b.n	800e1a4 <_malloc_r+0x20>
 800e27a:	6005      	str	r5, [r0, #0]
 800e27c:	e7d6      	b.n	800e22c <_malloc_r+0xa8>
 800e27e:	bf00      	nop
 800e280:	20002c8c 	.word	0x20002c8c

0800e284 <__malloc_lock>:
 800e284:	4801      	ldr	r0, [pc, #4]	@ (800e28c <__malloc_lock+0x8>)
 800e286:	f7ff beda 	b.w	800e03e <__retarget_lock_acquire_recursive>
 800e28a:	bf00      	nop
 800e28c:	20002c84 	.word	0x20002c84

0800e290 <__malloc_unlock>:
 800e290:	4801      	ldr	r0, [pc, #4]	@ (800e298 <__malloc_unlock+0x8>)
 800e292:	f7ff bed5 	b.w	800e040 <__retarget_lock_release_recursive>
 800e296:	bf00      	nop
 800e298:	20002c84 	.word	0x20002c84

0800e29c <__ssputs_r>:
 800e29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2a0:	688e      	ldr	r6, [r1, #8]
 800e2a2:	461f      	mov	r7, r3
 800e2a4:	42be      	cmp	r6, r7
 800e2a6:	680b      	ldr	r3, [r1, #0]
 800e2a8:	4682      	mov	sl, r0
 800e2aa:	460c      	mov	r4, r1
 800e2ac:	4690      	mov	r8, r2
 800e2ae:	d82d      	bhi.n	800e30c <__ssputs_r+0x70>
 800e2b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e2b8:	d026      	beq.n	800e308 <__ssputs_r+0x6c>
 800e2ba:	6965      	ldr	r5, [r4, #20]
 800e2bc:	6909      	ldr	r1, [r1, #16]
 800e2be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2c2:	eba3 0901 	sub.w	r9, r3, r1
 800e2c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2ca:	1c7b      	adds	r3, r7, #1
 800e2cc:	444b      	add	r3, r9
 800e2ce:	106d      	asrs	r5, r5, #1
 800e2d0:	429d      	cmp	r5, r3
 800e2d2:	bf38      	it	cc
 800e2d4:	461d      	movcc	r5, r3
 800e2d6:	0553      	lsls	r3, r2, #21
 800e2d8:	d527      	bpl.n	800e32a <__ssputs_r+0x8e>
 800e2da:	4629      	mov	r1, r5
 800e2dc:	f7ff ff52 	bl	800e184 <_malloc_r>
 800e2e0:	4606      	mov	r6, r0
 800e2e2:	b360      	cbz	r0, 800e33e <__ssputs_r+0xa2>
 800e2e4:	6921      	ldr	r1, [r4, #16]
 800e2e6:	464a      	mov	r2, r9
 800e2e8:	f7ff feab 	bl	800e042 <memcpy>
 800e2ec:	89a3      	ldrh	r3, [r4, #12]
 800e2ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e2f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2f6:	81a3      	strh	r3, [r4, #12]
 800e2f8:	6126      	str	r6, [r4, #16]
 800e2fa:	6165      	str	r5, [r4, #20]
 800e2fc:	444e      	add	r6, r9
 800e2fe:	eba5 0509 	sub.w	r5, r5, r9
 800e302:	6026      	str	r6, [r4, #0]
 800e304:	60a5      	str	r5, [r4, #8]
 800e306:	463e      	mov	r6, r7
 800e308:	42be      	cmp	r6, r7
 800e30a:	d900      	bls.n	800e30e <__ssputs_r+0x72>
 800e30c:	463e      	mov	r6, r7
 800e30e:	6820      	ldr	r0, [r4, #0]
 800e310:	4632      	mov	r2, r6
 800e312:	4641      	mov	r1, r8
 800e314:	f000 fbc8 	bl	800eaa8 <memmove>
 800e318:	68a3      	ldr	r3, [r4, #8]
 800e31a:	1b9b      	subs	r3, r3, r6
 800e31c:	60a3      	str	r3, [r4, #8]
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	4433      	add	r3, r6
 800e322:	6023      	str	r3, [r4, #0]
 800e324:	2000      	movs	r0, #0
 800e326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e32a:	462a      	mov	r2, r5
 800e32c:	f000 fc0f 	bl	800eb4e <_realloc_r>
 800e330:	4606      	mov	r6, r0
 800e332:	2800      	cmp	r0, #0
 800e334:	d1e0      	bne.n	800e2f8 <__ssputs_r+0x5c>
 800e336:	6921      	ldr	r1, [r4, #16]
 800e338:	4650      	mov	r0, sl
 800e33a:	f7ff feaf 	bl	800e09c <_free_r>
 800e33e:	230c      	movs	r3, #12
 800e340:	f8ca 3000 	str.w	r3, [sl]
 800e344:	89a3      	ldrh	r3, [r4, #12]
 800e346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e34a:	81a3      	strh	r3, [r4, #12]
 800e34c:	f04f 30ff 	mov.w	r0, #4294967295
 800e350:	e7e9      	b.n	800e326 <__ssputs_r+0x8a>
	...

0800e354 <_svfiprintf_r>:
 800e354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e358:	4698      	mov	r8, r3
 800e35a:	898b      	ldrh	r3, [r1, #12]
 800e35c:	061b      	lsls	r3, r3, #24
 800e35e:	b09d      	sub	sp, #116	@ 0x74
 800e360:	4607      	mov	r7, r0
 800e362:	460d      	mov	r5, r1
 800e364:	4614      	mov	r4, r2
 800e366:	d510      	bpl.n	800e38a <_svfiprintf_r+0x36>
 800e368:	690b      	ldr	r3, [r1, #16]
 800e36a:	b973      	cbnz	r3, 800e38a <_svfiprintf_r+0x36>
 800e36c:	2140      	movs	r1, #64	@ 0x40
 800e36e:	f7ff ff09 	bl	800e184 <_malloc_r>
 800e372:	6028      	str	r0, [r5, #0]
 800e374:	6128      	str	r0, [r5, #16]
 800e376:	b930      	cbnz	r0, 800e386 <_svfiprintf_r+0x32>
 800e378:	230c      	movs	r3, #12
 800e37a:	603b      	str	r3, [r7, #0]
 800e37c:	f04f 30ff 	mov.w	r0, #4294967295
 800e380:	b01d      	add	sp, #116	@ 0x74
 800e382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e386:	2340      	movs	r3, #64	@ 0x40
 800e388:	616b      	str	r3, [r5, #20]
 800e38a:	2300      	movs	r3, #0
 800e38c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e38e:	2320      	movs	r3, #32
 800e390:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e394:	f8cd 800c 	str.w	r8, [sp, #12]
 800e398:	2330      	movs	r3, #48	@ 0x30
 800e39a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e538 <_svfiprintf_r+0x1e4>
 800e39e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3a2:	f04f 0901 	mov.w	r9, #1
 800e3a6:	4623      	mov	r3, r4
 800e3a8:	469a      	mov	sl, r3
 800e3aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3ae:	b10a      	cbz	r2, 800e3b4 <_svfiprintf_r+0x60>
 800e3b0:	2a25      	cmp	r2, #37	@ 0x25
 800e3b2:	d1f9      	bne.n	800e3a8 <_svfiprintf_r+0x54>
 800e3b4:	ebba 0b04 	subs.w	fp, sl, r4
 800e3b8:	d00b      	beq.n	800e3d2 <_svfiprintf_r+0x7e>
 800e3ba:	465b      	mov	r3, fp
 800e3bc:	4622      	mov	r2, r4
 800e3be:	4629      	mov	r1, r5
 800e3c0:	4638      	mov	r0, r7
 800e3c2:	f7ff ff6b 	bl	800e29c <__ssputs_r>
 800e3c6:	3001      	adds	r0, #1
 800e3c8:	f000 80a7 	beq.w	800e51a <_svfiprintf_r+0x1c6>
 800e3cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3ce:	445a      	add	r2, fp
 800e3d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3d2:	f89a 3000 	ldrb.w	r3, [sl]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	f000 809f 	beq.w	800e51a <_svfiprintf_r+0x1c6>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	f04f 32ff 	mov.w	r2, #4294967295
 800e3e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3e6:	f10a 0a01 	add.w	sl, sl, #1
 800e3ea:	9304      	str	r3, [sp, #16]
 800e3ec:	9307      	str	r3, [sp, #28]
 800e3ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e3f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e3f4:	4654      	mov	r4, sl
 800e3f6:	2205      	movs	r2, #5
 800e3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3fc:	484e      	ldr	r0, [pc, #312]	@ (800e538 <_svfiprintf_r+0x1e4>)
 800e3fe:	f7f1 ff17 	bl	8000230 <memchr>
 800e402:	9a04      	ldr	r2, [sp, #16]
 800e404:	b9d8      	cbnz	r0, 800e43e <_svfiprintf_r+0xea>
 800e406:	06d0      	lsls	r0, r2, #27
 800e408:	bf44      	itt	mi
 800e40a:	2320      	movmi	r3, #32
 800e40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e410:	0711      	lsls	r1, r2, #28
 800e412:	bf44      	itt	mi
 800e414:	232b      	movmi	r3, #43	@ 0x2b
 800e416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e41a:	f89a 3000 	ldrb.w	r3, [sl]
 800e41e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e420:	d015      	beq.n	800e44e <_svfiprintf_r+0xfa>
 800e422:	9a07      	ldr	r2, [sp, #28]
 800e424:	4654      	mov	r4, sl
 800e426:	2000      	movs	r0, #0
 800e428:	f04f 0c0a 	mov.w	ip, #10
 800e42c:	4621      	mov	r1, r4
 800e42e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e432:	3b30      	subs	r3, #48	@ 0x30
 800e434:	2b09      	cmp	r3, #9
 800e436:	d94b      	bls.n	800e4d0 <_svfiprintf_r+0x17c>
 800e438:	b1b0      	cbz	r0, 800e468 <_svfiprintf_r+0x114>
 800e43a:	9207      	str	r2, [sp, #28]
 800e43c:	e014      	b.n	800e468 <_svfiprintf_r+0x114>
 800e43e:	eba0 0308 	sub.w	r3, r0, r8
 800e442:	fa09 f303 	lsl.w	r3, r9, r3
 800e446:	4313      	orrs	r3, r2
 800e448:	9304      	str	r3, [sp, #16]
 800e44a:	46a2      	mov	sl, r4
 800e44c:	e7d2      	b.n	800e3f4 <_svfiprintf_r+0xa0>
 800e44e:	9b03      	ldr	r3, [sp, #12]
 800e450:	1d19      	adds	r1, r3, #4
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	9103      	str	r1, [sp, #12]
 800e456:	2b00      	cmp	r3, #0
 800e458:	bfbb      	ittet	lt
 800e45a:	425b      	neglt	r3, r3
 800e45c:	f042 0202 	orrlt.w	r2, r2, #2
 800e460:	9307      	strge	r3, [sp, #28]
 800e462:	9307      	strlt	r3, [sp, #28]
 800e464:	bfb8      	it	lt
 800e466:	9204      	strlt	r2, [sp, #16]
 800e468:	7823      	ldrb	r3, [r4, #0]
 800e46a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e46c:	d10a      	bne.n	800e484 <_svfiprintf_r+0x130>
 800e46e:	7863      	ldrb	r3, [r4, #1]
 800e470:	2b2a      	cmp	r3, #42	@ 0x2a
 800e472:	d132      	bne.n	800e4da <_svfiprintf_r+0x186>
 800e474:	9b03      	ldr	r3, [sp, #12]
 800e476:	1d1a      	adds	r2, r3, #4
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	9203      	str	r2, [sp, #12]
 800e47c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e480:	3402      	adds	r4, #2
 800e482:	9305      	str	r3, [sp, #20]
 800e484:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e548 <_svfiprintf_r+0x1f4>
 800e488:	7821      	ldrb	r1, [r4, #0]
 800e48a:	2203      	movs	r2, #3
 800e48c:	4650      	mov	r0, sl
 800e48e:	f7f1 fecf 	bl	8000230 <memchr>
 800e492:	b138      	cbz	r0, 800e4a4 <_svfiprintf_r+0x150>
 800e494:	9b04      	ldr	r3, [sp, #16]
 800e496:	eba0 000a 	sub.w	r0, r0, sl
 800e49a:	2240      	movs	r2, #64	@ 0x40
 800e49c:	4082      	lsls	r2, r0
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	3401      	adds	r4, #1
 800e4a2:	9304      	str	r3, [sp, #16]
 800e4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a8:	4824      	ldr	r0, [pc, #144]	@ (800e53c <_svfiprintf_r+0x1e8>)
 800e4aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4ae:	2206      	movs	r2, #6
 800e4b0:	f7f1 febe 	bl	8000230 <memchr>
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d036      	beq.n	800e526 <_svfiprintf_r+0x1d2>
 800e4b8:	4b21      	ldr	r3, [pc, #132]	@ (800e540 <_svfiprintf_r+0x1ec>)
 800e4ba:	bb1b      	cbnz	r3, 800e504 <_svfiprintf_r+0x1b0>
 800e4bc:	9b03      	ldr	r3, [sp, #12]
 800e4be:	3307      	adds	r3, #7
 800e4c0:	f023 0307 	bic.w	r3, r3, #7
 800e4c4:	3308      	adds	r3, #8
 800e4c6:	9303      	str	r3, [sp, #12]
 800e4c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ca:	4433      	add	r3, r6
 800e4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4ce:	e76a      	b.n	800e3a6 <_svfiprintf_r+0x52>
 800e4d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4d4:	460c      	mov	r4, r1
 800e4d6:	2001      	movs	r0, #1
 800e4d8:	e7a8      	b.n	800e42c <_svfiprintf_r+0xd8>
 800e4da:	2300      	movs	r3, #0
 800e4dc:	3401      	adds	r4, #1
 800e4de:	9305      	str	r3, [sp, #20]
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	f04f 0c0a 	mov.w	ip, #10
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4ec:	3a30      	subs	r2, #48	@ 0x30
 800e4ee:	2a09      	cmp	r2, #9
 800e4f0:	d903      	bls.n	800e4fa <_svfiprintf_r+0x1a6>
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d0c6      	beq.n	800e484 <_svfiprintf_r+0x130>
 800e4f6:	9105      	str	r1, [sp, #20]
 800e4f8:	e7c4      	b.n	800e484 <_svfiprintf_r+0x130>
 800e4fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4fe:	4604      	mov	r4, r0
 800e500:	2301      	movs	r3, #1
 800e502:	e7f0      	b.n	800e4e6 <_svfiprintf_r+0x192>
 800e504:	ab03      	add	r3, sp, #12
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	462a      	mov	r2, r5
 800e50a:	4b0e      	ldr	r3, [pc, #56]	@ (800e544 <_svfiprintf_r+0x1f0>)
 800e50c:	a904      	add	r1, sp, #16
 800e50e:	4638      	mov	r0, r7
 800e510:	f3af 8000 	nop.w
 800e514:	1c42      	adds	r2, r0, #1
 800e516:	4606      	mov	r6, r0
 800e518:	d1d6      	bne.n	800e4c8 <_svfiprintf_r+0x174>
 800e51a:	89ab      	ldrh	r3, [r5, #12]
 800e51c:	065b      	lsls	r3, r3, #25
 800e51e:	f53f af2d 	bmi.w	800e37c <_svfiprintf_r+0x28>
 800e522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e524:	e72c      	b.n	800e380 <_svfiprintf_r+0x2c>
 800e526:	ab03      	add	r3, sp, #12
 800e528:	9300      	str	r3, [sp, #0]
 800e52a:	462a      	mov	r2, r5
 800e52c:	4b05      	ldr	r3, [pc, #20]	@ (800e544 <_svfiprintf_r+0x1f0>)
 800e52e:	a904      	add	r1, sp, #16
 800e530:	4638      	mov	r0, r7
 800e532:	f000 f879 	bl	800e628 <_printf_i>
 800e536:	e7ed      	b.n	800e514 <_svfiprintf_r+0x1c0>
 800e538:	0800f466 	.word	0x0800f466
 800e53c:	0800f470 	.word	0x0800f470
 800e540:	00000000 	.word	0x00000000
 800e544:	0800e29d 	.word	0x0800e29d
 800e548:	0800f46c 	.word	0x0800f46c

0800e54c <_printf_common>:
 800e54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e550:	4616      	mov	r6, r2
 800e552:	4698      	mov	r8, r3
 800e554:	688a      	ldr	r2, [r1, #8]
 800e556:	690b      	ldr	r3, [r1, #16]
 800e558:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e55c:	4293      	cmp	r3, r2
 800e55e:	bfb8      	it	lt
 800e560:	4613      	movlt	r3, r2
 800e562:	6033      	str	r3, [r6, #0]
 800e564:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e568:	4607      	mov	r7, r0
 800e56a:	460c      	mov	r4, r1
 800e56c:	b10a      	cbz	r2, 800e572 <_printf_common+0x26>
 800e56e:	3301      	adds	r3, #1
 800e570:	6033      	str	r3, [r6, #0]
 800e572:	6823      	ldr	r3, [r4, #0]
 800e574:	0699      	lsls	r1, r3, #26
 800e576:	bf42      	ittt	mi
 800e578:	6833      	ldrmi	r3, [r6, #0]
 800e57a:	3302      	addmi	r3, #2
 800e57c:	6033      	strmi	r3, [r6, #0]
 800e57e:	6825      	ldr	r5, [r4, #0]
 800e580:	f015 0506 	ands.w	r5, r5, #6
 800e584:	d106      	bne.n	800e594 <_printf_common+0x48>
 800e586:	f104 0a19 	add.w	sl, r4, #25
 800e58a:	68e3      	ldr	r3, [r4, #12]
 800e58c:	6832      	ldr	r2, [r6, #0]
 800e58e:	1a9b      	subs	r3, r3, r2
 800e590:	42ab      	cmp	r3, r5
 800e592:	dc26      	bgt.n	800e5e2 <_printf_common+0x96>
 800e594:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e598:	6822      	ldr	r2, [r4, #0]
 800e59a:	3b00      	subs	r3, #0
 800e59c:	bf18      	it	ne
 800e59e:	2301      	movne	r3, #1
 800e5a0:	0692      	lsls	r2, r2, #26
 800e5a2:	d42b      	bmi.n	800e5fc <_printf_common+0xb0>
 800e5a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e5a8:	4641      	mov	r1, r8
 800e5aa:	4638      	mov	r0, r7
 800e5ac:	47c8      	blx	r9
 800e5ae:	3001      	adds	r0, #1
 800e5b0:	d01e      	beq.n	800e5f0 <_printf_common+0xa4>
 800e5b2:	6823      	ldr	r3, [r4, #0]
 800e5b4:	6922      	ldr	r2, [r4, #16]
 800e5b6:	f003 0306 	and.w	r3, r3, #6
 800e5ba:	2b04      	cmp	r3, #4
 800e5bc:	bf02      	ittt	eq
 800e5be:	68e5      	ldreq	r5, [r4, #12]
 800e5c0:	6833      	ldreq	r3, [r6, #0]
 800e5c2:	1aed      	subeq	r5, r5, r3
 800e5c4:	68a3      	ldr	r3, [r4, #8]
 800e5c6:	bf0c      	ite	eq
 800e5c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5cc:	2500      	movne	r5, #0
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	bfc4      	itt	gt
 800e5d2:	1a9b      	subgt	r3, r3, r2
 800e5d4:	18ed      	addgt	r5, r5, r3
 800e5d6:	2600      	movs	r6, #0
 800e5d8:	341a      	adds	r4, #26
 800e5da:	42b5      	cmp	r5, r6
 800e5dc:	d11a      	bne.n	800e614 <_printf_common+0xc8>
 800e5de:	2000      	movs	r0, #0
 800e5e0:	e008      	b.n	800e5f4 <_printf_common+0xa8>
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	4652      	mov	r2, sl
 800e5e6:	4641      	mov	r1, r8
 800e5e8:	4638      	mov	r0, r7
 800e5ea:	47c8      	blx	r9
 800e5ec:	3001      	adds	r0, #1
 800e5ee:	d103      	bne.n	800e5f8 <_printf_common+0xac>
 800e5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5f8:	3501      	adds	r5, #1
 800e5fa:	e7c6      	b.n	800e58a <_printf_common+0x3e>
 800e5fc:	18e1      	adds	r1, r4, r3
 800e5fe:	1c5a      	adds	r2, r3, #1
 800e600:	2030      	movs	r0, #48	@ 0x30
 800e602:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e606:	4422      	add	r2, r4
 800e608:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e60c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e610:	3302      	adds	r3, #2
 800e612:	e7c7      	b.n	800e5a4 <_printf_common+0x58>
 800e614:	2301      	movs	r3, #1
 800e616:	4622      	mov	r2, r4
 800e618:	4641      	mov	r1, r8
 800e61a:	4638      	mov	r0, r7
 800e61c:	47c8      	blx	r9
 800e61e:	3001      	adds	r0, #1
 800e620:	d0e6      	beq.n	800e5f0 <_printf_common+0xa4>
 800e622:	3601      	adds	r6, #1
 800e624:	e7d9      	b.n	800e5da <_printf_common+0x8e>
	...

0800e628 <_printf_i>:
 800e628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e62c:	7e0f      	ldrb	r7, [r1, #24]
 800e62e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e630:	2f78      	cmp	r7, #120	@ 0x78
 800e632:	4691      	mov	r9, r2
 800e634:	4680      	mov	r8, r0
 800e636:	460c      	mov	r4, r1
 800e638:	469a      	mov	sl, r3
 800e63a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e63e:	d807      	bhi.n	800e650 <_printf_i+0x28>
 800e640:	2f62      	cmp	r7, #98	@ 0x62
 800e642:	d80a      	bhi.n	800e65a <_printf_i+0x32>
 800e644:	2f00      	cmp	r7, #0
 800e646:	f000 80d2 	beq.w	800e7ee <_printf_i+0x1c6>
 800e64a:	2f58      	cmp	r7, #88	@ 0x58
 800e64c:	f000 80b9 	beq.w	800e7c2 <_printf_i+0x19a>
 800e650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e654:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e658:	e03a      	b.n	800e6d0 <_printf_i+0xa8>
 800e65a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e65e:	2b15      	cmp	r3, #21
 800e660:	d8f6      	bhi.n	800e650 <_printf_i+0x28>
 800e662:	a101      	add	r1, pc, #4	@ (adr r1, 800e668 <_printf_i+0x40>)
 800e664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e668:	0800e6c1 	.word	0x0800e6c1
 800e66c:	0800e6d5 	.word	0x0800e6d5
 800e670:	0800e651 	.word	0x0800e651
 800e674:	0800e651 	.word	0x0800e651
 800e678:	0800e651 	.word	0x0800e651
 800e67c:	0800e651 	.word	0x0800e651
 800e680:	0800e6d5 	.word	0x0800e6d5
 800e684:	0800e651 	.word	0x0800e651
 800e688:	0800e651 	.word	0x0800e651
 800e68c:	0800e651 	.word	0x0800e651
 800e690:	0800e651 	.word	0x0800e651
 800e694:	0800e7d5 	.word	0x0800e7d5
 800e698:	0800e6ff 	.word	0x0800e6ff
 800e69c:	0800e78f 	.word	0x0800e78f
 800e6a0:	0800e651 	.word	0x0800e651
 800e6a4:	0800e651 	.word	0x0800e651
 800e6a8:	0800e7f7 	.word	0x0800e7f7
 800e6ac:	0800e651 	.word	0x0800e651
 800e6b0:	0800e6ff 	.word	0x0800e6ff
 800e6b4:	0800e651 	.word	0x0800e651
 800e6b8:	0800e651 	.word	0x0800e651
 800e6bc:	0800e797 	.word	0x0800e797
 800e6c0:	6833      	ldr	r3, [r6, #0]
 800e6c2:	1d1a      	adds	r2, r3, #4
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	6032      	str	r2, [r6, #0]
 800e6c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	e09d      	b.n	800e810 <_printf_i+0x1e8>
 800e6d4:	6833      	ldr	r3, [r6, #0]
 800e6d6:	6820      	ldr	r0, [r4, #0]
 800e6d8:	1d19      	adds	r1, r3, #4
 800e6da:	6031      	str	r1, [r6, #0]
 800e6dc:	0606      	lsls	r6, r0, #24
 800e6de:	d501      	bpl.n	800e6e4 <_printf_i+0xbc>
 800e6e0:	681d      	ldr	r5, [r3, #0]
 800e6e2:	e003      	b.n	800e6ec <_printf_i+0xc4>
 800e6e4:	0645      	lsls	r5, r0, #25
 800e6e6:	d5fb      	bpl.n	800e6e0 <_printf_i+0xb8>
 800e6e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e6ec:	2d00      	cmp	r5, #0
 800e6ee:	da03      	bge.n	800e6f8 <_printf_i+0xd0>
 800e6f0:	232d      	movs	r3, #45	@ 0x2d
 800e6f2:	426d      	negs	r5, r5
 800e6f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6f8:	4859      	ldr	r0, [pc, #356]	@ (800e860 <_printf_i+0x238>)
 800e6fa:	230a      	movs	r3, #10
 800e6fc:	e011      	b.n	800e722 <_printf_i+0xfa>
 800e6fe:	6821      	ldr	r1, [r4, #0]
 800e700:	6833      	ldr	r3, [r6, #0]
 800e702:	0608      	lsls	r0, r1, #24
 800e704:	f853 5b04 	ldr.w	r5, [r3], #4
 800e708:	d402      	bmi.n	800e710 <_printf_i+0xe8>
 800e70a:	0649      	lsls	r1, r1, #25
 800e70c:	bf48      	it	mi
 800e70e:	b2ad      	uxthmi	r5, r5
 800e710:	2f6f      	cmp	r7, #111	@ 0x6f
 800e712:	4853      	ldr	r0, [pc, #332]	@ (800e860 <_printf_i+0x238>)
 800e714:	6033      	str	r3, [r6, #0]
 800e716:	bf14      	ite	ne
 800e718:	230a      	movne	r3, #10
 800e71a:	2308      	moveq	r3, #8
 800e71c:	2100      	movs	r1, #0
 800e71e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e722:	6866      	ldr	r6, [r4, #4]
 800e724:	60a6      	str	r6, [r4, #8]
 800e726:	2e00      	cmp	r6, #0
 800e728:	bfa2      	ittt	ge
 800e72a:	6821      	ldrge	r1, [r4, #0]
 800e72c:	f021 0104 	bicge.w	r1, r1, #4
 800e730:	6021      	strge	r1, [r4, #0]
 800e732:	b90d      	cbnz	r5, 800e738 <_printf_i+0x110>
 800e734:	2e00      	cmp	r6, #0
 800e736:	d04b      	beq.n	800e7d0 <_printf_i+0x1a8>
 800e738:	4616      	mov	r6, r2
 800e73a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e73e:	fb03 5711 	mls	r7, r3, r1, r5
 800e742:	5dc7      	ldrb	r7, [r0, r7]
 800e744:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e748:	462f      	mov	r7, r5
 800e74a:	42bb      	cmp	r3, r7
 800e74c:	460d      	mov	r5, r1
 800e74e:	d9f4      	bls.n	800e73a <_printf_i+0x112>
 800e750:	2b08      	cmp	r3, #8
 800e752:	d10b      	bne.n	800e76c <_printf_i+0x144>
 800e754:	6823      	ldr	r3, [r4, #0]
 800e756:	07df      	lsls	r7, r3, #31
 800e758:	d508      	bpl.n	800e76c <_printf_i+0x144>
 800e75a:	6923      	ldr	r3, [r4, #16]
 800e75c:	6861      	ldr	r1, [r4, #4]
 800e75e:	4299      	cmp	r1, r3
 800e760:	bfde      	ittt	le
 800e762:	2330      	movle	r3, #48	@ 0x30
 800e764:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e768:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e76c:	1b92      	subs	r2, r2, r6
 800e76e:	6122      	str	r2, [r4, #16]
 800e770:	f8cd a000 	str.w	sl, [sp]
 800e774:	464b      	mov	r3, r9
 800e776:	aa03      	add	r2, sp, #12
 800e778:	4621      	mov	r1, r4
 800e77a:	4640      	mov	r0, r8
 800e77c:	f7ff fee6 	bl	800e54c <_printf_common>
 800e780:	3001      	adds	r0, #1
 800e782:	d14a      	bne.n	800e81a <_printf_i+0x1f2>
 800e784:	f04f 30ff 	mov.w	r0, #4294967295
 800e788:	b004      	add	sp, #16
 800e78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e78e:	6823      	ldr	r3, [r4, #0]
 800e790:	f043 0320 	orr.w	r3, r3, #32
 800e794:	6023      	str	r3, [r4, #0]
 800e796:	4833      	ldr	r0, [pc, #204]	@ (800e864 <_printf_i+0x23c>)
 800e798:	2778      	movs	r7, #120	@ 0x78
 800e79a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e79e:	6823      	ldr	r3, [r4, #0]
 800e7a0:	6831      	ldr	r1, [r6, #0]
 800e7a2:	061f      	lsls	r7, r3, #24
 800e7a4:	f851 5b04 	ldr.w	r5, [r1], #4
 800e7a8:	d402      	bmi.n	800e7b0 <_printf_i+0x188>
 800e7aa:	065f      	lsls	r7, r3, #25
 800e7ac:	bf48      	it	mi
 800e7ae:	b2ad      	uxthmi	r5, r5
 800e7b0:	6031      	str	r1, [r6, #0]
 800e7b2:	07d9      	lsls	r1, r3, #31
 800e7b4:	bf44      	itt	mi
 800e7b6:	f043 0320 	orrmi.w	r3, r3, #32
 800e7ba:	6023      	strmi	r3, [r4, #0]
 800e7bc:	b11d      	cbz	r5, 800e7c6 <_printf_i+0x19e>
 800e7be:	2310      	movs	r3, #16
 800e7c0:	e7ac      	b.n	800e71c <_printf_i+0xf4>
 800e7c2:	4827      	ldr	r0, [pc, #156]	@ (800e860 <_printf_i+0x238>)
 800e7c4:	e7e9      	b.n	800e79a <_printf_i+0x172>
 800e7c6:	6823      	ldr	r3, [r4, #0]
 800e7c8:	f023 0320 	bic.w	r3, r3, #32
 800e7cc:	6023      	str	r3, [r4, #0]
 800e7ce:	e7f6      	b.n	800e7be <_printf_i+0x196>
 800e7d0:	4616      	mov	r6, r2
 800e7d2:	e7bd      	b.n	800e750 <_printf_i+0x128>
 800e7d4:	6833      	ldr	r3, [r6, #0]
 800e7d6:	6825      	ldr	r5, [r4, #0]
 800e7d8:	6961      	ldr	r1, [r4, #20]
 800e7da:	1d18      	adds	r0, r3, #4
 800e7dc:	6030      	str	r0, [r6, #0]
 800e7de:	062e      	lsls	r6, r5, #24
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	d501      	bpl.n	800e7e8 <_printf_i+0x1c0>
 800e7e4:	6019      	str	r1, [r3, #0]
 800e7e6:	e002      	b.n	800e7ee <_printf_i+0x1c6>
 800e7e8:	0668      	lsls	r0, r5, #25
 800e7ea:	d5fb      	bpl.n	800e7e4 <_printf_i+0x1bc>
 800e7ec:	8019      	strh	r1, [r3, #0]
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	6123      	str	r3, [r4, #16]
 800e7f2:	4616      	mov	r6, r2
 800e7f4:	e7bc      	b.n	800e770 <_printf_i+0x148>
 800e7f6:	6833      	ldr	r3, [r6, #0]
 800e7f8:	1d1a      	adds	r2, r3, #4
 800e7fa:	6032      	str	r2, [r6, #0]
 800e7fc:	681e      	ldr	r6, [r3, #0]
 800e7fe:	6862      	ldr	r2, [r4, #4]
 800e800:	2100      	movs	r1, #0
 800e802:	4630      	mov	r0, r6
 800e804:	f7f1 fd14 	bl	8000230 <memchr>
 800e808:	b108      	cbz	r0, 800e80e <_printf_i+0x1e6>
 800e80a:	1b80      	subs	r0, r0, r6
 800e80c:	6060      	str	r0, [r4, #4]
 800e80e:	6863      	ldr	r3, [r4, #4]
 800e810:	6123      	str	r3, [r4, #16]
 800e812:	2300      	movs	r3, #0
 800e814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e818:	e7aa      	b.n	800e770 <_printf_i+0x148>
 800e81a:	6923      	ldr	r3, [r4, #16]
 800e81c:	4632      	mov	r2, r6
 800e81e:	4649      	mov	r1, r9
 800e820:	4640      	mov	r0, r8
 800e822:	47d0      	blx	sl
 800e824:	3001      	adds	r0, #1
 800e826:	d0ad      	beq.n	800e784 <_printf_i+0x15c>
 800e828:	6823      	ldr	r3, [r4, #0]
 800e82a:	079b      	lsls	r3, r3, #30
 800e82c:	d413      	bmi.n	800e856 <_printf_i+0x22e>
 800e82e:	68e0      	ldr	r0, [r4, #12]
 800e830:	9b03      	ldr	r3, [sp, #12]
 800e832:	4298      	cmp	r0, r3
 800e834:	bfb8      	it	lt
 800e836:	4618      	movlt	r0, r3
 800e838:	e7a6      	b.n	800e788 <_printf_i+0x160>
 800e83a:	2301      	movs	r3, #1
 800e83c:	4632      	mov	r2, r6
 800e83e:	4649      	mov	r1, r9
 800e840:	4640      	mov	r0, r8
 800e842:	47d0      	blx	sl
 800e844:	3001      	adds	r0, #1
 800e846:	d09d      	beq.n	800e784 <_printf_i+0x15c>
 800e848:	3501      	adds	r5, #1
 800e84a:	68e3      	ldr	r3, [r4, #12]
 800e84c:	9903      	ldr	r1, [sp, #12]
 800e84e:	1a5b      	subs	r3, r3, r1
 800e850:	42ab      	cmp	r3, r5
 800e852:	dcf2      	bgt.n	800e83a <_printf_i+0x212>
 800e854:	e7eb      	b.n	800e82e <_printf_i+0x206>
 800e856:	2500      	movs	r5, #0
 800e858:	f104 0619 	add.w	r6, r4, #25
 800e85c:	e7f5      	b.n	800e84a <_printf_i+0x222>
 800e85e:	bf00      	nop
 800e860:	0800f477 	.word	0x0800f477
 800e864:	0800f488 	.word	0x0800f488

0800e868 <__sflush_r>:
 800e868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e870:	0716      	lsls	r6, r2, #28
 800e872:	4605      	mov	r5, r0
 800e874:	460c      	mov	r4, r1
 800e876:	d454      	bmi.n	800e922 <__sflush_r+0xba>
 800e878:	684b      	ldr	r3, [r1, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	dc02      	bgt.n	800e884 <__sflush_r+0x1c>
 800e87e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e880:	2b00      	cmp	r3, #0
 800e882:	dd48      	ble.n	800e916 <__sflush_r+0xae>
 800e884:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e886:	2e00      	cmp	r6, #0
 800e888:	d045      	beq.n	800e916 <__sflush_r+0xae>
 800e88a:	2300      	movs	r3, #0
 800e88c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e890:	682f      	ldr	r7, [r5, #0]
 800e892:	6a21      	ldr	r1, [r4, #32]
 800e894:	602b      	str	r3, [r5, #0]
 800e896:	d030      	beq.n	800e8fa <__sflush_r+0x92>
 800e898:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e89a:	89a3      	ldrh	r3, [r4, #12]
 800e89c:	0759      	lsls	r1, r3, #29
 800e89e:	d505      	bpl.n	800e8ac <__sflush_r+0x44>
 800e8a0:	6863      	ldr	r3, [r4, #4]
 800e8a2:	1ad2      	subs	r2, r2, r3
 800e8a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e8a6:	b10b      	cbz	r3, 800e8ac <__sflush_r+0x44>
 800e8a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e8aa:	1ad2      	subs	r2, r2, r3
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e8b0:	6a21      	ldr	r1, [r4, #32]
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	47b0      	blx	r6
 800e8b6:	1c43      	adds	r3, r0, #1
 800e8b8:	89a3      	ldrh	r3, [r4, #12]
 800e8ba:	d106      	bne.n	800e8ca <__sflush_r+0x62>
 800e8bc:	6829      	ldr	r1, [r5, #0]
 800e8be:	291d      	cmp	r1, #29
 800e8c0:	d82b      	bhi.n	800e91a <__sflush_r+0xb2>
 800e8c2:	4a2a      	ldr	r2, [pc, #168]	@ (800e96c <__sflush_r+0x104>)
 800e8c4:	410a      	asrs	r2, r1
 800e8c6:	07d6      	lsls	r6, r2, #31
 800e8c8:	d427      	bmi.n	800e91a <__sflush_r+0xb2>
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	6062      	str	r2, [r4, #4]
 800e8ce:	04d9      	lsls	r1, r3, #19
 800e8d0:	6922      	ldr	r2, [r4, #16]
 800e8d2:	6022      	str	r2, [r4, #0]
 800e8d4:	d504      	bpl.n	800e8e0 <__sflush_r+0x78>
 800e8d6:	1c42      	adds	r2, r0, #1
 800e8d8:	d101      	bne.n	800e8de <__sflush_r+0x76>
 800e8da:	682b      	ldr	r3, [r5, #0]
 800e8dc:	b903      	cbnz	r3, 800e8e0 <__sflush_r+0x78>
 800e8de:	6560      	str	r0, [r4, #84]	@ 0x54
 800e8e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e8e2:	602f      	str	r7, [r5, #0]
 800e8e4:	b1b9      	cbz	r1, 800e916 <__sflush_r+0xae>
 800e8e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e8ea:	4299      	cmp	r1, r3
 800e8ec:	d002      	beq.n	800e8f4 <__sflush_r+0x8c>
 800e8ee:	4628      	mov	r0, r5
 800e8f0:	f7ff fbd4 	bl	800e09c <_free_r>
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800e8f8:	e00d      	b.n	800e916 <__sflush_r+0xae>
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	47b0      	blx	r6
 800e900:	4602      	mov	r2, r0
 800e902:	1c50      	adds	r0, r2, #1
 800e904:	d1c9      	bne.n	800e89a <__sflush_r+0x32>
 800e906:	682b      	ldr	r3, [r5, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d0c6      	beq.n	800e89a <__sflush_r+0x32>
 800e90c:	2b1d      	cmp	r3, #29
 800e90e:	d001      	beq.n	800e914 <__sflush_r+0xac>
 800e910:	2b16      	cmp	r3, #22
 800e912:	d11e      	bne.n	800e952 <__sflush_r+0xea>
 800e914:	602f      	str	r7, [r5, #0]
 800e916:	2000      	movs	r0, #0
 800e918:	e022      	b.n	800e960 <__sflush_r+0xf8>
 800e91a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e91e:	b21b      	sxth	r3, r3
 800e920:	e01b      	b.n	800e95a <__sflush_r+0xf2>
 800e922:	690f      	ldr	r7, [r1, #16]
 800e924:	2f00      	cmp	r7, #0
 800e926:	d0f6      	beq.n	800e916 <__sflush_r+0xae>
 800e928:	0793      	lsls	r3, r2, #30
 800e92a:	680e      	ldr	r6, [r1, #0]
 800e92c:	bf08      	it	eq
 800e92e:	694b      	ldreq	r3, [r1, #20]
 800e930:	600f      	str	r7, [r1, #0]
 800e932:	bf18      	it	ne
 800e934:	2300      	movne	r3, #0
 800e936:	eba6 0807 	sub.w	r8, r6, r7
 800e93a:	608b      	str	r3, [r1, #8]
 800e93c:	f1b8 0f00 	cmp.w	r8, #0
 800e940:	dde9      	ble.n	800e916 <__sflush_r+0xae>
 800e942:	6a21      	ldr	r1, [r4, #32]
 800e944:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e946:	4643      	mov	r3, r8
 800e948:	463a      	mov	r2, r7
 800e94a:	4628      	mov	r0, r5
 800e94c:	47b0      	blx	r6
 800e94e:	2800      	cmp	r0, #0
 800e950:	dc08      	bgt.n	800e964 <__sflush_r+0xfc>
 800e952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e95a:	81a3      	strh	r3, [r4, #12]
 800e95c:	f04f 30ff 	mov.w	r0, #4294967295
 800e960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e964:	4407      	add	r7, r0
 800e966:	eba8 0800 	sub.w	r8, r8, r0
 800e96a:	e7e7      	b.n	800e93c <__sflush_r+0xd4>
 800e96c:	dfbffffe 	.word	0xdfbffffe

0800e970 <_fflush_r>:
 800e970:	b538      	push	{r3, r4, r5, lr}
 800e972:	690b      	ldr	r3, [r1, #16]
 800e974:	4605      	mov	r5, r0
 800e976:	460c      	mov	r4, r1
 800e978:	b913      	cbnz	r3, 800e980 <_fflush_r+0x10>
 800e97a:	2500      	movs	r5, #0
 800e97c:	4628      	mov	r0, r5
 800e97e:	bd38      	pop	{r3, r4, r5, pc}
 800e980:	b118      	cbz	r0, 800e98a <_fflush_r+0x1a>
 800e982:	6a03      	ldr	r3, [r0, #32]
 800e984:	b90b      	cbnz	r3, 800e98a <_fflush_r+0x1a>
 800e986:	f7ff f8e5 	bl	800db54 <__sinit>
 800e98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d0f3      	beq.n	800e97a <_fflush_r+0xa>
 800e992:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e994:	07d0      	lsls	r0, r2, #31
 800e996:	d404      	bmi.n	800e9a2 <_fflush_r+0x32>
 800e998:	0599      	lsls	r1, r3, #22
 800e99a:	d402      	bmi.n	800e9a2 <_fflush_r+0x32>
 800e99c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e99e:	f7ff fb4e 	bl	800e03e <__retarget_lock_acquire_recursive>
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	4621      	mov	r1, r4
 800e9a6:	f7ff ff5f 	bl	800e868 <__sflush_r>
 800e9aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e9ac:	07da      	lsls	r2, r3, #31
 800e9ae:	4605      	mov	r5, r0
 800e9b0:	d4e4      	bmi.n	800e97c <_fflush_r+0xc>
 800e9b2:	89a3      	ldrh	r3, [r4, #12]
 800e9b4:	059b      	lsls	r3, r3, #22
 800e9b6:	d4e1      	bmi.n	800e97c <_fflush_r+0xc>
 800e9b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e9ba:	f7ff fb41 	bl	800e040 <__retarget_lock_release_recursive>
 800e9be:	e7dd      	b.n	800e97c <_fflush_r+0xc>

0800e9c0 <fiprintf>:
 800e9c0:	b40e      	push	{r1, r2, r3}
 800e9c2:	b503      	push	{r0, r1, lr}
 800e9c4:	4601      	mov	r1, r0
 800e9c6:	ab03      	add	r3, sp, #12
 800e9c8:	4805      	ldr	r0, [pc, #20]	@ (800e9e0 <fiprintf+0x20>)
 800e9ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ce:	6800      	ldr	r0, [r0, #0]
 800e9d0:	9301      	str	r3, [sp, #4]
 800e9d2:	f000 f913 	bl	800ebfc <_vfiprintf_r>
 800e9d6:	b002      	add	sp, #8
 800e9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9dc:	b003      	add	sp, #12
 800e9de:	4770      	bx	lr
 800e9e0:	20000194 	.word	0x20000194

0800e9e4 <__swhatbuf_r>:
 800e9e4:	b570      	push	{r4, r5, r6, lr}
 800e9e6:	460c      	mov	r4, r1
 800e9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ec:	2900      	cmp	r1, #0
 800e9ee:	b096      	sub	sp, #88	@ 0x58
 800e9f0:	4615      	mov	r5, r2
 800e9f2:	461e      	mov	r6, r3
 800e9f4:	da0d      	bge.n	800ea12 <__swhatbuf_r+0x2e>
 800e9f6:	89a3      	ldrh	r3, [r4, #12]
 800e9f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e9fc:	f04f 0100 	mov.w	r1, #0
 800ea00:	bf14      	ite	ne
 800ea02:	2340      	movne	r3, #64	@ 0x40
 800ea04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ea08:	2000      	movs	r0, #0
 800ea0a:	6031      	str	r1, [r6, #0]
 800ea0c:	602b      	str	r3, [r5, #0]
 800ea0e:	b016      	add	sp, #88	@ 0x58
 800ea10:	bd70      	pop	{r4, r5, r6, pc}
 800ea12:	466a      	mov	r2, sp
 800ea14:	f000 f862 	bl	800eadc <_fstat_r>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	dbec      	blt.n	800e9f6 <__swhatbuf_r+0x12>
 800ea1c:	9901      	ldr	r1, [sp, #4]
 800ea1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ea22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ea26:	4259      	negs	r1, r3
 800ea28:	4159      	adcs	r1, r3
 800ea2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea2e:	e7eb      	b.n	800ea08 <__swhatbuf_r+0x24>

0800ea30 <__smakebuf_r>:
 800ea30:	898b      	ldrh	r3, [r1, #12]
 800ea32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea34:	079d      	lsls	r5, r3, #30
 800ea36:	4606      	mov	r6, r0
 800ea38:	460c      	mov	r4, r1
 800ea3a:	d507      	bpl.n	800ea4c <__smakebuf_r+0x1c>
 800ea3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ea40:	6023      	str	r3, [r4, #0]
 800ea42:	6123      	str	r3, [r4, #16]
 800ea44:	2301      	movs	r3, #1
 800ea46:	6163      	str	r3, [r4, #20]
 800ea48:	b003      	add	sp, #12
 800ea4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea4c:	ab01      	add	r3, sp, #4
 800ea4e:	466a      	mov	r2, sp
 800ea50:	f7ff ffc8 	bl	800e9e4 <__swhatbuf_r>
 800ea54:	9f00      	ldr	r7, [sp, #0]
 800ea56:	4605      	mov	r5, r0
 800ea58:	4639      	mov	r1, r7
 800ea5a:	4630      	mov	r0, r6
 800ea5c:	f7ff fb92 	bl	800e184 <_malloc_r>
 800ea60:	b948      	cbnz	r0, 800ea76 <__smakebuf_r+0x46>
 800ea62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea66:	059a      	lsls	r2, r3, #22
 800ea68:	d4ee      	bmi.n	800ea48 <__smakebuf_r+0x18>
 800ea6a:	f023 0303 	bic.w	r3, r3, #3
 800ea6e:	f043 0302 	orr.w	r3, r3, #2
 800ea72:	81a3      	strh	r3, [r4, #12]
 800ea74:	e7e2      	b.n	800ea3c <__smakebuf_r+0xc>
 800ea76:	89a3      	ldrh	r3, [r4, #12]
 800ea78:	6020      	str	r0, [r4, #0]
 800ea7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea7e:	81a3      	strh	r3, [r4, #12]
 800ea80:	9b01      	ldr	r3, [sp, #4]
 800ea82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ea86:	b15b      	cbz	r3, 800eaa0 <__smakebuf_r+0x70>
 800ea88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea8c:	4630      	mov	r0, r6
 800ea8e:	f000 f837 	bl	800eb00 <_isatty_r>
 800ea92:	b128      	cbz	r0, 800eaa0 <__smakebuf_r+0x70>
 800ea94:	89a3      	ldrh	r3, [r4, #12]
 800ea96:	f023 0303 	bic.w	r3, r3, #3
 800ea9a:	f043 0301 	orr.w	r3, r3, #1
 800ea9e:	81a3      	strh	r3, [r4, #12]
 800eaa0:	89a3      	ldrh	r3, [r4, #12]
 800eaa2:	431d      	orrs	r5, r3
 800eaa4:	81a5      	strh	r5, [r4, #12]
 800eaa6:	e7cf      	b.n	800ea48 <__smakebuf_r+0x18>

0800eaa8 <memmove>:
 800eaa8:	4288      	cmp	r0, r1
 800eaaa:	b510      	push	{r4, lr}
 800eaac:	eb01 0402 	add.w	r4, r1, r2
 800eab0:	d902      	bls.n	800eab8 <memmove+0x10>
 800eab2:	4284      	cmp	r4, r0
 800eab4:	4623      	mov	r3, r4
 800eab6:	d807      	bhi.n	800eac8 <memmove+0x20>
 800eab8:	1e43      	subs	r3, r0, #1
 800eaba:	42a1      	cmp	r1, r4
 800eabc:	d008      	beq.n	800ead0 <memmove+0x28>
 800eabe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eac6:	e7f8      	b.n	800eaba <memmove+0x12>
 800eac8:	4402      	add	r2, r0
 800eaca:	4601      	mov	r1, r0
 800eacc:	428a      	cmp	r2, r1
 800eace:	d100      	bne.n	800ead2 <memmove+0x2a>
 800ead0:	bd10      	pop	{r4, pc}
 800ead2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ead6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eada:	e7f7      	b.n	800eacc <memmove+0x24>

0800eadc <_fstat_r>:
 800eadc:	b538      	push	{r3, r4, r5, lr}
 800eade:	4d07      	ldr	r5, [pc, #28]	@ (800eafc <_fstat_r+0x20>)
 800eae0:	2300      	movs	r3, #0
 800eae2:	4604      	mov	r4, r0
 800eae4:	4608      	mov	r0, r1
 800eae6:	4611      	mov	r1, r2
 800eae8:	602b      	str	r3, [r5, #0]
 800eaea:	f7f2 fa7b 	bl	8000fe4 <_fstat>
 800eaee:	1c43      	adds	r3, r0, #1
 800eaf0:	d102      	bne.n	800eaf8 <_fstat_r+0x1c>
 800eaf2:	682b      	ldr	r3, [r5, #0]
 800eaf4:	b103      	cbz	r3, 800eaf8 <_fstat_r+0x1c>
 800eaf6:	6023      	str	r3, [r4, #0]
 800eaf8:	bd38      	pop	{r3, r4, r5, pc}
 800eafa:	bf00      	nop
 800eafc:	20002c80 	.word	0x20002c80

0800eb00 <_isatty_r>:
 800eb00:	b538      	push	{r3, r4, r5, lr}
 800eb02:	4d06      	ldr	r5, [pc, #24]	@ (800eb1c <_isatty_r+0x1c>)
 800eb04:	2300      	movs	r3, #0
 800eb06:	4604      	mov	r4, r0
 800eb08:	4608      	mov	r0, r1
 800eb0a:	602b      	str	r3, [r5, #0]
 800eb0c:	f7f2 fa7a 	bl	8001004 <_isatty>
 800eb10:	1c43      	adds	r3, r0, #1
 800eb12:	d102      	bne.n	800eb1a <_isatty_r+0x1a>
 800eb14:	682b      	ldr	r3, [r5, #0]
 800eb16:	b103      	cbz	r3, 800eb1a <_isatty_r+0x1a>
 800eb18:	6023      	str	r3, [r4, #0]
 800eb1a:	bd38      	pop	{r3, r4, r5, pc}
 800eb1c:	20002c80 	.word	0x20002c80

0800eb20 <_sbrk_r>:
 800eb20:	b538      	push	{r3, r4, r5, lr}
 800eb22:	4d06      	ldr	r5, [pc, #24]	@ (800eb3c <_sbrk_r+0x1c>)
 800eb24:	2300      	movs	r3, #0
 800eb26:	4604      	mov	r4, r0
 800eb28:	4608      	mov	r0, r1
 800eb2a:	602b      	str	r3, [r5, #0]
 800eb2c:	f7f2 fa82 	bl	8001034 <_sbrk>
 800eb30:	1c43      	adds	r3, r0, #1
 800eb32:	d102      	bne.n	800eb3a <_sbrk_r+0x1a>
 800eb34:	682b      	ldr	r3, [r5, #0]
 800eb36:	b103      	cbz	r3, 800eb3a <_sbrk_r+0x1a>
 800eb38:	6023      	str	r3, [r4, #0]
 800eb3a:	bd38      	pop	{r3, r4, r5, pc}
 800eb3c:	20002c80 	.word	0x20002c80

0800eb40 <abort>:
 800eb40:	b508      	push	{r3, lr}
 800eb42:	2006      	movs	r0, #6
 800eb44:	f000 f99a 	bl	800ee7c <raise>
 800eb48:	2001      	movs	r0, #1
 800eb4a:	f7f2 f9fb 	bl	8000f44 <_exit>

0800eb4e <_realloc_r>:
 800eb4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb52:	4680      	mov	r8, r0
 800eb54:	4615      	mov	r5, r2
 800eb56:	460c      	mov	r4, r1
 800eb58:	b921      	cbnz	r1, 800eb64 <_realloc_r+0x16>
 800eb5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb5e:	4611      	mov	r1, r2
 800eb60:	f7ff bb10 	b.w	800e184 <_malloc_r>
 800eb64:	b92a      	cbnz	r2, 800eb72 <_realloc_r+0x24>
 800eb66:	f7ff fa99 	bl	800e09c <_free_r>
 800eb6a:	2400      	movs	r4, #0
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb72:	f000 f99f 	bl	800eeb4 <_malloc_usable_size_r>
 800eb76:	4285      	cmp	r5, r0
 800eb78:	4606      	mov	r6, r0
 800eb7a:	d802      	bhi.n	800eb82 <_realloc_r+0x34>
 800eb7c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eb80:	d8f4      	bhi.n	800eb6c <_realloc_r+0x1e>
 800eb82:	4629      	mov	r1, r5
 800eb84:	4640      	mov	r0, r8
 800eb86:	f7ff fafd 	bl	800e184 <_malloc_r>
 800eb8a:	4607      	mov	r7, r0
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	d0ec      	beq.n	800eb6a <_realloc_r+0x1c>
 800eb90:	42b5      	cmp	r5, r6
 800eb92:	462a      	mov	r2, r5
 800eb94:	4621      	mov	r1, r4
 800eb96:	bf28      	it	cs
 800eb98:	4632      	movcs	r2, r6
 800eb9a:	f7ff fa52 	bl	800e042 <memcpy>
 800eb9e:	4621      	mov	r1, r4
 800eba0:	4640      	mov	r0, r8
 800eba2:	f7ff fa7b 	bl	800e09c <_free_r>
 800eba6:	463c      	mov	r4, r7
 800eba8:	e7e0      	b.n	800eb6c <_realloc_r+0x1e>

0800ebaa <__sfputc_r>:
 800ebaa:	6893      	ldr	r3, [r2, #8]
 800ebac:	3b01      	subs	r3, #1
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	b410      	push	{r4}
 800ebb2:	6093      	str	r3, [r2, #8]
 800ebb4:	da08      	bge.n	800ebc8 <__sfputc_r+0x1e>
 800ebb6:	6994      	ldr	r4, [r2, #24]
 800ebb8:	42a3      	cmp	r3, r4
 800ebba:	db01      	blt.n	800ebc0 <__sfputc_r+0x16>
 800ebbc:	290a      	cmp	r1, #10
 800ebbe:	d103      	bne.n	800ebc8 <__sfputc_r+0x1e>
 800ebc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebc4:	f7ff b8d1 	b.w	800dd6a <__swbuf_r>
 800ebc8:	6813      	ldr	r3, [r2, #0]
 800ebca:	1c58      	adds	r0, r3, #1
 800ebcc:	6010      	str	r0, [r2, #0]
 800ebce:	7019      	strb	r1, [r3, #0]
 800ebd0:	4608      	mov	r0, r1
 800ebd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <__sfputs_r>:
 800ebd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebda:	4606      	mov	r6, r0
 800ebdc:	460f      	mov	r7, r1
 800ebde:	4614      	mov	r4, r2
 800ebe0:	18d5      	adds	r5, r2, r3
 800ebe2:	42ac      	cmp	r4, r5
 800ebe4:	d101      	bne.n	800ebea <__sfputs_r+0x12>
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	e007      	b.n	800ebfa <__sfputs_r+0x22>
 800ebea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebee:	463a      	mov	r2, r7
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	f7ff ffda 	bl	800ebaa <__sfputc_r>
 800ebf6:	1c43      	adds	r3, r0, #1
 800ebf8:	d1f3      	bne.n	800ebe2 <__sfputs_r+0xa>
 800ebfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ebfc <_vfiprintf_r>:
 800ebfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec00:	460d      	mov	r5, r1
 800ec02:	b09d      	sub	sp, #116	@ 0x74
 800ec04:	4614      	mov	r4, r2
 800ec06:	4698      	mov	r8, r3
 800ec08:	4606      	mov	r6, r0
 800ec0a:	b118      	cbz	r0, 800ec14 <_vfiprintf_r+0x18>
 800ec0c:	6a03      	ldr	r3, [r0, #32]
 800ec0e:	b90b      	cbnz	r3, 800ec14 <_vfiprintf_r+0x18>
 800ec10:	f7fe ffa0 	bl	800db54 <__sinit>
 800ec14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec16:	07d9      	lsls	r1, r3, #31
 800ec18:	d405      	bmi.n	800ec26 <_vfiprintf_r+0x2a>
 800ec1a:	89ab      	ldrh	r3, [r5, #12]
 800ec1c:	059a      	lsls	r2, r3, #22
 800ec1e:	d402      	bmi.n	800ec26 <_vfiprintf_r+0x2a>
 800ec20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec22:	f7ff fa0c 	bl	800e03e <__retarget_lock_acquire_recursive>
 800ec26:	89ab      	ldrh	r3, [r5, #12]
 800ec28:	071b      	lsls	r3, r3, #28
 800ec2a:	d501      	bpl.n	800ec30 <_vfiprintf_r+0x34>
 800ec2c:	692b      	ldr	r3, [r5, #16]
 800ec2e:	b99b      	cbnz	r3, 800ec58 <_vfiprintf_r+0x5c>
 800ec30:	4629      	mov	r1, r5
 800ec32:	4630      	mov	r0, r6
 800ec34:	f7ff f8d8 	bl	800dde8 <__swsetup_r>
 800ec38:	b170      	cbz	r0, 800ec58 <_vfiprintf_r+0x5c>
 800ec3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec3c:	07dc      	lsls	r4, r3, #31
 800ec3e:	d504      	bpl.n	800ec4a <_vfiprintf_r+0x4e>
 800ec40:	f04f 30ff 	mov.w	r0, #4294967295
 800ec44:	b01d      	add	sp, #116	@ 0x74
 800ec46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec4a:	89ab      	ldrh	r3, [r5, #12]
 800ec4c:	0598      	lsls	r0, r3, #22
 800ec4e:	d4f7      	bmi.n	800ec40 <_vfiprintf_r+0x44>
 800ec50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec52:	f7ff f9f5 	bl	800e040 <__retarget_lock_release_recursive>
 800ec56:	e7f3      	b.n	800ec40 <_vfiprintf_r+0x44>
 800ec58:	2300      	movs	r3, #0
 800ec5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec5c:	2320      	movs	r3, #32
 800ec5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec62:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec66:	2330      	movs	r3, #48	@ 0x30
 800ec68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ee18 <_vfiprintf_r+0x21c>
 800ec6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec70:	f04f 0901 	mov.w	r9, #1
 800ec74:	4623      	mov	r3, r4
 800ec76:	469a      	mov	sl, r3
 800ec78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec7c:	b10a      	cbz	r2, 800ec82 <_vfiprintf_r+0x86>
 800ec7e:	2a25      	cmp	r2, #37	@ 0x25
 800ec80:	d1f9      	bne.n	800ec76 <_vfiprintf_r+0x7a>
 800ec82:	ebba 0b04 	subs.w	fp, sl, r4
 800ec86:	d00b      	beq.n	800eca0 <_vfiprintf_r+0xa4>
 800ec88:	465b      	mov	r3, fp
 800ec8a:	4622      	mov	r2, r4
 800ec8c:	4629      	mov	r1, r5
 800ec8e:	4630      	mov	r0, r6
 800ec90:	f7ff ffa2 	bl	800ebd8 <__sfputs_r>
 800ec94:	3001      	adds	r0, #1
 800ec96:	f000 80a7 	beq.w	800ede8 <_vfiprintf_r+0x1ec>
 800ec9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec9c:	445a      	add	r2, fp
 800ec9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800eca0:	f89a 3000 	ldrb.w	r3, [sl]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f000 809f 	beq.w	800ede8 <_vfiprintf_r+0x1ec>
 800ecaa:	2300      	movs	r3, #0
 800ecac:	f04f 32ff 	mov.w	r2, #4294967295
 800ecb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecb4:	f10a 0a01 	add.w	sl, sl, #1
 800ecb8:	9304      	str	r3, [sp, #16]
 800ecba:	9307      	str	r3, [sp, #28]
 800ecbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ecc0:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecc2:	4654      	mov	r4, sl
 800ecc4:	2205      	movs	r2, #5
 800ecc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecca:	4853      	ldr	r0, [pc, #332]	@ (800ee18 <_vfiprintf_r+0x21c>)
 800eccc:	f7f1 fab0 	bl	8000230 <memchr>
 800ecd0:	9a04      	ldr	r2, [sp, #16]
 800ecd2:	b9d8      	cbnz	r0, 800ed0c <_vfiprintf_r+0x110>
 800ecd4:	06d1      	lsls	r1, r2, #27
 800ecd6:	bf44      	itt	mi
 800ecd8:	2320      	movmi	r3, #32
 800ecda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecde:	0713      	lsls	r3, r2, #28
 800ece0:	bf44      	itt	mi
 800ece2:	232b      	movmi	r3, #43	@ 0x2b
 800ece4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ece8:	f89a 3000 	ldrb.w	r3, [sl]
 800ecec:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecee:	d015      	beq.n	800ed1c <_vfiprintf_r+0x120>
 800ecf0:	9a07      	ldr	r2, [sp, #28]
 800ecf2:	4654      	mov	r4, sl
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	f04f 0c0a 	mov.w	ip, #10
 800ecfa:	4621      	mov	r1, r4
 800ecfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed00:	3b30      	subs	r3, #48	@ 0x30
 800ed02:	2b09      	cmp	r3, #9
 800ed04:	d94b      	bls.n	800ed9e <_vfiprintf_r+0x1a2>
 800ed06:	b1b0      	cbz	r0, 800ed36 <_vfiprintf_r+0x13a>
 800ed08:	9207      	str	r2, [sp, #28]
 800ed0a:	e014      	b.n	800ed36 <_vfiprintf_r+0x13a>
 800ed0c:	eba0 0308 	sub.w	r3, r0, r8
 800ed10:	fa09 f303 	lsl.w	r3, r9, r3
 800ed14:	4313      	orrs	r3, r2
 800ed16:	9304      	str	r3, [sp, #16]
 800ed18:	46a2      	mov	sl, r4
 800ed1a:	e7d2      	b.n	800ecc2 <_vfiprintf_r+0xc6>
 800ed1c:	9b03      	ldr	r3, [sp, #12]
 800ed1e:	1d19      	adds	r1, r3, #4
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	9103      	str	r1, [sp, #12]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	bfbb      	ittet	lt
 800ed28:	425b      	neglt	r3, r3
 800ed2a:	f042 0202 	orrlt.w	r2, r2, #2
 800ed2e:	9307      	strge	r3, [sp, #28]
 800ed30:	9307      	strlt	r3, [sp, #28]
 800ed32:	bfb8      	it	lt
 800ed34:	9204      	strlt	r2, [sp, #16]
 800ed36:	7823      	ldrb	r3, [r4, #0]
 800ed38:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed3a:	d10a      	bne.n	800ed52 <_vfiprintf_r+0x156>
 800ed3c:	7863      	ldrb	r3, [r4, #1]
 800ed3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed40:	d132      	bne.n	800eda8 <_vfiprintf_r+0x1ac>
 800ed42:	9b03      	ldr	r3, [sp, #12]
 800ed44:	1d1a      	adds	r2, r3, #4
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	9203      	str	r2, [sp, #12]
 800ed4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed4e:	3402      	adds	r4, #2
 800ed50:	9305      	str	r3, [sp, #20]
 800ed52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ee28 <_vfiprintf_r+0x22c>
 800ed56:	7821      	ldrb	r1, [r4, #0]
 800ed58:	2203      	movs	r2, #3
 800ed5a:	4650      	mov	r0, sl
 800ed5c:	f7f1 fa68 	bl	8000230 <memchr>
 800ed60:	b138      	cbz	r0, 800ed72 <_vfiprintf_r+0x176>
 800ed62:	9b04      	ldr	r3, [sp, #16]
 800ed64:	eba0 000a 	sub.w	r0, r0, sl
 800ed68:	2240      	movs	r2, #64	@ 0x40
 800ed6a:	4082      	lsls	r2, r0
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	3401      	adds	r4, #1
 800ed70:	9304      	str	r3, [sp, #16]
 800ed72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed76:	4829      	ldr	r0, [pc, #164]	@ (800ee1c <_vfiprintf_r+0x220>)
 800ed78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed7c:	2206      	movs	r2, #6
 800ed7e:	f7f1 fa57 	bl	8000230 <memchr>
 800ed82:	2800      	cmp	r0, #0
 800ed84:	d03f      	beq.n	800ee06 <_vfiprintf_r+0x20a>
 800ed86:	4b26      	ldr	r3, [pc, #152]	@ (800ee20 <_vfiprintf_r+0x224>)
 800ed88:	bb1b      	cbnz	r3, 800edd2 <_vfiprintf_r+0x1d6>
 800ed8a:	9b03      	ldr	r3, [sp, #12]
 800ed8c:	3307      	adds	r3, #7
 800ed8e:	f023 0307 	bic.w	r3, r3, #7
 800ed92:	3308      	adds	r3, #8
 800ed94:	9303      	str	r3, [sp, #12]
 800ed96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed98:	443b      	add	r3, r7
 800ed9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed9c:	e76a      	b.n	800ec74 <_vfiprintf_r+0x78>
 800ed9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800eda2:	460c      	mov	r4, r1
 800eda4:	2001      	movs	r0, #1
 800eda6:	e7a8      	b.n	800ecfa <_vfiprintf_r+0xfe>
 800eda8:	2300      	movs	r3, #0
 800edaa:	3401      	adds	r4, #1
 800edac:	9305      	str	r3, [sp, #20]
 800edae:	4619      	mov	r1, r3
 800edb0:	f04f 0c0a 	mov.w	ip, #10
 800edb4:	4620      	mov	r0, r4
 800edb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edba:	3a30      	subs	r2, #48	@ 0x30
 800edbc:	2a09      	cmp	r2, #9
 800edbe:	d903      	bls.n	800edc8 <_vfiprintf_r+0x1cc>
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d0c6      	beq.n	800ed52 <_vfiprintf_r+0x156>
 800edc4:	9105      	str	r1, [sp, #20]
 800edc6:	e7c4      	b.n	800ed52 <_vfiprintf_r+0x156>
 800edc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800edcc:	4604      	mov	r4, r0
 800edce:	2301      	movs	r3, #1
 800edd0:	e7f0      	b.n	800edb4 <_vfiprintf_r+0x1b8>
 800edd2:	ab03      	add	r3, sp, #12
 800edd4:	9300      	str	r3, [sp, #0]
 800edd6:	462a      	mov	r2, r5
 800edd8:	4b12      	ldr	r3, [pc, #72]	@ (800ee24 <_vfiprintf_r+0x228>)
 800edda:	a904      	add	r1, sp, #16
 800eddc:	4630      	mov	r0, r6
 800edde:	f3af 8000 	nop.w
 800ede2:	4607      	mov	r7, r0
 800ede4:	1c78      	adds	r0, r7, #1
 800ede6:	d1d6      	bne.n	800ed96 <_vfiprintf_r+0x19a>
 800ede8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edea:	07d9      	lsls	r1, r3, #31
 800edec:	d405      	bmi.n	800edfa <_vfiprintf_r+0x1fe>
 800edee:	89ab      	ldrh	r3, [r5, #12]
 800edf0:	059a      	lsls	r2, r3, #22
 800edf2:	d402      	bmi.n	800edfa <_vfiprintf_r+0x1fe>
 800edf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edf6:	f7ff f923 	bl	800e040 <__retarget_lock_release_recursive>
 800edfa:	89ab      	ldrh	r3, [r5, #12]
 800edfc:	065b      	lsls	r3, r3, #25
 800edfe:	f53f af1f 	bmi.w	800ec40 <_vfiprintf_r+0x44>
 800ee02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee04:	e71e      	b.n	800ec44 <_vfiprintf_r+0x48>
 800ee06:	ab03      	add	r3, sp, #12
 800ee08:	9300      	str	r3, [sp, #0]
 800ee0a:	462a      	mov	r2, r5
 800ee0c:	4b05      	ldr	r3, [pc, #20]	@ (800ee24 <_vfiprintf_r+0x228>)
 800ee0e:	a904      	add	r1, sp, #16
 800ee10:	4630      	mov	r0, r6
 800ee12:	f7ff fc09 	bl	800e628 <_printf_i>
 800ee16:	e7e4      	b.n	800ede2 <_vfiprintf_r+0x1e6>
 800ee18:	0800f466 	.word	0x0800f466
 800ee1c:	0800f470 	.word	0x0800f470
 800ee20:	00000000 	.word	0x00000000
 800ee24:	0800ebd9 	.word	0x0800ebd9
 800ee28:	0800f46c 	.word	0x0800f46c

0800ee2c <_raise_r>:
 800ee2c:	291f      	cmp	r1, #31
 800ee2e:	b538      	push	{r3, r4, r5, lr}
 800ee30:	4605      	mov	r5, r0
 800ee32:	460c      	mov	r4, r1
 800ee34:	d904      	bls.n	800ee40 <_raise_r+0x14>
 800ee36:	2316      	movs	r3, #22
 800ee38:	6003      	str	r3, [r0, #0]
 800ee3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee3e:	bd38      	pop	{r3, r4, r5, pc}
 800ee40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ee42:	b112      	cbz	r2, 800ee4a <_raise_r+0x1e>
 800ee44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee48:	b94b      	cbnz	r3, 800ee5e <_raise_r+0x32>
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f000 f830 	bl	800eeb0 <_getpid_r>
 800ee50:	4622      	mov	r2, r4
 800ee52:	4601      	mov	r1, r0
 800ee54:	4628      	mov	r0, r5
 800ee56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee5a:	f000 b817 	b.w	800ee8c <_kill_r>
 800ee5e:	2b01      	cmp	r3, #1
 800ee60:	d00a      	beq.n	800ee78 <_raise_r+0x4c>
 800ee62:	1c59      	adds	r1, r3, #1
 800ee64:	d103      	bne.n	800ee6e <_raise_r+0x42>
 800ee66:	2316      	movs	r3, #22
 800ee68:	6003      	str	r3, [r0, #0]
 800ee6a:	2001      	movs	r0, #1
 800ee6c:	e7e7      	b.n	800ee3e <_raise_r+0x12>
 800ee6e:	2100      	movs	r1, #0
 800ee70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ee74:	4620      	mov	r0, r4
 800ee76:	4798      	blx	r3
 800ee78:	2000      	movs	r0, #0
 800ee7a:	e7e0      	b.n	800ee3e <_raise_r+0x12>

0800ee7c <raise>:
 800ee7c:	4b02      	ldr	r3, [pc, #8]	@ (800ee88 <raise+0xc>)
 800ee7e:	4601      	mov	r1, r0
 800ee80:	6818      	ldr	r0, [r3, #0]
 800ee82:	f7ff bfd3 	b.w	800ee2c <_raise_r>
 800ee86:	bf00      	nop
 800ee88:	20000194 	.word	0x20000194

0800ee8c <_kill_r>:
 800ee8c:	b538      	push	{r3, r4, r5, lr}
 800ee8e:	4d07      	ldr	r5, [pc, #28]	@ (800eeac <_kill_r+0x20>)
 800ee90:	2300      	movs	r3, #0
 800ee92:	4604      	mov	r4, r0
 800ee94:	4608      	mov	r0, r1
 800ee96:	4611      	mov	r1, r2
 800ee98:	602b      	str	r3, [r5, #0]
 800ee9a:	f7f2 f843 	bl	8000f24 <_kill>
 800ee9e:	1c43      	adds	r3, r0, #1
 800eea0:	d102      	bne.n	800eea8 <_kill_r+0x1c>
 800eea2:	682b      	ldr	r3, [r5, #0]
 800eea4:	b103      	cbz	r3, 800eea8 <_kill_r+0x1c>
 800eea6:	6023      	str	r3, [r4, #0]
 800eea8:	bd38      	pop	{r3, r4, r5, pc}
 800eeaa:	bf00      	nop
 800eeac:	20002c80 	.word	0x20002c80

0800eeb0 <_getpid_r>:
 800eeb0:	f7f2 b830 	b.w	8000f14 <_getpid>

0800eeb4 <_malloc_usable_size_r>:
 800eeb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeb8:	1f18      	subs	r0, r3, #4
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	bfbc      	itt	lt
 800eebe:	580b      	ldrlt	r3, [r1, r0]
 800eec0:	18c0      	addlt	r0, r0, r3
 800eec2:	4770      	bx	lr

0800eec4 <_init>:
 800eec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eec6:	bf00      	nop
 800eec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeca:	bc08      	pop	{r3}
 800eecc:	469e      	mov	lr, r3
 800eece:	4770      	bx	lr

0800eed0 <_fini>:
 800eed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eed2:	bf00      	nop
 800eed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eed6:	bc08      	pop	{r3}
 800eed8:	469e      	mov	lr, r3
 800eeda:	4770      	bx	lr
